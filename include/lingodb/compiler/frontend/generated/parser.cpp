// A Bison parser, made by GNU Bison 3.8.2.

// Skeleton implementation for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015, 2018-2021 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.

// DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
// especially those whose name start with YY_ or yy_.  They are
// private implementation details that can be changed or removed.





#include "parser.hpp"


// Unqualified %code blocks.
#line 44 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"

  #include <iostream>
  #include <memory>
  #include "lingodb/compiler/frontend/driver.h"
  #include "lingodb/compiler/frontend/node_factory.h"

  #define mkNode drv.nf.node
  #define mkListShared drv.nf.listShared
  #define mkList drv.nf.list
  #define mkNotNode drv.nf.notNode



#line 60 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"


#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> // FIXME: INFRINGES ON USER NAME SPACE.
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif


// Whether we are compiled with exception support.
#ifndef YY_EXCEPTIONS
# if defined __GNUC__ && !defined __EXCEPTIONS
#  define YY_EXCEPTIONS 0
# else
#  define YY_EXCEPTIONS 1
# endif
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K].location)
/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

# ifndef YYLLOC_DEFAULT
#  define YYLLOC_DEFAULT(Current, Rhs, N)                               \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).begin  = YYRHSLOC (Rhs, 1).begin;                   \
          (Current).end    = YYRHSLOC (Rhs, N).end;                     \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).begin = (Current).end = YYRHSLOC (Rhs, 0).end;      \
        }                                                               \
    while (false)
# endif


// Enable debugging if requested.
#if YYDEBUG

// A pseudo ostream that takes yydebug_ into account.
# define YYCDEBUG if (yydebug_) (*yycdebug_)

# define YY_SYMBOL_PRINT(Title, Symbol)         \
  do {                                          \
    if (yydebug_)                               \
    {                                           \
      *yycdebug_ << Title << ' ';               \
      yy_print_ (*yycdebug_, Symbol);           \
      *yycdebug_ << '\n';                       \
    }                                           \
  } while (false)

# define YY_REDUCE_PRINT(Rule)          \
  do {                                  \
    if (yydebug_)                       \
      yy_reduce_print_ (Rule);          \
  } while (false)

# define YY_STACK_PRINT()               \
  do {                                  \
    if (yydebug_)                       \
      yy_stack_print_ ();                \
  } while (false)

#else // !YYDEBUG

# define YYCDEBUG if (false) std::cerr
# define YY_SYMBOL_PRINT(Title, Symbol)  YY_USE (Symbol)
# define YY_REDUCE_PRINT(Rule)           static_cast<void> (0)
# define YY_STACK_PRINT()                static_cast<void> (0)

#endif // !YYDEBUG

#define yyerrok         (yyerrstatus_ = 0)
#define yyclearin       (yyla.clear ())

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYRECOVERING()  (!!yyerrstatus_)

#line 5 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
namespace  lingodb  {
#line 153 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"

  /// Build a parser object.
  parser::parser (Driver& drv_yyarg)
#if YYDEBUG
    : yydebug_ (false),
      yycdebug_ (&std::cerr),
#else
    :
#endif
      yy_lac_established_ (false),
      drv (drv_yyarg)
  {}

  parser::~parser ()
  {}

  parser::syntax_error::~syntax_error () YY_NOEXCEPT YY_NOTHROW
  {}

  /*---------.
  | symbol.  |
  `---------*/



  // by_state.
  parser::by_state::by_state () YY_NOEXCEPT
    : state (empty_state)
  {}

  parser::by_state::by_state (const by_state& that) YY_NOEXCEPT
    : state (that.state)
  {}

  void
  parser::by_state::clear () YY_NOEXCEPT
  {
    state = empty_state;
  }

  void
  parser::by_state::move (by_state& that)
  {
    state = that.state;
    that.clear ();
  }

  parser::by_state::by_state (state_type s) YY_NOEXCEPT
    : state (s)
  {}

  parser::symbol_kind_type
  parser::by_state::kind () const YY_NOEXCEPT
  {
    if (state == empty_state)
      return symbol_kind::S_YYEMPTY;
    else
      return YY_CAST (symbol_kind_type, yystos_[+state]);
  }

  parser::stack_symbol_type::stack_symbol_type ()
  {}

  parser::stack_symbol_type::stack_symbol_type (YY_RVREF (stack_symbol_type) that)
    : super_type (YY_MOVE (that.state), YY_MOVE (that.location))
  {
    switch (that.kind ())
    {
      case symbol_kind::S_distinct_clause: // distinct_clause
      case symbol_kind::S_set_quantifier: // set_quantifier
      case symbol_kind::S_opt_asymmetric: // opt_asymmetric
      case symbol_kind::S_OptTemp: // OptTemp
      case symbol_kind::S_opt_varying: // opt_varying
        value.YY_MOVE_OR_COPY< bool > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_ICONST: // ICONST
        value.YY_MOVE_OR_COPY< int > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_when_clause: // when_clause
        value.YY_MOVE_OR_COPY< lingodb::ast::CaseExpression::CaseCheck > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_basicComparisonType: // basicComparisonType
        value.YY_MOVE_OR_COPY< lingodb::ast::ExpressionType > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_join_type: // join_type
        value.YY_MOVE_OR_COPY< lingodb::ast::JoinType > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_Type: // Type
      case symbol_kind::S_SimpleType: // SimpleType
      case symbol_kind::S_ConstTypename: // ConstTypename
      case symbol_kind::S_Numeric_with_opt_lenghth: // Numeric_with_opt_lenghth
      case symbol_kind::S_Numeric: // Numeric
      case symbol_kind::S_Character: // Character
      case symbol_kind::S_ConstCharacter: // ConstCharacter
      case symbol_kind::S_CharacterWithLength: // CharacterWithLength
      case symbol_kind::S_CharacterWithoutLength: // CharacterWithoutLength
      case symbol_kind::S_character: // character
      case symbol_kind::S_ConstDatetime: // ConstDatetime
      case symbol_kind::S_ConstInterval: // ConstInterval
      case symbol_kind::S_Typename: // Typename
        value.YY_MOVE_OR_COPY< lingodb::ast::LogicalTypeWithMods > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_nulls_order: // opt_nulls_order
        value.YY_MOVE_OR_COPY< lingodb::ast::OrderByNullType > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_asc_desc: // opt_asc_desc
        value.YY_MOVE_OR_COPY< lingodb::ast::OrderType > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_sub_type: // sub_type
        value.YY_MOVE_OR_COPY< lingodb::ast::SubqueryType > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_join_qual: // join_qual
        value.YY_MOVE_OR_COPY< lingodb::ast::jointCondOrUsingCols > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_sort_clause: // opt_sort_clause
        value.YY_MOVE_OR_COPY< std::optional<std::shared_ptr<lingodb::ast::OrderByModifier>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_case_arg: // case_arg
        value.YY_MOVE_OR_COPY< std::optional<std::shared_ptr<lingodb::ast::ParsedExpression>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_select_limit: // opt_select_limit
        value.YY_MOVE_OR_COPY< std::optional<std::shared_ptr<lingodb::ast::ResultModifier>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_interval: // opt_interval
        value.YY_MOVE_OR_COPY< std::optional<std::string> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_copy_opt_item: // copy_opt_item
        value.YY_MOVE_OR_COPY< std::pair<std::string, std::string> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_alias_clause: // alias_clause
      case symbol_kind::S_opt_alias_clause: // opt_alias_clause
        value.YY_MOVE_OR_COPY< std::pair<std::string, std::vector<std::string>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_extract_arg: // extract_arg
        value.YY_MOVE_OR_COPY< std::shared_ptr<ast::ConstantExpression> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_CopyStmt: // CopyStmt
        value.YY_MOVE_OR_COPY< std::shared_ptr<ast::CopyNode> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_VariableSetStmt: // VariableSetStmt
      case symbol_kind::S_set_rest: // set_rest
      case symbol_kind::S_generic_set: // generic_set
      case symbol_kind::S_set_rest_more: // set_rest_more
        value.YY_MOVE_OR_COPY< std::shared_ptr<ast::SetVariableStatement> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_agg_expr: // agg_expr
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::AggregationNode> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_toplevel_stmt: // toplevel_stmt
      case symbol_kind::S_stmt: // stmt
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::AstNode> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_and_a_expr: // and_a_expr
      case symbol_kind::S_or_a_expr: // or_a_expr
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::ConjunctionExpression> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_ColConstraint: // ColConstraint
      case symbol_kind::S_ColConstraintElem: // ColConstraintElem
      case symbol_kind::S_ConstraintElem: // ConstraintElem
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::Constraint> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_CreateStmt: // CreateStmt
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::CreateNode> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_from_list: // from_list
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::CrossProductRef> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_values_clause: // values_clause
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::ExpressionListRef> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_func_application: // func_application
      case symbol_kind::S_func_expr: // func_expr
      case symbol_kind::S_func_expr_common_subexpr: // func_expr_common_subexpr
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::FunctionExpression> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_group_clause: // group_clause
      case symbol_kind::S_group_clause_with_alias: // group_clause_with_alias
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::GroupByNode> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_InsertStmt: // InsertStmt
      case symbol_kind::S_insert_rest: // insert_rest
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::InsertNode> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_select_limit: // select_limit
      case symbol_kind::S_limit_clause: // limit_clause
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::LimitModifier> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_sortby: // sortby
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::OrderByElement> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_sort_clause: // sort_clause
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::OrderByModifier> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_var_value: // var_value
      case symbol_kind::S_opt_boolean_or_string: // opt_boolean_or_string
      case symbol_kind::S_NonReservedWord_or_Sconst: // NonReservedWord_or_Sconst
      case symbol_kind::S_group_by_item: // group_by_item
      case symbol_kind::S_group_by_item_with_alias: // group_by_item_with_alias
      case symbol_kind::S_having_clause: // having_clause
      case symbol_kind::S_offset_clause: // offset_clause
      case symbol_kind::S_select_limit_value: // select_limit_value
      case symbol_kind::S_select_offset_value: // select_offset_value
      case symbol_kind::S_where_clause: // where_clause
      case symbol_kind::S_a_expr: // a_expr
      case symbol_kind::S_b_expr: // b_expr
      case symbol_kind::S_c_expr: // c_expr
      case symbol_kind::S_case_expr: // case_expr
      case symbol_kind::S_case_default: // case_default
      case symbol_kind::S_columnref: // columnref
      case symbol_kind::S_func_arg_expr: // func_arg_expr
      case symbol_kind::S_cast_expr: // cast_expr
      case symbol_kind::S_indirection: // indirection
      case symbol_kind::S_indirection_el: // indirection_el
      case symbol_kind::S_target_el: // target_el
      case symbol_kind::S_NumericOnly: // NumericOnly
      case symbol_kind::S_AexprConst: // AexprConst
      case symbol_kind::S_Iconst: // Iconst
      case symbol_kind::S_SignedIconst: // SignedIconst
      case symbol_kind::S_Fconst: // Fconst
      case symbol_kind::S_Sconst: // Sconst
      case symbol_kind::S_Bconst: // Bconst
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::ParsedExpression> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_pipe_start: // pipe_start
      case symbol_kind::S_pipe_operator: // pipe_operator
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::PipeOperator> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_select_with_parens: // select_with_parens
      case symbol_kind::S_select_no_parens: // select_no_parens
      case symbol_kind::S_select_clause: // select_clause
      case symbol_kind::S_simple_select: // simple_select
      case symbol_kind::S_with_clause: // with_clause
      case symbol_kind::S_cte_list: // cte_list
      case symbol_kind::S_common_table_expr: // common_table_expr
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::QueryNode> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_set_list: // set_list
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::SetColumnExpression> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_TableElement: // TableElement
      case symbol_kind::S_TableConstraint: // TableConstraint
      case symbol_kind::S_columnElement: // columnElement
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::TableElement> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_SelectStmt: // SelectStmt
      case symbol_kind::S_PipeSQLStmt: // PipeSQLStmt
      case symbol_kind::S_classic_select_and_pipe_sql_with_parens: // classic_select_and_pipe_sql_with_parens
      case symbol_kind::S_pipe_sql_with_parens: // pipe_sql_with_parens
      case symbol_kind::S_pipe_sql_no_parens: // pipe_sql_no_parens
      case symbol_kind::S_pipe_or_select_clause: // pipe_or_select_clause
      case symbol_kind::S_PreparableStmt: // PreparableStmt
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::TableProducer> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_from_clause: // opt_from_clause
      case symbol_kind::S_from_clause: // from_clause
      case symbol_kind::S_table_ref: // table_ref
      case symbol_kind::S_joined_table: // joined_table
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::TableRef> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_target_list: // opt_target_list
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::TargetList> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_type_modifier: // type_modifier
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::Value> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_window_func_expr: // window_func_expr
      case symbol_kind::S_over_clause: // over_clause
      case symbol_kind::S_window_specification: // window_specification
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::WindowExpression> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_frame_clause: // opt_frame_clause
      case symbol_kind::S_frame_extent: // frame_extent
      case symbol_kind::S_frame_bound: // frame_bound
        value.YY_MOVE_OR_COPY< std::shared_ptr<lingodb::ast::WindowFrame> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_FCONST: // FCONST
      case symbol_kind::S_IDENT: // IDENT
      case symbol_kind::S_IDENTIFIER: // "identifier"
      case symbol_kind::S_STRING_VALUE: // STRING_VALUE
      case symbol_kind::S_BIT_VALUE: // "bit_string"
      case symbol_kind::S_HEX_VALUE: // "hex_string"
      case symbol_kind::S_NATIONAL_VALUE: // "nat_string"
      case symbol_kind::S_PERCENT: // "%"
      case symbol_kind::S_PLUS: // "+"
      case symbol_kind::S_SLASH: // "/"
      case symbol_kind::S_STAR: // "*"
      case symbol_kind::S_MINUS: // "-"
      case symbol_kind::S_EQUAL: // "="
      case symbol_kind::S_NOT_EQUAL: // "<>"
      case symbol_kind::S_LESS_EQUAL: // "<="
      case symbol_kind::S_LESS: // "<"
      case symbol_kind::S_GREATER_EQUAL: // ">="
      case symbol_kind::S_GREATER: // ">"
      case symbol_kind::S_UIDENT: // UIDENT
      case symbol_kind::S_SCONST: // SCONST
      case symbol_kind::S_USCONST: // USCONST
      case symbol_kind::S_BCONST: // BCONST
      case symbol_kind::S_XCONST: // XCONST
      case symbol_kind::S_Op: // Op
      case symbol_kind::S_TYPECAST: // TYPECAST
      case symbol_kind::S_ABORT_P: // ABORT_P
      case symbol_kind::S_ABSENT: // ABSENT
      case symbol_kind::S_ABSOLUTE_P: // ABSOLUTE_P
      case symbol_kind::S_ACCESS: // ACCESS
      case symbol_kind::S_ACTION: // ACTION
      case symbol_kind::S_ADD_P: // ADD_P
      case symbol_kind::S_ADMIN: // ADMIN
      case symbol_kind::S_AFTER: // AFTER
      case symbol_kind::S_AGGREGATE: // AGGREGATE
      case symbol_kind::S_ALL: // ALL
      case symbol_kind::S_ALSO: // ALSO
      case symbol_kind::S_ALTER: // ALTER
      case symbol_kind::S_ALWAYS: // ALWAYS
      case symbol_kind::S_ANALYSE: // ANALYSE
      case symbol_kind::S_ANALYZE: // ANALYZE
      case symbol_kind::S_AND: // AND
      case symbol_kind::S_ANY: // ANY
      case symbol_kind::S_ARRAY: // ARRAY
      case symbol_kind::S_AS: // AS
      case symbol_kind::S_ASC: // ASC
      case symbol_kind::S_ASENSITIVE: // ASENSITIVE
      case symbol_kind::S_ASSERTION: // ASSERTION
      case symbol_kind::S_ASSIGNMENT: // ASSIGNMENT
      case symbol_kind::S_ASYMMETRIC: // ASYMMETRIC
      case symbol_kind::S_ATOMIC: // ATOMIC
      case symbol_kind::S_AT: // AT
      case symbol_kind::S_ATTACH: // ATTACH
      case symbol_kind::S_ATTRIBUTE: // ATTRIBUTE
      case symbol_kind::S_AUTHORIZATION: // AUTHORIZATION
      case symbol_kind::S_BACKWARD: // BACKWARD
      case symbol_kind::S_BEFORE: // BEFORE
      case symbol_kind::S_BEGIN_P: // BEGIN_P
      case symbol_kind::S_BETWEEN: // BETWEEN
      case symbol_kind::S_BIGINT: // BIGINT
      case symbol_kind::S_BINARY: // BINARY
      case symbol_kind::S_BIT: // BIT
      case symbol_kind::S_BOOLEAN_P: // BOOLEAN_P
      case symbol_kind::S_BOTH: // BOTH
      case symbol_kind::S_BREADTH: // BREADTH
      case symbol_kind::S_BY: // BY
      case symbol_kind::S_CACHE: // CACHE
      case symbol_kind::S_CALL: // CALL
      case symbol_kind::S_CALLED: // CALLED
      case symbol_kind::S_CASCADE: // CASCADE
      case symbol_kind::S_CASCADED: // CASCADED
      case symbol_kind::S_CASE: // CASE
      case symbol_kind::S_CAST: // CAST
      case symbol_kind::S_CATALOG_P: // CATALOG_P
      case symbol_kind::S_CHAIN: // CHAIN
      case symbol_kind::S_CHAR_P: // CHAR_P
      case symbol_kind::S_CHARACTER: // CHARACTER
      case symbol_kind::S_CHARACTERISTICS: // CHARACTERISTICS
      case symbol_kind::S_CHECK: // CHECK
      case symbol_kind::S_CHECKPOINT: // CHECKPOINT
      case symbol_kind::S_CLASS: // CLASS
      case symbol_kind::S_CLOSE: // CLOSE
      case symbol_kind::S_CLUSTER: // CLUSTER
      case symbol_kind::S_COALESCE: // COALESCE
      case symbol_kind::S_COLLATE: // COLLATE
      case symbol_kind::S_COLLATION: // COLLATION
      case symbol_kind::S_COLUMN: // COLUMN
      case symbol_kind::S_COLUMNS: // COLUMNS
      case symbol_kind::S_COMMENT: // COMMENT
      case symbol_kind::S_COMMENTS: // COMMENTS
      case symbol_kind::S_COMMIT: // COMMIT
      case symbol_kind::S_COMMITTED: // COMMITTED
      case symbol_kind::S_COMPRESSION: // COMPRESSION
      case symbol_kind::S_CONCURRENTLY: // CONCURRENTLY
      case symbol_kind::S_CONDITIONAL: // CONDITIONAL
      case symbol_kind::S_CONFIGURATION: // CONFIGURATION
      case symbol_kind::S_CONFLICT: // CONFLICT
      case symbol_kind::S_CONNECTION: // CONNECTION
      case symbol_kind::S_CONSTRAINT: // CONSTRAINT
      case symbol_kind::S_CONSTRAINTS: // CONSTRAINTS
      case symbol_kind::S_CONTENT_P: // CONTENT_P
      case symbol_kind::S_CONTINUE_P: // CONTINUE_P
      case symbol_kind::S_CONVERSION_P: // CONVERSION_P
      case symbol_kind::S_COPY: // COPY
      case symbol_kind::S_COST: // COST
      case symbol_kind::S_CREATE: // CREATE
      case symbol_kind::S_CROSS: // CROSS
      case symbol_kind::S_CSV: // CSV
      case symbol_kind::S_CUBE: // CUBE
      case symbol_kind::S_CURRENT_P: // CURRENT_P
      case symbol_kind::S_CURRENT_CATALOG: // CURRENT_CATALOG
      case symbol_kind::S_CURRENT_DATE: // CURRENT_DATE
      case symbol_kind::S_CURRENT_ROLE: // CURRENT_ROLE
      case symbol_kind::S_CURRENT_SCHEMA: // CURRENT_SCHEMA
      case symbol_kind::S_CURRENT_TIME: // CURRENT_TIME
      case symbol_kind::S_CURRENT_TIMESTAMP: // CURRENT_TIMESTAMP
      case symbol_kind::S_CURRENT_USER: // CURRENT_USER
      case symbol_kind::S_CURSOR: // CURSOR
      case symbol_kind::S_CYCLE: // CYCLE
      case symbol_kind::S_DATA_P: // DATA_P
      case symbol_kind::S_DATABASE: // DATABASE
      case symbol_kind::S_DAY_P: // DAY_P
      case symbol_kind::S_DEALLOCATE: // DEALLOCATE
      case symbol_kind::S_DEC: // DEC
      case symbol_kind::S_DECIMAL_P: // DECIMAL_P
      case symbol_kind::S_DECLARE: // DECLARE
      case symbol_kind::S_DEFAULT: // DEFAULT
      case symbol_kind::S_DEFAULTS: // DEFAULTS
      case symbol_kind::S_DATE_P: // DATE_P
      case symbol_kind::S_DEFERRABLE: // DEFERRABLE
      case symbol_kind::S_DEFERRED: // DEFERRED
      case symbol_kind::S_DEFINER: // DEFINER
      case symbol_kind::S_DELETE_P: // DELETE_P
      case symbol_kind::S_DELIMITER: // DELIMITER
      case symbol_kind::S_DELIMITERS: // DELIMITERS
      case symbol_kind::S_DEPENDS: // DEPENDS
      case symbol_kind::S_DEPTH: // DEPTH
      case symbol_kind::S_DESC: // DESC
      case symbol_kind::S_DETACH: // DETACH
      case symbol_kind::S_DICTIONARY: // DICTIONARY
      case symbol_kind::S_DISABLE_P: // DISABLE_P
      case symbol_kind::S_DISCARD: // DISCARD
      case symbol_kind::S_DISTINCT: // DISTINCT
      case symbol_kind::S_DO: // DO
      case symbol_kind::S_DOCUMENT_P: // DOCUMENT_P
      case symbol_kind::S_DOMAIN_P: // DOMAIN_P
      case symbol_kind::S_DOUBLE_P: // DOUBLE_P
      case symbol_kind::S_DROP: // DROP
      case symbol_kind::S_EACH: // EACH
      case symbol_kind::S_ELSE: // ELSE
      case symbol_kind::S_EMPTY_P: // EMPTY_P
      case symbol_kind::S_ENABLE_P: // ENABLE_P
      case symbol_kind::S_ENCODING: // ENCODING
      case symbol_kind::S_ENCRYPTED: // ENCRYPTED
      case symbol_kind::S_END_P: // END_P
      case symbol_kind::S_ENFORCED: // ENFORCED
      case symbol_kind::S_ENUM_P: // ENUM_P
      case symbol_kind::S_ERROR_P: // ERROR_P
      case symbol_kind::S_ESCAPE: // ESCAPE
      case symbol_kind::S_EVENT: // EVENT
      case symbol_kind::S_EXCEPT: // EXCEPT
      case symbol_kind::S_EXCLUDE: // EXCLUDE
      case symbol_kind::S_EXCLUDING: // EXCLUDING
      case symbol_kind::S_EXCLUSIVE: // EXCLUSIVE
      case symbol_kind::S_EXECUTE: // EXECUTE
      case symbol_kind::S_EXISTS: // EXISTS
      case symbol_kind::S_EXPLAIN: // EXPLAIN
      case symbol_kind::S_EXPRESSION: // EXPRESSION
      case symbol_kind::S_EXTENSION: // EXTENSION
      case symbol_kind::S_EXTERNAL: // EXTERNAL
      case symbol_kind::S_EXTRACT: // EXTRACT
      case symbol_kind::S_FALSE_P: // FALSE_P
      case symbol_kind::S_FAMILY: // FAMILY
      case symbol_kind::S_FETCH: // FETCH
      case symbol_kind::S_FILTER: // FILTER
      case symbol_kind::S_FINALIZE: // FINALIZE
      case symbol_kind::S_FIRST_P: // FIRST_P
      case symbol_kind::S_FLOAT_P: // FLOAT_P
      case symbol_kind::S_FOLLOWING: // FOLLOWING
      case symbol_kind::S_FOR: // FOR
      case symbol_kind::S_FORCE: // FORCE
      case symbol_kind::S_FOREIGN: // FOREIGN
      case symbol_kind::S_FORMAT: // FORMAT
      case symbol_kind::S_FORWARD: // FORWARD
      case symbol_kind::S_FREEZE: // FREEZE
      case symbol_kind::S_FROM: // FROM
      case symbol_kind::S_FULL: // FULL
      case symbol_kind::S_FUNCTION: // FUNCTION
      case symbol_kind::S_FUNCTIONS: // FUNCTIONS
      case symbol_kind::S_GENERATED: // GENERATED
      case symbol_kind::S_GLOBAL: // GLOBAL
      case symbol_kind::S_GRANT: // GRANT
      case symbol_kind::S_GRANTED: // GRANTED
      case symbol_kind::S_GREATEST: // GREATEST
      case symbol_kind::S_GROUP_P: // GROUP_P
      case symbol_kind::S_GROUPING: // GROUPING
      case symbol_kind::S_GROUPS: // GROUPS
      case symbol_kind::S_HANDLER: // HANDLER
      case symbol_kind::S_HAVING: // HAVING
      case symbol_kind::S_HEADER_P: // HEADER_P
      case symbol_kind::S_HOLD: // HOLD
      case symbol_kind::S_HOUR_P: // HOUR_P
      case symbol_kind::S_IDENTITY_P: // IDENTITY_P
      case symbol_kind::S_IF_P: // IF_P
      case symbol_kind::S_ILIKE: // ILIKE
      case symbol_kind::S_IMMEDIATE: // IMMEDIATE
      case symbol_kind::S_IMMUTABLE: // IMMUTABLE
      case symbol_kind::S_IMPLICIT_P: // IMPLICIT_P
      case symbol_kind::S_IMPORT_P: // IMPORT_P
      case symbol_kind::S_IN_P: // IN_P
      case symbol_kind::S_INCLUDE: // INCLUDE
      case symbol_kind::S_INCLUDING: // INCLUDING
      case symbol_kind::S_INCREMENT: // INCREMENT
      case symbol_kind::S_INDENT: // INDENT
      case symbol_kind::S_INDEX: // INDEX
      case symbol_kind::S_INDEXES: // INDEXES
      case symbol_kind::S_INHERIT: // INHERIT
      case symbol_kind::S_INHERITS: // INHERITS
      case symbol_kind::S_INITIALLY: // INITIALLY
      case symbol_kind::S_INLINE_P: // INLINE_P
      case symbol_kind::S_INNER_P: // INNER_P
      case symbol_kind::S_INOUT: // INOUT
      case symbol_kind::S_INPUT_P: // INPUT_P
      case symbol_kind::S_INSENSITIVE: // INSENSITIVE
      case symbol_kind::S_INSERT: // INSERT
      case symbol_kind::S_INSTEAD: // INSTEAD
      case symbol_kind::S_INT_P: // INT_P
      case symbol_kind::S_INTEGER: // INTEGER
      case symbol_kind::S_INTERSECT: // INTERSECT
      case symbol_kind::S_INTERVAL: // INTERVAL
      case symbol_kind::S_INTO: // INTO
      case symbol_kind::S_INVOKER: // INVOKER
      case symbol_kind::S_IS: // IS
      case symbol_kind::S_ISNULL: // ISNULL
      case symbol_kind::S_ISOLATION: // ISOLATION
      case symbol_kind::S_JOIN: // JOIN
      case symbol_kind::S_JSON: // JSON
      case symbol_kind::S_JSON_ARRAY: // JSON_ARRAY
      case symbol_kind::S_JSON_ARRAYAGG: // JSON_ARRAYAGG
      case symbol_kind::S_JSON_EXISTS: // JSON_EXISTS
      case symbol_kind::S_JSON_OBJECT: // JSON_OBJECT
      case symbol_kind::S_JSON_OBJECTAGG: // JSON_OBJECTAGG
      case symbol_kind::S_JSON_QUERY: // JSON_QUERY
      case symbol_kind::S_JSON_SCALAR: // JSON_SCALAR
      case symbol_kind::S_JSON_SERIALIZE: // JSON_SERIALIZE
      case symbol_kind::S_JSON_TABLE: // JSON_TABLE
      case symbol_kind::S_JSON_VALUE: // JSON_VALUE
      case symbol_kind::S_KEEP: // KEEP
      case symbol_kind::S_KEY: // KEY
      case symbol_kind::S_KEYS: // KEYS
      case symbol_kind::S_LABEL: // LABEL
      case symbol_kind::S_LANGUAGE: // LANGUAGE
      case symbol_kind::S_LARGE_P: // LARGE_P
      case symbol_kind::S_LAST_P: // LAST_P
      case symbol_kind::S_LATERAL_P: // LATERAL_P
      case symbol_kind::S_LEADING: // LEADING
      case symbol_kind::S_LEAKPROOF: // LEAKPROOF
      case symbol_kind::S_LEAST: // LEAST
      case symbol_kind::S_LEFT: // LEFT
      case symbol_kind::S_LEVEL: // LEVEL
      case symbol_kind::S_LIKE: // LIKE
      case symbol_kind::S_LIMIT: // LIMIT
      case symbol_kind::S_LISTEN: // LISTEN
      case symbol_kind::S_LOAD: // LOAD
      case symbol_kind::S_LOCAL: // LOCAL
      case symbol_kind::S_LOCALTIME: // LOCALTIME
      case symbol_kind::S_LOCALTIMESTAMP: // LOCALTIMESTAMP
      case symbol_kind::S_LOCATION: // LOCATION
      case symbol_kind::S_LOCK_P: // LOCK_P
      case symbol_kind::S_LOCKED: // LOCKED
      case symbol_kind::S_LOGGED: // LOGGED
      case symbol_kind::S_MAPPING: // MAPPING
      case symbol_kind::S_MATCH: // MATCH
      case symbol_kind::S_MATCHED: // MATCHED
      case symbol_kind::S_MATERIALIZED: // MATERIALIZED
      case symbol_kind::S_MAXVALUE: // MAXVALUE
      case symbol_kind::S_MERGE: // MERGE
      case symbol_kind::S_MERGE_ACTION: // MERGE_ACTION
      case symbol_kind::S_METHOD: // METHOD
      case symbol_kind::S_MINUTE_P: // MINUTE_P
      case symbol_kind::S_MINVALUE: // MINVALUE
      case symbol_kind::S_MODE: // MODE
      case symbol_kind::S_MONTH_P: // MONTH_P
      case symbol_kind::S_MOVE: // MOVE
      case symbol_kind::S_NAME_P: // NAME_P
      case symbol_kind::S_NAMES: // NAMES
      case symbol_kind::S_NATIONAL: // NATIONAL
      case symbol_kind::S_NATURAL: // NATURAL
      case symbol_kind::S_NCHAR: // NCHAR
      case symbol_kind::S_NESTED: // NESTED
      case symbol_kind::S_NEW: // NEW
      case symbol_kind::S_NEXT: // NEXT
      case symbol_kind::S_NFC: // NFC
      case symbol_kind::S_NFD: // NFD
      case symbol_kind::S_NFKC: // NFKC
      case symbol_kind::S_NFKD: // NFKD
      case symbol_kind::S_NO: // NO
      case symbol_kind::S_NONE: // NONE
      case symbol_kind::S_NORMALIZE: // NORMALIZE
      case symbol_kind::S_NORMALIZED: // NORMALIZED
      case symbol_kind::S_NOT: // NOT
      case symbol_kind::S_NOTHING: // NOTHING
      case symbol_kind::S_NOTIFY: // NOTIFY
      case symbol_kind::S_NOTNULL: // NOTNULL
      case symbol_kind::S_NOWAIT: // NOWAIT
      case symbol_kind::S_NULL_P: // NULL_P
      case symbol_kind::S_NULLIF: // NULLIF
      case symbol_kind::S_NULLS_P: // NULLS_P
      case symbol_kind::S_NUMERIC: // NUMERIC
      case symbol_kind::S_OBJECT_P: // OBJECT_P
      case symbol_kind::S_OBJECTS_P: // OBJECTS_P
      case symbol_kind::S_OF: // OF
      case symbol_kind::S_OFF: // OFF
      case symbol_kind::S_OFFSET: // OFFSET
      case symbol_kind::S_OIDS: // OIDS
      case symbol_kind::S_OLD: // OLD
      case symbol_kind::S_OMIT: // OMIT
      case symbol_kind::S_ON: // ON
      case symbol_kind::S_ONLY: // ONLY
      case symbol_kind::S_OPERATOR: // OPERATOR
      case symbol_kind::S_OPTION: // OPTION
      case symbol_kind::S_OPTIONS: // OPTIONS
      case symbol_kind::S_OR: // OR
      case symbol_kind::S_ORDER: // ORDER
      case symbol_kind::S_ORDINALITY: // ORDINALITY
      case symbol_kind::S_OTHERS: // OTHERS
      case symbol_kind::S_OUT_P: // OUT_P
      case symbol_kind::S_OUTER_P: // OUTER_P
      case symbol_kind::S_OVER: // OVER
      case symbol_kind::S_OVERLAPS: // OVERLAPS
      case symbol_kind::S_OVERLAY: // OVERLAY
      case symbol_kind::S_OVERRIDING: // OVERRIDING
      case symbol_kind::S_OWNED: // OWNED
      case symbol_kind::S_OWNER: // OWNER
      case symbol_kind::S_PARALLEL: // PARALLEL
      case symbol_kind::S_PARAMETER: // PARAMETER
      case symbol_kind::S_PARSER: // PARSER
      case symbol_kind::S_PARTIAL: // PARTIAL
      case symbol_kind::S_PARTITION: // PARTITION
      case symbol_kind::S_PASSING: // PASSING
      case symbol_kind::S_PASSWORD: // PASSWORD
      case symbol_kind::S_PATH: // PATH
      case symbol_kind::S_PERIOD: // PERIOD
      case symbol_kind::S_PLACING: // PLACING
      case symbol_kind::S_PLAN: // PLAN
      case symbol_kind::S_PLANS: // PLANS
      case symbol_kind::S_POLICY: // POLICY
      case symbol_kind::S_POSITION: // POSITION
      case symbol_kind::S_PRECEDING: // PRECEDING
      case symbol_kind::S_PRECISION: // PRECISION
      case symbol_kind::S_PRESERVE: // PRESERVE
      case symbol_kind::S_PREPARE: // PREPARE
      case symbol_kind::S_PREPARED: // PREPARED
      case symbol_kind::S_PRIMARY: // PRIMARY
      case symbol_kind::S_PRIOR: // PRIOR
      case symbol_kind::S_PRIVILEGES: // PRIVILEGES
      case symbol_kind::S_PROCEDURAL: // PROCEDURAL
      case symbol_kind::S_PROCEDURE: // PROCEDURE
      case symbol_kind::S_PROCEDURES: // PROCEDURES
      case symbol_kind::S_PROGRAM: // PROGRAM
      case symbol_kind::S_PUBLICATION: // PUBLICATION
      case symbol_kind::S_QUOTES: // QUOTES
      case symbol_kind::S_EXTEND: // EXTEND
      case symbol_kind::S_RANGE: // RANGE
      case symbol_kind::S_READ: // READ
      case symbol_kind::S_REAL: // REAL
      case symbol_kind::S_REASSIGN: // REASSIGN
      case symbol_kind::S_RECURSIVE: // RECURSIVE
      case symbol_kind::S_REF_P: // REF_P
      case symbol_kind::S_REFERENCES: // REFERENCES
      case symbol_kind::S_REFERENCING: // REFERENCING
      case symbol_kind::S_REFRESH: // REFRESH
      case symbol_kind::S_REINDEX: // REINDEX
      case symbol_kind::S_RELATIVE_P: // RELATIVE_P
      case symbol_kind::S_RELEASE: // RELEASE
      case symbol_kind::S_RENAME: // RENAME
      case symbol_kind::S_REPEATABLE: // REPEATABLE
      case symbol_kind::S_REPLACE: // REPLACE
      case symbol_kind::S_REPLICA: // REPLICA
      case symbol_kind::S_RESET: // RESET
      case symbol_kind::S_RESTART: // RESTART
      case symbol_kind::S_RESTRICT: // RESTRICT
      case symbol_kind::S_RETURN: // RETURN
      case symbol_kind::S_RETURNING: // RETURNING
      case symbol_kind::S_RETURNS: // RETURNS
      case symbol_kind::S_REVOKE: // REVOKE
      case symbol_kind::S_RIGHT: // RIGHT
      case symbol_kind::S_ROLE: // ROLE
      case symbol_kind::S_ROLLBACK: // ROLLBACK
      case symbol_kind::S_ROLLUP: // ROLLUP
      case symbol_kind::S_ROUTINE: // ROUTINE
      case symbol_kind::S_ROUTINES: // ROUTINES
      case symbol_kind::S_ROW: // ROW
      case symbol_kind::S_ROWS: // ROWS
      case symbol_kind::S_RULE: // RULE
      case symbol_kind::S_SAVEPOINT: // SAVEPOINT
      case symbol_kind::S_SCALAR: // SCALAR
      case symbol_kind::S_SCHEMA: // SCHEMA
      case symbol_kind::S_SCHEMAS: // SCHEMAS
      case symbol_kind::S_SCROLL: // SCROLL
      case symbol_kind::S_SEARCH: // SEARCH
      case symbol_kind::S_SECOND_P: // SECOND_P
      case symbol_kind::S_SECURITY: // SECURITY
      case symbol_kind::S_SELECT: // SELECT
      case symbol_kind::S_SEQUENCE: // SEQUENCE
      case symbol_kind::S_SEQUENCES: // SEQUENCES
      case symbol_kind::S_SERIALIZABLE: // SERIALIZABLE
      case symbol_kind::S_SERVER: // SERVER
      case symbol_kind::S_SESSION: // SESSION
      case symbol_kind::S_SESSION_USER: // SESSION_USER
      case symbol_kind::S_SET: // SET
      case symbol_kind::S_SETS: // SETS
      case symbol_kind::S_SETOF: // SETOF
      case symbol_kind::S_SHARE: // SHARE
      case symbol_kind::S_SHOW: // SHOW
      case symbol_kind::S_SIMILAR: // SIMILAR
      case symbol_kind::S_SIMPLE: // SIMPLE
      case symbol_kind::S_SKIP: // SKIP
      case symbol_kind::S_SMALLINT: // SMALLINT
      case symbol_kind::S_SNAPSHOT: // SNAPSHOT
      case symbol_kind::S_SOME: // SOME
      case symbol_kind::S_SOURCE: // SOURCE
      case symbol_kind::S_SQL_P: // SQL_P
      case symbol_kind::S_STABLE: // STABLE
      case symbol_kind::S_STANDALONE_P: // STANDALONE_P
      case symbol_kind::S_START: // START
      case symbol_kind::S_STATEMENT: // STATEMENT
      case symbol_kind::S_STATISTICS: // STATISTICS
      case symbol_kind::S_STDIN: // STDIN
      case symbol_kind::S_STDOUT: // STDOUT
      case symbol_kind::S_STORAGE: // STORAGE
      case symbol_kind::S_STORED: // STORED
      case symbol_kind::S_STRICT_P: // STRICT_P
      case symbol_kind::S_STRING_P: // STRING_P
      case symbol_kind::S_STRIP_P: // STRIP_P
      case symbol_kind::S_SUBSCRIPTION: // SUBSCRIPTION
      case symbol_kind::S_SUBSTRING: // SUBSTRING
      case symbol_kind::S_SUPPORT: // SUPPORT
      case symbol_kind::S_SYMMETRIC: // SYMMETRIC
      case symbol_kind::S_SYSID: // SYSID
      case symbol_kind::S_SYSTEM_P: // SYSTEM_P
      case symbol_kind::S_SYSTEM_USER: // SYSTEM_USER
      case symbol_kind::S_TABLE: // TABLE
      case symbol_kind::S_TABLES: // TABLES
      case symbol_kind::S_TABLESAMPLE: // TABLESAMPLE
      case symbol_kind::S_TABLESPACE: // TABLESPACE
      case symbol_kind::S_TARGET: // TARGET
      case symbol_kind::S_TEMP: // TEMP
      case symbol_kind::S_TEMPLATE: // TEMPLATE
      case symbol_kind::S_TEMPORARY: // TEMPORARY
      case symbol_kind::S_TEXT_P: // TEXT_P
      case symbol_kind::S_THEN: // THEN
      case symbol_kind::S_TIES: // TIES
      case symbol_kind::S_TIME: // TIME
      case symbol_kind::S_TIMESTAMP: // TIMESTAMP
      case symbol_kind::S_TO: // TO
      case symbol_kind::S_TRAILING: // TRAILING
      case symbol_kind::S_TRANSACTION: // TRANSACTION
      case symbol_kind::S_TRANSFORM: // TRANSFORM
      case symbol_kind::S_TREAT: // TREAT
      case symbol_kind::S_TRIGGER: // TRIGGER
      case symbol_kind::S_TRIM: // TRIM
      case symbol_kind::S_TRUE_P: // TRUE_P
      case symbol_kind::S_TRUNCATE: // TRUNCATE
      case symbol_kind::S_TRUSTED: // TRUSTED
      case symbol_kind::S_TYPE_P: // TYPE_P
      case symbol_kind::S_TYPES_P: // TYPES_P
      case symbol_kind::S_UESCAPE: // UESCAPE
      case symbol_kind::S_UNBOUNDED: // UNBOUNDED
      case symbol_kind::S_UNCONDITIONAL: // UNCONDITIONAL
      case symbol_kind::S_UNCOMMITTED: // UNCOMMITTED
      case symbol_kind::S_UNENCRYPTED: // UNENCRYPTED
      case symbol_kind::S_UNION: // UNION
      case symbol_kind::S_UNIQUE: // UNIQUE
      case symbol_kind::S_UNKNOWN: // UNKNOWN
      case symbol_kind::S_UNLISTEN: // UNLISTEN
      case symbol_kind::S_UNLOGGED: // UNLOGGED
      case symbol_kind::S_UNTIL: // UNTIL
      case symbol_kind::S_UPDATE: // UPDATE
      case symbol_kind::S_USER: // USER
      case symbol_kind::S_USING: // USING
      case symbol_kind::S_VACUUM: // VACUUM
      case symbol_kind::S_VALID: // VALID
      case symbol_kind::S_VALIDATE: // VALIDATE
      case symbol_kind::S_VALIDATOR: // VALIDATOR
      case symbol_kind::S_VALUE_P: // VALUE_P
      case symbol_kind::S_VALUES: // VALUES
      case symbol_kind::S_VARCHAR: // VARCHAR
      case symbol_kind::S_VARIADIC: // VARIADIC
      case symbol_kind::S_VARYING: // VARYING
      case symbol_kind::S_VERBOSE: // VERBOSE
      case symbol_kind::S_VERSION_P: // VERSION_P
      case symbol_kind::S_VIEW: // VIEW
      case symbol_kind::S_VIEWS: // VIEWS
      case symbol_kind::S_VIRTUAL: // VIRTUAL
      case symbol_kind::S_VOLATILE: // VOLATILE
      case symbol_kind::S_WHEN: // WHEN
      case symbol_kind::S_WHERE: // WHERE
      case symbol_kind::S_WHITESPACE_P: // WHITESPACE_P
      case symbol_kind::S_WINDOW: // WINDOW
      case symbol_kind::S_WITH: // WITH
      case symbol_kind::S_WITHIN: // WITHIN
      case symbol_kind::S_WITHOUT: // WITHOUT
      case symbol_kind::S_WORK: // WORK
      case symbol_kind::S_WRAPPER: // WRAPPER
      case symbol_kind::S_WRITE: // WRITE
      case symbol_kind::S_XML_P: // XML_P
      case symbol_kind::S_XMLATTRIBUTES: // XMLATTRIBUTES
      case symbol_kind::S_XMLCONCAT: // XMLCONCAT
      case symbol_kind::S_XMLELEMENT: // XMLELEMENT
      case symbol_kind::S_XMLEXISTS: // XMLEXISTS
      case symbol_kind::S_XMLFOREST: // XMLFOREST
      case symbol_kind::S_XMLNAMESPACES: // XMLNAMESPACES
      case symbol_kind::S_XMLPARSE: // XMLPARSE
      case symbol_kind::S_XMLPI: // XMLPI
      case symbol_kind::S_XMLROOT: // XMLROOT
      case symbol_kind::S_XMLSERIALIZE: // XMLSERIALIZE
      case symbol_kind::S_XMLTABLE: // XMLTABLE
      case symbol_kind::S_YEAR_P: // YEAR_P
      case symbol_kind::S_YES_P: // YES_P
      case symbol_kind::S_ZONE: // ZONE
      case symbol_kind::S_copy_file_name: // copy_file_name
      case symbol_kind::S_copy_delimiter: // copy_delimiter
      case symbol_kind::S_var_name: // var_name
      case symbol_kind::S_NonReservedWord: // NonReservedWord
      case symbol_kind::S_relation_expr: // relation_expr
      case symbol_kind::S_any_operator: // any_operator
      case symbol_kind::S_qual_Op: // qual_Op
      case symbol_kind::S_all_Op: // all_Op
      case symbol_kind::S_ColId: // ColId
      case symbol_kind::S_type_function_name: // type_function_name
      case symbol_kind::S_type_func_name_keyword: // type_func_name_keyword
      case symbol_kind::S_ColLabel: // ColLabel
      case symbol_kind::S_BareColLabel: // BareColLabel
      case symbol_kind::S_reserved_keyword: // reserved_keyword
      case symbol_kind::S_unreserved_keyword: // unreserved_keyword
      case symbol_kind::S_col_name_keyword: // col_name_keyword
      case symbol_kind::S_qualified_name: // qualified_name
      case symbol_kind::S_name: // name
      case symbol_kind::S_attr_name: // attr_name
      case symbol_kind::S_func_name: // func_name
      case symbol_kind::S_insert_target: // insert_target
      case symbol_kind::S_insert_column_item: // insert_column_item
        value.YY_MOVE_OR_COPY< std::string > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_in_expr: // in_expr
        value.YY_MOVE_OR_COPY< std::variant<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>, std::shared_ptr<lingodb::ast::SubqueryExpression>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_when_clause_list: // when_clause_list
        value.YY_MOVE_OR_COPY< std::vector<lingodb::ast::CaseExpression::CaseCheck> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_copy_options: // copy_options
      case symbol_kind::S_copy_opt_list: // copy_opt_list
        value.YY_MOVE_OR_COPY< std::vector<std::pair<std::string, std::string>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_stmtmulti: // stmtmulti
        value.YY_MOVE_OR_COPY< std::vector<std::shared_ptr<lingodb::ast::AstNode>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_ColQualList: // ColQualList
        value.YY_MOVE_OR_COPY< std::vector<std::shared_ptr<lingodb::ast::Constraint>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_func_expr_list: // func_expr_list
        value.YY_MOVE_OR_COPY< std::vector<std::shared_ptr<lingodb::ast::FunctionExpression>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_sortby_list: // sortby_list
        value.YY_MOVE_OR_COPY< std::vector<std::shared_ptr<lingodb::ast::OrderByElement>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_var_list: // var_list
      case symbol_kind::S_group_by_list: // group_by_list
      case symbol_kind::S_group_by_list_with_alias: // group_by_list_with_alias
      case symbol_kind::S_rollup_clause: // rollup_clause
      case symbol_kind::S_columnref_list: // columnref_list
      case symbol_kind::S_func_arg_list_opt: // func_arg_list_opt
      case symbol_kind::S_func_arg_list: // func_arg_list
      case symbol_kind::S_expr_list: // expr_list
      case symbol_kind::S_expr_list_with_alias: // expr_list_with_alias
      case symbol_kind::S_extract_list: // extract_list
      case symbol_kind::S_substr_list: // substr_list
      case symbol_kind::S_target_list: // target_list
      case symbol_kind::S_opt_partition_clause: // opt_partition_clause
        value.YY_MOVE_OR_COPY< std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_OptTableElementList: // OptTableElementList
      case symbol_kind::S_TableElementList: // TableElementList
        value.YY_MOVE_OR_COPY< std::vector<std::shared_ptr<lingodb::ast::TableElement>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_type_modifiers: // opt_type_modifiers
      case symbol_kind::S_type_modifiers: // type_modifiers
        value.YY_MOVE_OR_COPY< std::vector<std::shared_ptr<lingodb::ast::Value>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_name_list: // opt_name_list
      case symbol_kind::S_name_list: // name_list
      case symbol_kind::S_insert_column_list: // insert_column_list
        value.YY_MOVE_OR_COPY< std::vector<std::string> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_INTEGER_VALUE: // "integer_value"
        value.YY_MOVE_OR_COPY< uint64_t > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

#if 201103L <= YY_CPLUSPLUS
    // that is emptied.
    that.state = empty_state;
#endif
  }

  parser::stack_symbol_type::stack_symbol_type (state_type s, YY_MOVE_REF (symbol_type) that)
    : super_type (s, YY_MOVE (that.location))
  {
    switch (that.kind ())
    {
      case symbol_kind::S_distinct_clause: // distinct_clause
      case symbol_kind::S_set_quantifier: // set_quantifier
      case symbol_kind::S_opt_asymmetric: // opt_asymmetric
      case symbol_kind::S_OptTemp: // OptTemp
      case symbol_kind::S_opt_varying: // opt_varying
        value.move< bool > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_ICONST: // ICONST
        value.move< int > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_when_clause: // when_clause
        value.move< lingodb::ast::CaseExpression::CaseCheck > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_basicComparisonType: // basicComparisonType
        value.move< lingodb::ast::ExpressionType > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_join_type: // join_type
        value.move< lingodb::ast::JoinType > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_Type: // Type
      case symbol_kind::S_SimpleType: // SimpleType
      case symbol_kind::S_ConstTypename: // ConstTypename
      case symbol_kind::S_Numeric_with_opt_lenghth: // Numeric_with_opt_lenghth
      case symbol_kind::S_Numeric: // Numeric
      case symbol_kind::S_Character: // Character
      case symbol_kind::S_ConstCharacter: // ConstCharacter
      case symbol_kind::S_CharacterWithLength: // CharacterWithLength
      case symbol_kind::S_CharacterWithoutLength: // CharacterWithoutLength
      case symbol_kind::S_character: // character
      case symbol_kind::S_ConstDatetime: // ConstDatetime
      case symbol_kind::S_ConstInterval: // ConstInterval
      case symbol_kind::S_Typename: // Typename
        value.move< lingodb::ast::LogicalTypeWithMods > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_nulls_order: // opt_nulls_order
        value.move< lingodb::ast::OrderByNullType > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_asc_desc: // opt_asc_desc
        value.move< lingodb::ast::OrderType > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_sub_type: // sub_type
        value.move< lingodb::ast::SubqueryType > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_join_qual: // join_qual
        value.move< lingodb::ast::jointCondOrUsingCols > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_sort_clause: // opt_sort_clause
        value.move< std::optional<std::shared_ptr<lingodb::ast::OrderByModifier>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_case_arg: // case_arg
        value.move< std::optional<std::shared_ptr<lingodb::ast::ParsedExpression>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_select_limit: // opt_select_limit
        value.move< std::optional<std::shared_ptr<lingodb::ast::ResultModifier>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_interval: // opt_interval
        value.move< std::optional<std::string> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_copy_opt_item: // copy_opt_item
        value.move< std::pair<std::string, std::string> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_alias_clause: // alias_clause
      case symbol_kind::S_opt_alias_clause: // opt_alias_clause
        value.move< std::pair<std::string, std::vector<std::string>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_extract_arg: // extract_arg
        value.move< std::shared_ptr<ast::ConstantExpression> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_CopyStmt: // CopyStmt
        value.move< std::shared_ptr<ast::CopyNode> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_VariableSetStmt: // VariableSetStmt
      case symbol_kind::S_set_rest: // set_rest
      case symbol_kind::S_generic_set: // generic_set
      case symbol_kind::S_set_rest_more: // set_rest_more
        value.move< std::shared_ptr<ast::SetVariableStatement> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_agg_expr: // agg_expr
        value.move< std::shared_ptr<lingodb::ast::AggregationNode> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_toplevel_stmt: // toplevel_stmt
      case symbol_kind::S_stmt: // stmt
        value.move< std::shared_ptr<lingodb::ast::AstNode> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_and_a_expr: // and_a_expr
      case symbol_kind::S_or_a_expr: // or_a_expr
        value.move< std::shared_ptr<lingodb::ast::ConjunctionExpression> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_ColConstraint: // ColConstraint
      case symbol_kind::S_ColConstraintElem: // ColConstraintElem
      case symbol_kind::S_ConstraintElem: // ConstraintElem
        value.move< std::shared_ptr<lingodb::ast::Constraint> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_CreateStmt: // CreateStmt
        value.move< std::shared_ptr<lingodb::ast::CreateNode> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_from_list: // from_list
        value.move< std::shared_ptr<lingodb::ast::CrossProductRef> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_values_clause: // values_clause
        value.move< std::shared_ptr<lingodb::ast::ExpressionListRef> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_func_application: // func_application
      case symbol_kind::S_func_expr: // func_expr
      case symbol_kind::S_func_expr_common_subexpr: // func_expr_common_subexpr
        value.move< std::shared_ptr<lingodb::ast::FunctionExpression> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_group_clause: // group_clause
      case symbol_kind::S_group_clause_with_alias: // group_clause_with_alias
        value.move< std::shared_ptr<lingodb::ast::GroupByNode> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_InsertStmt: // InsertStmt
      case symbol_kind::S_insert_rest: // insert_rest
        value.move< std::shared_ptr<lingodb::ast::InsertNode> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_select_limit: // select_limit
      case symbol_kind::S_limit_clause: // limit_clause
        value.move< std::shared_ptr<lingodb::ast::LimitModifier> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_sortby: // sortby
        value.move< std::shared_ptr<lingodb::ast::OrderByElement> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_sort_clause: // sort_clause
        value.move< std::shared_ptr<lingodb::ast::OrderByModifier> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_var_value: // var_value
      case symbol_kind::S_opt_boolean_or_string: // opt_boolean_or_string
      case symbol_kind::S_NonReservedWord_or_Sconst: // NonReservedWord_or_Sconst
      case symbol_kind::S_group_by_item: // group_by_item
      case symbol_kind::S_group_by_item_with_alias: // group_by_item_with_alias
      case symbol_kind::S_having_clause: // having_clause
      case symbol_kind::S_offset_clause: // offset_clause
      case symbol_kind::S_select_limit_value: // select_limit_value
      case symbol_kind::S_select_offset_value: // select_offset_value
      case symbol_kind::S_where_clause: // where_clause
      case symbol_kind::S_a_expr: // a_expr
      case symbol_kind::S_b_expr: // b_expr
      case symbol_kind::S_c_expr: // c_expr
      case symbol_kind::S_case_expr: // case_expr
      case symbol_kind::S_case_default: // case_default
      case symbol_kind::S_columnref: // columnref
      case symbol_kind::S_func_arg_expr: // func_arg_expr
      case symbol_kind::S_cast_expr: // cast_expr
      case symbol_kind::S_indirection: // indirection
      case symbol_kind::S_indirection_el: // indirection_el
      case symbol_kind::S_target_el: // target_el
      case symbol_kind::S_NumericOnly: // NumericOnly
      case symbol_kind::S_AexprConst: // AexprConst
      case symbol_kind::S_Iconst: // Iconst
      case symbol_kind::S_SignedIconst: // SignedIconst
      case symbol_kind::S_Fconst: // Fconst
      case symbol_kind::S_Sconst: // Sconst
      case symbol_kind::S_Bconst: // Bconst
        value.move< std::shared_ptr<lingodb::ast::ParsedExpression> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_pipe_start: // pipe_start
      case symbol_kind::S_pipe_operator: // pipe_operator
        value.move< std::shared_ptr<lingodb::ast::PipeOperator> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_select_with_parens: // select_with_parens
      case symbol_kind::S_select_no_parens: // select_no_parens
      case symbol_kind::S_select_clause: // select_clause
      case symbol_kind::S_simple_select: // simple_select
      case symbol_kind::S_with_clause: // with_clause
      case symbol_kind::S_cte_list: // cte_list
      case symbol_kind::S_common_table_expr: // common_table_expr
        value.move< std::shared_ptr<lingodb::ast::QueryNode> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_set_list: // set_list
        value.move< std::shared_ptr<lingodb::ast::SetColumnExpression> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_TableElement: // TableElement
      case symbol_kind::S_TableConstraint: // TableConstraint
      case symbol_kind::S_columnElement: // columnElement
        value.move< std::shared_ptr<lingodb::ast::TableElement> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_SelectStmt: // SelectStmt
      case symbol_kind::S_PipeSQLStmt: // PipeSQLStmt
      case symbol_kind::S_classic_select_and_pipe_sql_with_parens: // classic_select_and_pipe_sql_with_parens
      case symbol_kind::S_pipe_sql_with_parens: // pipe_sql_with_parens
      case symbol_kind::S_pipe_sql_no_parens: // pipe_sql_no_parens
      case symbol_kind::S_pipe_or_select_clause: // pipe_or_select_clause
      case symbol_kind::S_PreparableStmt: // PreparableStmt
        value.move< std::shared_ptr<lingodb::ast::TableProducer> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_from_clause: // opt_from_clause
      case symbol_kind::S_from_clause: // from_clause
      case symbol_kind::S_table_ref: // table_ref
      case symbol_kind::S_joined_table: // joined_table
        value.move< std::shared_ptr<lingodb::ast::TableRef> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_target_list: // opt_target_list
        value.move< std::shared_ptr<lingodb::ast::TargetList> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_type_modifier: // type_modifier
        value.move< std::shared_ptr<lingodb::ast::Value> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_window_func_expr: // window_func_expr
      case symbol_kind::S_over_clause: // over_clause
      case symbol_kind::S_window_specification: // window_specification
        value.move< std::shared_ptr<lingodb::ast::WindowExpression> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_frame_clause: // opt_frame_clause
      case symbol_kind::S_frame_extent: // frame_extent
      case symbol_kind::S_frame_bound: // frame_bound
        value.move< std::shared_ptr<lingodb::ast::WindowFrame> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_FCONST: // FCONST
      case symbol_kind::S_IDENT: // IDENT
      case symbol_kind::S_IDENTIFIER: // "identifier"
      case symbol_kind::S_STRING_VALUE: // STRING_VALUE
      case symbol_kind::S_BIT_VALUE: // "bit_string"
      case symbol_kind::S_HEX_VALUE: // "hex_string"
      case symbol_kind::S_NATIONAL_VALUE: // "nat_string"
      case symbol_kind::S_PERCENT: // "%"
      case symbol_kind::S_PLUS: // "+"
      case symbol_kind::S_SLASH: // "/"
      case symbol_kind::S_STAR: // "*"
      case symbol_kind::S_MINUS: // "-"
      case symbol_kind::S_EQUAL: // "="
      case symbol_kind::S_NOT_EQUAL: // "<>"
      case symbol_kind::S_LESS_EQUAL: // "<="
      case symbol_kind::S_LESS: // "<"
      case symbol_kind::S_GREATER_EQUAL: // ">="
      case symbol_kind::S_GREATER: // ">"
      case symbol_kind::S_UIDENT: // UIDENT
      case symbol_kind::S_SCONST: // SCONST
      case symbol_kind::S_USCONST: // USCONST
      case symbol_kind::S_BCONST: // BCONST
      case symbol_kind::S_XCONST: // XCONST
      case symbol_kind::S_Op: // Op
      case symbol_kind::S_TYPECAST: // TYPECAST
      case symbol_kind::S_ABORT_P: // ABORT_P
      case symbol_kind::S_ABSENT: // ABSENT
      case symbol_kind::S_ABSOLUTE_P: // ABSOLUTE_P
      case symbol_kind::S_ACCESS: // ACCESS
      case symbol_kind::S_ACTION: // ACTION
      case symbol_kind::S_ADD_P: // ADD_P
      case symbol_kind::S_ADMIN: // ADMIN
      case symbol_kind::S_AFTER: // AFTER
      case symbol_kind::S_AGGREGATE: // AGGREGATE
      case symbol_kind::S_ALL: // ALL
      case symbol_kind::S_ALSO: // ALSO
      case symbol_kind::S_ALTER: // ALTER
      case symbol_kind::S_ALWAYS: // ALWAYS
      case symbol_kind::S_ANALYSE: // ANALYSE
      case symbol_kind::S_ANALYZE: // ANALYZE
      case symbol_kind::S_AND: // AND
      case symbol_kind::S_ANY: // ANY
      case symbol_kind::S_ARRAY: // ARRAY
      case symbol_kind::S_AS: // AS
      case symbol_kind::S_ASC: // ASC
      case symbol_kind::S_ASENSITIVE: // ASENSITIVE
      case symbol_kind::S_ASSERTION: // ASSERTION
      case symbol_kind::S_ASSIGNMENT: // ASSIGNMENT
      case symbol_kind::S_ASYMMETRIC: // ASYMMETRIC
      case symbol_kind::S_ATOMIC: // ATOMIC
      case symbol_kind::S_AT: // AT
      case symbol_kind::S_ATTACH: // ATTACH
      case symbol_kind::S_ATTRIBUTE: // ATTRIBUTE
      case symbol_kind::S_AUTHORIZATION: // AUTHORIZATION
      case symbol_kind::S_BACKWARD: // BACKWARD
      case symbol_kind::S_BEFORE: // BEFORE
      case symbol_kind::S_BEGIN_P: // BEGIN_P
      case symbol_kind::S_BETWEEN: // BETWEEN
      case symbol_kind::S_BIGINT: // BIGINT
      case symbol_kind::S_BINARY: // BINARY
      case symbol_kind::S_BIT: // BIT
      case symbol_kind::S_BOOLEAN_P: // BOOLEAN_P
      case symbol_kind::S_BOTH: // BOTH
      case symbol_kind::S_BREADTH: // BREADTH
      case symbol_kind::S_BY: // BY
      case symbol_kind::S_CACHE: // CACHE
      case symbol_kind::S_CALL: // CALL
      case symbol_kind::S_CALLED: // CALLED
      case symbol_kind::S_CASCADE: // CASCADE
      case symbol_kind::S_CASCADED: // CASCADED
      case symbol_kind::S_CASE: // CASE
      case symbol_kind::S_CAST: // CAST
      case symbol_kind::S_CATALOG_P: // CATALOG_P
      case symbol_kind::S_CHAIN: // CHAIN
      case symbol_kind::S_CHAR_P: // CHAR_P
      case symbol_kind::S_CHARACTER: // CHARACTER
      case symbol_kind::S_CHARACTERISTICS: // CHARACTERISTICS
      case symbol_kind::S_CHECK: // CHECK
      case symbol_kind::S_CHECKPOINT: // CHECKPOINT
      case symbol_kind::S_CLASS: // CLASS
      case symbol_kind::S_CLOSE: // CLOSE
      case symbol_kind::S_CLUSTER: // CLUSTER
      case symbol_kind::S_COALESCE: // COALESCE
      case symbol_kind::S_COLLATE: // COLLATE
      case symbol_kind::S_COLLATION: // COLLATION
      case symbol_kind::S_COLUMN: // COLUMN
      case symbol_kind::S_COLUMNS: // COLUMNS
      case symbol_kind::S_COMMENT: // COMMENT
      case symbol_kind::S_COMMENTS: // COMMENTS
      case symbol_kind::S_COMMIT: // COMMIT
      case symbol_kind::S_COMMITTED: // COMMITTED
      case symbol_kind::S_COMPRESSION: // COMPRESSION
      case symbol_kind::S_CONCURRENTLY: // CONCURRENTLY
      case symbol_kind::S_CONDITIONAL: // CONDITIONAL
      case symbol_kind::S_CONFIGURATION: // CONFIGURATION
      case symbol_kind::S_CONFLICT: // CONFLICT
      case symbol_kind::S_CONNECTION: // CONNECTION
      case symbol_kind::S_CONSTRAINT: // CONSTRAINT
      case symbol_kind::S_CONSTRAINTS: // CONSTRAINTS
      case symbol_kind::S_CONTENT_P: // CONTENT_P
      case symbol_kind::S_CONTINUE_P: // CONTINUE_P
      case symbol_kind::S_CONVERSION_P: // CONVERSION_P
      case symbol_kind::S_COPY: // COPY
      case symbol_kind::S_COST: // COST
      case symbol_kind::S_CREATE: // CREATE
      case symbol_kind::S_CROSS: // CROSS
      case symbol_kind::S_CSV: // CSV
      case symbol_kind::S_CUBE: // CUBE
      case symbol_kind::S_CURRENT_P: // CURRENT_P
      case symbol_kind::S_CURRENT_CATALOG: // CURRENT_CATALOG
      case symbol_kind::S_CURRENT_DATE: // CURRENT_DATE
      case symbol_kind::S_CURRENT_ROLE: // CURRENT_ROLE
      case symbol_kind::S_CURRENT_SCHEMA: // CURRENT_SCHEMA
      case symbol_kind::S_CURRENT_TIME: // CURRENT_TIME
      case symbol_kind::S_CURRENT_TIMESTAMP: // CURRENT_TIMESTAMP
      case symbol_kind::S_CURRENT_USER: // CURRENT_USER
      case symbol_kind::S_CURSOR: // CURSOR
      case symbol_kind::S_CYCLE: // CYCLE
      case symbol_kind::S_DATA_P: // DATA_P
      case symbol_kind::S_DATABASE: // DATABASE
      case symbol_kind::S_DAY_P: // DAY_P
      case symbol_kind::S_DEALLOCATE: // DEALLOCATE
      case symbol_kind::S_DEC: // DEC
      case symbol_kind::S_DECIMAL_P: // DECIMAL_P
      case symbol_kind::S_DECLARE: // DECLARE
      case symbol_kind::S_DEFAULT: // DEFAULT
      case symbol_kind::S_DEFAULTS: // DEFAULTS
      case symbol_kind::S_DATE_P: // DATE_P
      case symbol_kind::S_DEFERRABLE: // DEFERRABLE
      case symbol_kind::S_DEFERRED: // DEFERRED
      case symbol_kind::S_DEFINER: // DEFINER
      case symbol_kind::S_DELETE_P: // DELETE_P
      case symbol_kind::S_DELIMITER: // DELIMITER
      case symbol_kind::S_DELIMITERS: // DELIMITERS
      case symbol_kind::S_DEPENDS: // DEPENDS
      case symbol_kind::S_DEPTH: // DEPTH
      case symbol_kind::S_DESC: // DESC
      case symbol_kind::S_DETACH: // DETACH
      case symbol_kind::S_DICTIONARY: // DICTIONARY
      case symbol_kind::S_DISABLE_P: // DISABLE_P
      case symbol_kind::S_DISCARD: // DISCARD
      case symbol_kind::S_DISTINCT: // DISTINCT
      case symbol_kind::S_DO: // DO
      case symbol_kind::S_DOCUMENT_P: // DOCUMENT_P
      case symbol_kind::S_DOMAIN_P: // DOMAIN_P
      case symbol_kind::S_DOUBLE_P: // DOUBLE_P
      case symbol_kind::S_DROP: // DROP
      case symbol_kind::S_EACH: // EACH
      case symbol_kind::S_ELSE: // ELSE
      case symbol_kind::S_EMPTY_P: // EMPTY_P
      case symbol_kind::S_ENABLE_P: // ENABLE_P
      case symbol_kind::S_ENCODING: // ENCODING
      case symbol_kind::S_ENCRYPTED: // ENCRYPTED
      case symbol_kind::S_END_P: // END_P
      case symbol_kind::S_ENFORCED: // ENFORCED
      case symbol_kind::S_ENUM_P: // ENUM_P
      case symbol_kind::S_ERROR_P: // ERROR_P
      case symbol_kind::S_ESCAPE: // ESCAPE
      case symbol_kind::S_EVENT: // EVENT
      case symbol_kind::S_EXCEPT: // EXCEPT
      case symbol_kind::S_EXCLUDE: // EXCLUDE
      case symbol_kind::S_EXCLUDING: // EXCLUDING
      case symbol_kind::S_EXCLUSIVE: // EXCLUSIVE
      case symbol_kind::S_EXECUTE: // EXECUTE
      case symbol_kind::S_EXISTS: // EXISTS
      case symbol_kind::S_EXPLAIN: // EXPLAIN
      case symbol_kind::S_EXPRESSION: // EXPRESSION
      case symbol_kind::S_EXTENSION: // EXTENSION
      case symbol_kind::S_EXTERNAL: // EXTERNAL
      case symbol_kind::S_EXTRACT: // EXTRACT
      case symbol_kind::S_FALSE_P: // FALSE_P
      case symbol_kind::S_FAMILY: // FAMILY
      case symbol_kind::S_FETCH: // FETCH
      case symbol_kind::S_FILTER: // FILTER
      case symbol_kind::S_FINALIZE: // FINALIZE
      case symbol_kind::S_FIRST_P: // FIRST_P
      case symbol_kind::S_FLOAT_P: // FLOAT_P
      case symbol_kind::S_FOLLOWING: // FOLLOWING
      case symbol_kind::S_FOR: // FOR
      case symbol_kind::S_FORCE: // FORCE
      case symbol_kind::S_FOREIGN: // FOREIGN
      case symbol_kind::S_FORMAT: // FORMAT
      case symbol_kind::S_FORWARD: // FORWARD
      case symbol_kind::S_FREEZE: // FREEZE
      case symbol_kind::S_FROM: // FROM
      case symbol_kind::S_FULL: // FULL
      case symbol_kind::S_FUNCTION: // FUNCTION
      case symbol_kind::S_FUNCTIONS: // FUNCTIONS
      case symbol_kind::S_GENERATED: // GENERATED
      case symbol_kind::S_GLOBAL: // GLOBAL
      case symbol_kind::S_GRANT: // GRANT
      case symbol_kind::S_GRANTED: // GRANTED
      case symbol_kind::S_GREATEST: // GREATEST
      case symbol_kind::S_GROUP_P: // GROUP_P
      case symbol_kind::S_GROUPING: // GROUPING
      case symbol_kind::S_GROUPS: // GROUPS
      case symbol_kind::S_HANDLER: // HANDLER
      case symbol_kind::S_HAVING: // HAVING
      case symbol_kind::S_HEADER_P: // HEADER_P
      case symbol_kind::S_HOLD: // HOLD
      case symbol_kind::S_HOUR_P: // HOUR_P
      case symbol_kind::S_IDENTITY_P: // IDENTITY_P
      case symbol_kind::S_IF_P: // IF_P
      case symbol_kind::S_ILIKE: // ILIKE
      case symbol_kind::S_IMMEDIATE: // IMMEDIATE
      case symbol_kind::S_IMMUTABLE: // IMMUTABLE
      case symbol_kind::S_IMPLICIT_P: // IMPLICIT_P
      case symbol_kind::S_IMPORT_P: // IMPORT_P
      case symbol_kind::S_IN_P: // IN_P
      case symbol_kind::S_INCLUDE: // INCLUDE
      case symbol_kind::S_INCLUDING: // INCLUDING
      case symbol_kind::S_INCREMENT: // INCREMENT
      case symbol_kind::S_INDENT: // INDENT
      case symbol_kind::S_INDEX: // INDEX
      case symbol_kind::S_INDEXES: // INDEXES
      case symbol_kind::S_INHERIT: // INHERIT
      case symbol_kind::S_INHERITS: // INHERITS
      case symbol_kind::S_INITIALLY: // INITIALLY
      case symbol_kind::S_INLINE_P: // INLINE_P
      case symbol_kind::S_INNER_P: // INNER_P
      case symbol_kind::S_INOUT: // INOUT
      case symbol_kind::S_INPUT_P: // INPUT_P
      case symbol_kind::S_INSENSITIVE: // INSENSITIVE
      case symbol_kind::S_INSERT: // INSERT
      case symbol_kind::S_INSTEAD: // INSTEAD
      case symbol_kind::S_INT_P: // INT_P
      case symbol_kind::S_INTEGER: // INTEGER
      case symbol_kind::S_INTERSECT: // INTERSECT
      case symbol_kind::S_INTERVAL: // INTERVAL
      case symbol_kind::S_INTO: // INTO
      case symbol_kind::S_INVOKER: // INVOKER
      case symbol_kind::S_IS: // IS
      case symbol_kind::S_ISNULL: // ISNULL
      case symbol_kind::S_ISOLATION: // ISOLATION
      case symbol_kind::S_JOIN: // JOIN
      case symbol_kind::S_JSON: // JSON
      case symbol_kind::S_JSON_ARRAY: // JSON_ARRAY
      case symbol_kind::S_JSON_ARRAYAGG: // JSON_ARRAYAGG
      case symbol_kind::S_JSON_EXISTS: // JSON_EXISTS
      case symbol_kind::S_JSON_OBJECT: // JSON_OBJECT
      case symbol_kind::S_JSON_OBJECTAGG: // JSON_OBJECTAGG
      case symbol_kind::S_JSON_QUERY: // JSON_QUERY
      case symbol_kind::S_JSON_SCALAR: // JSON_SCALAR
      case symbol_kind::S_JSON_SERIALIZE: // JSON_SERIALIZE
      case symbol_kind::S_JSON_TABLE: // JSON_TABLE
      case symbol_kind::S_JSON_VALUE: // JSON_VALUE
      case symbol_kind::S_KEEP: // KEEP
      case symbol_kind::S_KEY: // KEY
      case symbol_kind::S_KEYS: // KEYS
      case symbol_kind::S_LABEL: // LABEL
      case symbol_kind::S_LANGUAGE: // LANGUAGE
      case symbol_kind::S_LARGE_P: // LARGE_P
      case symbol_kind::S_LAST_P: // LAST_P
      case symbol_kind::S_LATERAL_P: // LATERAL_P
      case symbol_kind::S_LEADING: // LEADING
      case symbol_kind::S_LEAKPROOF: // LEAKPROOF
      case symbol_kind::S_LEAST: // LEAST
      case symbol_kind::S_LEFT: // LEFT
      case symbol_kind::S_LEVEL: // LEVEL
      case symbol_kind::S_LIKE: // LIKE
      case symbol_kind::S_LIMIT: // LIMIT
      case symbol_kind::S_LISTEN: // LISTEN
      case symbol_kind::S_LOAD: // LOAD
      case symbol_kind::S_LOCAL: // LOCAL
      case symbol_kind::S_LOCALTIME: // LOCALTIME
      case symbol_kind::S_LOCALTIMESTAMP: // LOCALTIMESTAMP
      case symbol_kind::S_LOCATION: // LOCATION
      case symbol_kind::S_LOCK_P: // LOCK_P
      case symbol_kind::S_LOCKED: // LOCKED
      case symbol_kind::S_LOGGED: // LOGGED
      case symbol_kind::S_MAPPING: // MAPPING
      case symbol_kind::S_MATCH: // MATCH
      case symbol_kind::S_MATCHED: // MATCHED
      case symbol_kind::S_MATERIALIZED: // MATERIALIZED
      case symbol_kind::S_MAXVALUE: // MAXVALUE
      case symbol_kind::S_MERGE: // MERGE
      case symbol_kind::S_MERGE_ACTION: // MERGE_ACTION
      case symbol_kind::S_METHOD: // METHOD
      case symbol_kind::S_MINUTE_P: // MINUTE_P
      case symbol_kind::S_MINVALUE: // MINVALUE
      case symbol_kind::S_MODE: // MODE
      case symbol_kind::S_MONTH_P: // MONTH_P
      case symbol_kind::S_MOVE: // MOVE
      case symbol_kind::S_NAME_P: // NAME_P
      case symbol_kind::S_NAMES: // NAMES
      case symbol_kind::S_NATIONAL: // NATIONAL
      case symbol_kind::S_NATURAL: // NATURAL
      case symbol_kind::S_NCHAR: // NCHAR
      case symbol_kind::S_NESTED: // NESTED
      case symbol_kind::S_NEW: // NEW
      case symbol_kind::S_NEXT: // NEXT
      case symbol_kind::S_NFC: // NFC
      case symbol_kind::S_NFD: // NFD
      case symbol_kind::S_NFKC: // NFKC
      case symbol_kind::S_NFKD: // NFKD
      case symbol_kind::S_NO: // NO
      case symbol_kind::S_NONE: // NONE
      case symbol_kind::S_NORMALIZE: // NORMALIZE
      case symbol_kind::S_NORMALIZED: // NORMALIZED
      case symbol_kind::S_NOT: // NOT
      case symbol_kind::S_NOTHING: // NOTHING
      case symbol_kind::S_NOTIFY: // NOTIFY
      case symbol_kind::S_NOTNULL: // NOTNULL
      case symbol_kind::S_NOWAIT: // NOWAIT
      case symbol_kind::S_NULL_P: // NULL_P
      case symbol_kind::S_NULLIF: // NULLIF
      case symbol_kind::S_NULLS_P: // NULLS_P
      case symbol_kind::S_NUMERIC: // NUMERIC
      case symbol_kind::S_OBJECT_P: // OBJECT_P
      case symbol_kind::S_OBJECTS_P: // OBJECTS_P
      case symbol_kind::S_OF: // OF
      case symbol_kind::S_OFF: // OFF
      case symbol_kind::S_OFFSET: // OFFSET
      case symbol_kind::S_OIDS: // OIDS
      case symbol_kind::S_OLD: // OLD
      case symbol_kind::S_OMIT: // OMIT
      case symbol_kind::S_ON: // ON
      case symbol_kind::S_ONLY: // ONLY
      case symbol_kind::S_OPERATOR: // OPERATOR
      case symbol_kind::S_OPTION: // OPTION
      case symbol_kind::S_OPTIONS: // OPTIONS
      case symbol_kind::S_OR: // OR
      case symbol_kind::S_ORDER: // ORDER
      case symbol_kind::S_ORDINALITY: // ORDINALITY
      case symbol_kind::S_OTHERS: // OTHERS
      case symbol_kind::S_OUT_P: // OUT_P
      case symbol_kind::S_OUTER_P: // OUTER_P
      case symbol_kind::S_OVER: // OVER
      case symbol_kind::S_OVERLAPS: // OVERLAPS
      case symbol_kind::S_OVERLAY: // OVERLAY
      case symbol_kind::S_OVERRIDING: // OVERRIDING
      case symbol_kind::S_OWNED: // OWNED
      case symbol_kind::S_OWNER: // OWNER
      case symbol_kind::S_PARALLEL: // PARALLEL
      case symbol_kind::S_PARAMETER: // PARAMETER
      case symbol_kind::S_PARSER: // PARSER
      case symbol_kind::S_PARTIAL: // PARTIAL
      case symbol_kind::S_PARTITION: // PARTITION
      case symbol_kind::S_PASSING: // PASSING
      case symbol_kind::S_PASSWORD: // PASSWORD
      case symbol_kind::S_PATH: // PATH
      case symbol_kind::S_PERIOD: // PERIOD
      case symbol_kind::S_PLACING: // PLACING
      case symbol_kind::S_PLAN: // PLAN
      case symbol_kind::S_PLANS: // PLANS
      case symbol_kind::S_POLICY: // POLICY
      case symbol_kind::S_POSITION: // POSITION
      case symbol_kind::S_PRECEDING: // PRECEDING
      case symbol_kind::S_PRECISION: // PRECISION
      case symbol_kind::S_PRESERVE: // PRESERVE
      case symbol_kind::S_PREPARE: // PREPARE
      case symbol_kind::S_PREPARED: // PREPARED
      case symbol_kind::S_PRIMARY: // PRIMARY
      case symbol_kind::S_PRIOR: // PRIOR
      case symbol_kind::S_PRIVILEGES: // PRIVILEGES
      case symbol_kind::S_PROCEDURAL: // PROCEDURAL
      case symbol_kind::S_PROCEDURE: // PROCEDURE
      case symbol_kind::S_PROCEDURES: // PROCEDURES
      case symbol_kind::S_PROGRAM: // PROGRAM
      case symbol_kind::S_PUBLICATION: // PUBLICATION
      case symbol_kind::S_QUOTES: // QUOTES
      case symbol_kind::S_EXTEND: // EXTEND
      case symbol_kind::S_RANGE: // RANGE
      case symbol_kind::S_READ: // READ
      case symbol_kind::S_REAL: // REAL
      case symbol_kind::S_REASSIGN: // REASSIGN
      case symbol_kind::S_RECURSIVE: // RECURSIVE
      case symbol_kind::S_REF_P: // REF_P
      case symbol_kind::S_REFERENCES: // REFERENCES
      case symbol_kind::S_REFERENCING: // REFERENCING
      case symbol_kind::S_REFRESH: // REFRESH
      case symbol_kind::S_REINDEX: // REINDEX
      case symbol_kind::S_RELATIVE_P: // RELATIVE_P
      case symbol_kind::S_RELEASE: // RELEASE
      case symbol_kind::S_RENAME: // RENAME
      case symbol_kind::S_REPEATABLE: // REPEATABLE
      case symbol_kind::S_REPLACE: // REPLACE
      case symbol_kind::S_REPLICA: // REPLICA
      case symbol_kind::S_RESET: // RESET
      case symbol_kind::S_RESTART: // RESTART
      case symbol_kind::S_RESTRICT: // RESTRICT
      case symbol_kind::S_RETURN: // RETURN
      case symbol_kind::S_RETURNING: // RETURNING
      case symbol_kind::S_RETURNS: // RETURNS
      case symbol_kind::S_REVOKE: // REVOKE
      case symbol_kind::S_RIGHT: // RIGHT
      case symbol_kind::S_ROLE: // ROLE
      case symbol_kind::S_ROLLBACK: // ROLLBACK
      case symbol_kind::S_ROLLUP: // ROLLUP
      case symbol_kind::S_ROUTINE: // ROUTINE
      case symbol_kind::S_ROUTINES: // ROUTINES
      case symbol_kind::S_ROW: // ROW
      case symbol_kind::S_ROWS: // ROWS
      case symbol_kind::S_RULE: // RULE
      case symbol_kind::S_SAVEPOINT: // SAVEPOINT
      case symbol_kind::S_SCALAR: // SCALAR
      case symbol_kind::S_SCHEMA: // SCHEMA
      case symbol_kind::S_SCHEMAS: // SCHEMAS
      case symbol_kind::S_SCROLL: // SCROLL
      case symbol_kind::S_SEARCH: // SEARCH
      case symbol_kind::S_SECOND_P: // SECOND_P
      case symbol_kind::S_SECURITY: // SECURITY
      case symbol_kind::S_SELECT: // SELECT
      case symbol_kind::S_SEQUENCE: // SEQUENCE
      case symbol_kind::S_SEQUENCES: // SEQUENCES
      case symbol_kind::S_SERIALIZABLE: // SERIALIZABLE
      case symbol_kind::S_SERVER: // SERVER
      case symbol_kind::S_SESSION: // SESSION
      case symbol_kind::S_SESSION_USER: // SESSION_USER
      case symbol_kind::S_SET: // SET
      case symbol_kind::S_SETS: // SETS
      case symbol_kind::S_SETOF: // SETOF
      case symbol_kind::S_SHARE: // SHARE
      case symbol_kind::S_SHOW: // SHOW
      case symbol_kind::S_SIMILAR: // SIMILAR
      case symbol_kind::S_SIMPLE: // SIMPLE
      case symbol_kind::S_SKIP: // SKIP
      case symbol_kind::S_SMALLINT: // SMALLINT
      case symbol_kind::S_SNAPSHOT: // SNAPSHOT
      case symbol_kind::S_SOME: // SOME
      case symbol_kind::S_SOURCE: // SOURCE
      case symbol_kind::S_SQL_P: // SQL_P
      case symbol_kind::S_STABLE: // STABLE
      case symbol_kind::S_STANDALONE_P: // STANDALONE_P
      case symbol_kind::S_START: // START
      case symbol_kind::S_STATEMENT: // STATEMENT
      case symbol_kind::S_STATISTICS: // STATISTICS
      case symbol_kind::S_STDIN: // STDIN
      case symbol_kind::S_STDOUT: // STDOUT
      case symbol_kind::S_STORAGE: // STORAGE
      case symbol_kind::S_STORED: // STORED
      case symbol_kind::S_STRICT_P: // STRICT_P
      case symbol_kind::S_STRING_P: // STRING_P
      case symbol_kind::S_STRIP_P: // STRIP_P
      case symbol_kind::S_SUBSCRIPTION: // SUBSCRIPTION
      case symbol_kind::S_SUBSTRING: // SUBSTRING
      case symbol_kind::S_SUPPORT: // SUPPORT
      case symbol_kind::S_SYMMETRIC: // SYMMETRIC
      case symbol_kind::S_SYSID: // SYSID
      case symbol_kind::S_SYSTEM_P: // SYSTEM_P
      case symbol_kind::S_SYSTEM_USER: // SYSTEM_USER
      case symbol_kind::S_TABLE: // TABLE
      case symbol_kind::S_TABLES: // TABLES
      case symbol_kind::S_TABLESAMPLE: // TABLESAMPLE
      case symbol_kind::S_TABLESPACE: // TABLESPACE
      case symbol_kind::S_TARGET: // TARGET
      case symbol_kind::S_TEMP: // TEMP
      case symbol_kind::S_TEMPLATE: // TEMPLATE
      case symbol_kind::S_TEMPORARY: // TEMPORARY
      case symbol_kind::S_TEXT_P: // TEXT_P
      case symbol_kind::S_THEN: // THEN
      case symbol_kind::S_TIES: // TIES
      case symbol_kind::S_TIME: // TIME
      case symbol_kind::S_TIMESTAMP: // TIMESTAMP
      case symbol_kind::S_TO: // TO
      case symbol_kind::S_TRAILING: // TRAILING
      case symbol_kind::S_TRANSACTION: // TRANSACTION
      case symbol_kind::S_TRANSFORM: // TRANSFORM
      case symbol_kind::S_TREAT: // TREAT
      case symbol_kind::S_TRIGGER: // TRIGGER
      case symbol_kind::S_TRIM: // TRIM
      case symbol_kind::S_TRUE_P: // TRUE_P
      case symbol_kind::S_TRUNCATE: // TRUNCATE
      case symbol_kind::S_TRUSTED: // TRUSTED
      case symbol_kind::S_TYPE_P: // TYPE_P
      case symbol_kind::S_TYPES_P: // TYPES_P
      case symbol_kind::S_UESCAPE: // UESCAPE
      case symbol_kind::S_UNBOUNDED: // UNBOUNDED
      case symbol_kind::S_UNCONDITIONAL: // UNCONDITIONAL
      case symbol_kind::S_UNCOMMITTED: // UNCOMMITTED
      case symbol_kind::S_UNENCRYPTED: // UNENCRYPTED
      case symbol_kind::S_UNION: // UNION
      case symbol_kind::S_UNIQUE: // UNIQUE
      case symbol_kind::S_UNKNOWN: // UNKNOWN
      case symbol_kind::S_UNLISTEN: // UNLISTEN
      case symbol_kind::S_UNLOGGED: // UNLOGGED
      case symbol_kind::S_UNTIL: // UNTIL
      case symbol_kind::S_UPDATE: // UPDATE
      case symbol_kind::S_USER: // USER
      case symbol_kind::S_USING: // USING
      case symbol_kind::S_VACUUM: // VACUUM
      case symbol_kind::S_VALID: // VALID
      case symbol_kind::S_VALIDATE: // VALIDATE
      case symbol_kind::S_VALIDATOR: // VALIDATOR
      case symbol_kind::S_VALUE_P: // VALUE_P
      case symbol_kind::S_VALUES: // VALUES
      case symbol_kind::S_VARCHAR: // VARCHAR
      case symbol_kind::S_VARIADIC: // VARIADIC
      case symbol_kind::S_VARYING: // VARYING
      case symbol_kind::S_VERBOSE: // VERBOSE
      case symbol_kind::S_VERSION_P: // VERSION_P
      case symbol_kind::S_VIEW: // VIEW
      case symbol_kind::S_VIEWS: // VIEWS
      case symbol_kind::S_VIRTUAL: // VIRTUAL
      case symbol_kind::S_VOLATILE: // VOLATILE
      case symbol_kind::S_WHEN: // WHEN
      case symbol_kind::S_WHERE: // WHERE
      case symbol_kind::S_WHITESPACE_P: // WHITESPACE_P
      case symbol_kind::S_WINDOW: // WINDOW
      case symbol_kind::S_WITH: // WITH
      case symbol_kind::S_WITHIN: // WITHIN
      case symbol_kind::S_WITHOUT: // WITHOUT
      case symbol_kind::S_WORK: // WORK
      case symbol_kind::S_WRAPPER: // WRAPPER
      case symbol_kind::S_WRITE: // WRITE
      case symbol_kind::S_XML_P: // XML_P
      case symbol_kind::S_XMLATTRIBUTES: // XMLATTRIBUTES
      case symbol_kind::S_XMLCONCAT: // XMLCONCAT
      case symbol_kind::S_XMLELEMENT: // XMLELEMENT
      case symbol_kind::S_XMLEXISTS: // XMLEXISTS
      case symbol_kind::S_XMLFOREST: // XMLFOREST
      case symbol_kind::S_XMLNAMESPACES: // XMLNAMESPACES
      case symbol_kind::S_XMLPARSE: // XMLPARSE
      case symbol_kind::S_XMLPI: // XMLPI
      case symbol_kind::S_XMLROOT: // XMLROOT
      case symbol_kind::S_XMLSERIALIZE: // XMLSERIALIZE
      case symbol_kind::S_XMLTABLE: // XMLTABLE
      case symbol_kind::S_YEAR_P: // YEAR_P
      case symbol_kind::S_YES_P: // YES_P
      case symbol_kind::S_ZONE: // ZONE
      case symbol_kind::S_copy_file_name: // copy_file_name
      case symbol_kind::S_copy_delimiter: // copy_delimiter
      case symbol_kind::S_var_name: // var_name
      case symbol_kind::S_NonReservedWord: // NonReservedWord
      case symbol_kind::S_relation_expr: // relation_expr
      case symbol_kind::S_any_operator: // any_operator
      case symbol_kind::S_qual_Op: // qual_Op
      case symbol_kind::S_all_Op: // all_Op
      case symbol_kind::S_ColId: // ColId
      case symbol_kind::S_type_function_name: // type_function_name
      case symbol_kind::S_type_func_name_keyword: // type_func_name_keyword
      case symbol_kind::S_ColLabel: // ColLabel
      case symbol_kind::S_BareColLabel: // BareColLabel
      case symbol_kind::S_reserved_keyword: // reserved_keyword
      case symbol_kind::S_unreserved_keyword: // unreserved_keyword
      case symbol_kind::S_col_name_keyword: // col_name_keyword
      case symbol_kind::S_qualified_name: // qualified_name
      case symbol_kind::S_name: // name
      case symbol_kind::S_attr_name: // attr_name
      case symbol_kind::S_func_name: // func_name
      case symbol_kind::S_insert_target: // insert_target
      case symbol_kind::S_insert_column_item: // insert_column_item
        value.move< std::string > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_in_expr: // in_expr
        value.move< std::variant<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>, std::shared_ptr<lingodb::ast::SubqueryExpression>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_when_clause_list: // when_clause_list
        value.move< std::vector<lingodb::ast::CaseExpression::CaseCheck> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_copy_options: // copy_options
      case symbol_kind::S_copy_opt_list: // copy_opt_list
        value.move< std::vector<std::pair<std::string, std::string>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_stmtmulti: // stmtmulti
        value.move< std::vector<std::shared_ptr<lingodb::ast::AstNode>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_ColQualList: // ColQualList
        value.move< std::vector<std::shared_ptr<lingodb::ast::Constraint>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_func_expr_list: // func_expr_list
        value.move< std::vector<std::shared_ptr<lingodb::ast::FunctionExpression>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_sortby_list: // sortby_list
        value.move< std::vector<std::shared_ptr<lingodb::ast::OrderByElement>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_var_list: // var_list
      case symbol_kind::S_group_by_list: // group_by_list
      case symbol_kind::S_group_by_list_with_alias: // group_by_list_with_alias
      case symbol_kind::S_rollup_clause: // rollup_clause
      case symbol_kind::S_columnref_list: // columnref_list
      case symbol_kind::S_func_arg_list_opt: // func_arg_list_opt
      case symbol_kind::S_func_arg_list: // func_arg_list
      case symbol_kind::S_expr_list: // expr_list
      case symbol_kind::S_expr_list_with_alias: // expr_list_with_alias
      case symbol_kind::S_extract_list: // extract_list
      case symbol_kind::S_substr_list: // substr_list
      case symbol_kind::S_target_list: // target_list
      case symbol_kind::S_opt_partition_clause: // opt_partition_clause
        value.move< std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_OptTableElementList: // OptTableElementList
      case symbol_kind::S_TableElementList: // TableElementList
        value.move< std::vector<std::shared_ptr<lingodb::ast::TableElement>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_type_modifiers: // opt_type_modifiers
      case symbol_kind::S_type_modifiers: // type_modifiers
        value.move< std::vector<std::shared_ptr<lingodb::ast::Value>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_opt_name_list: // opt_name_list
      case symbol_kind::S_name_list: // name_list
      case symbol_kind::S_insert_column_list: // insert_column_list
        value.move< std::vector<std::string> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_INTEGER_VALUE: // "integer_value"
        value.move< uint64_t > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

    // that is emptied.
    that.kind_ = symbol_kind::S_YYEMPTY;
  }

#if YY_CPLUSPLUS < 201103L
  parser::stack_symbol_type&
  parser::stack_symbol_type::operator= (const stack_symbol_type& that)
  {
    state = that.state;
    switch (that.kind ())
    {
      case symbol_kind::S_distinct_clause: // distinct_clause
      case symbol_kind::S_set_quantifier: // set_quantifier
      case symbol_kind::S_opt_asymmetric: // opt_asymmetric
      case symbol_kind::S_OptTemp: // OptTemp
      case symbol_kind::S_opt_varying: // opt_varying
        value.copy< bool > (that.value);
        break;

      case symbol_kind::S_ICONST: // ICONST
        value.copy< int > (that.value);
        break;

      case symbol_kind::S_when_clause: // when_clause
        value.copy< lingodb::ast::CaseExpression::CaseCheck > (that.value);
        break;

      case symbol_kind::S_basicComparisonType: // basicComparisonType
        value.copy< lingodb::ast::ExpressionType > (that.value);
        break;

      case symbol_kind::S_join_type: // join_type
        value.copy< lingodb::ast::JoinType > (that.value);
        break;

      case symbol_kind::S_Type: // Type
      case symbol_kind::S_SimpleType: // SimpleType
      case symbol_kind::S_ConstTypename: // ConstTypename
      case symbol_kind::S_Numeric_with_opt_lenghth: // Numeric_with_opt_lenghth
      case symbol_kind::S_Numeric: // Numeric
      case symbol_kind::S_Character: // Character
      case symbol_kind::S_ConstCharacter: // ConstCharacter
      case symbol_kind::S_CharacterWithLength: // CharacterWithLength
      case symbol_kind::S_CharacterWithoutLength: // CharacterWithoutLength
      case symbol_kind::S_character: // character
      case symbol_kind::S_ConstDatetime: // ConstDatetime
      case symbol_kind::S_ConstInterval: // ConstInterval
      case symbol_kind::S_Typename: // Typename
        value.copy< lingodb::ast::LogicalTypeWithMods > (that.value);
        break;

      case symbol_kind::S_opt_nulls_order: // opt_nulls_order
        value.copy< lingodb::ast::OrderByNullType > (that.value);
        break;

      case symbol_kind::S_opt_asc_desc: // opt_asc_desc
        value.copy< lingodb::ast::OrderType > (that.value);
        break;

      case symbol_kind::S_sub_type: // sub_type
        value.copy< lingodb::ast::SubqueryType > (that.value);
        break;

      case symbol_kind::S_join_qual: // join_qual
        value.copy< lingodb::ast::jointCondOrUsingCols > (that.value);
        break;

      case symbol_kind::S_opt_sort_clause: // opt_sort_clause
        value.copy< std::optional<std::shared_ptr<lingodb::ast::OrderByModifier>> > (that.value);
        break;

      case symbol_kind::S_case_arg: // case_arg
        value.copy< std::optional<std::shared_ptr<lingodb::ast::ParsedExpression>> > (that.value);
        break;

      case symbol_kind::S_opt_select_limit: // opt_select_limit
        value.copy< std::optional<std::shared_ptr<lingodb::ast::ResultModifier>> > (that.value);
        break;

      case symbol_kind::S_opt_interval: // opt_interval
        value.copy< std::optional<std::string> > (that.value);
        break;

      case symbol_kind::S_copy_opt_item: // copy_opt_item
        value.copy< std::pair<std::string, std::string> > (that.value);
        break;

      case symbol_kind::S_alias_clause: // alias_clause
      case symbol_kind::S_opt_alias_clause: // opt_alias_clause
        value.copy< std::pair<std::string, std::vector<std::string>> > (that.value);
        break;

      case symbol_kind::S_extract_arg: // extract_arg
        value.copy< std::shared_ptr<ast::ConstantExpression> > (that.value);
        break;

      case symbol_kind::S_CopyStmt: // CopyStmt
        value.copy< std::shared_ptr<ast::CopyNode> > (that.value);
        break;

      case symbol_kind::S_VariableSetStmt: // VariableSetStmt
      case symbol_kind::S_set_rest: // set_rest
      case symbol_kind::S_generic_set: // generic_set
      case symbol_kind::S_set_rest_more: // set_rest_more
        value.copy< std::shared_ptr<ast::SetVariableStatement> > (that.value);
        break;

      case symbol_kind::S_agg_expr: // agg_expr
        value.copy< std::shared_ptr<lingodb::ast::AggregationNode> > (that.value);
        break;

      case symbol_kind::S_toplevel_stmt: // toplevel_stmt
      case symbol_kind::S_stmt: // stmt
        value.copy< std::shared_ptr<lingodb::ast::AstNode> > (that.value);
        break;

      case symbol_kind::S_and_a_expr: // and_a_expr
      case symbol_kind::S_or_a_expr: // or_a_expr
        value.copy< std::shared_ptr<lingodb::ast::ConjunctionExpression> > (that.value);
        break;

      case symbol_kind::S_ColConstraint: // ColConstraint
      case symbol_kind::S_ColConstraintElem: // ColConstraintElem
      case symbol_kind::S_ConstraintElem: // ConstraintElem
        value.copy< std::shared_ptr<lingodb::ast::Constraint> > (that.value);
        break;

      case symbol_kind::S_CreateStmt: // CreateStmt
        value.copy< std::shared_ptr<lingodb::ast::CreateNode> > (that.value);
        break;

      case symbol_kind::S_from_list: // from_list
        value.copy< std::shared_ptr<lingodb::ast::CrossProductRef> > (that.value);
        break;

      case symbol_kind::S_values_clause: // values_clause
        value.copy< std::shared_ptr<lingodb::ast::ExpressionListRef> > (that.value);
        break;

      case symbol_kind::S_func_application: // func_application
      case symbol_kind::S_func_expr: // func_expr
      case symbol_kind::S_func_expr_common_subexpr: // func_expr_common_subexpr
        value.copy< std::shared_ptr<lingodb::ast::FunctionExpression> > (that.value);
        break;

      case symbol_kind::S_group_clause: // group_clause
      case symbol_kind::S_group_clause_with_alias: // group_clause_with_alias
        value.copy< std::shared_ptr<lingodb::ast::GroupByNode> > (that.value);
        break;

      case symbol_kind::S_InsertStmt: // InsertStmt
      case symbol_kind::S_insert_rest: // insert_rest
        value.copy< std::shared_ptr<lingodb::ast::InsertNode> > (that.value);
        break;

      case symbol_kind::S_select_limit: // select_limit
      case symbol_kind::S_limit_clause: // limit_clause
        value.copy< std::shared_ptr<lingodb::ast::LimitModifier> > (that.value);
        break;

      case symbol_kind::S_sortby: // sortby
        value.copy< std::shared_ptr<lingodb::ast::OrderByElement> > (that.value);
        break;

      case symbol_kind::S_sort_clause: // sort_clause
        value.copy< std::shared_ptr<lingodb::ast::OrderByModifier> > (that.value);
        break;

      case symbol_kind::S_var_value: // var_value
      case symbol_kind::S_opt_boolean_or_string: // opt_boolean_or_string
      case symbol_kind::S_NonReservedWord_or_Sconst: // NonReservedWord_or_Sconst
      case symbol_kind::S_group_by_item: // group_by_item
      case symbol_kind::S_group_by_item_with_alias: // group_by_item_with_alias
      case symbol_kind::S_having_clause: // having_clause
      case symbol_kind::S_offset_clause: // offset_clause
      case symbol_kind::S_select_limit_value: // select_limit_value
      case symbol_kind::S_select_offset_value: // select_offset_value
      case symbol_kind::S_where_clause: // where_clause
      case symbol_kind::S_a_expr: // a_expr
      case symbol_kind::S_b_expr: // b_expr
      case symbol_kind::S_c_expr: // c_expr
      case symbol_kind::S_case_expr: // case_expr
      case symbol_kind::S_case_default: // case_default
      case symbol_kind::S_columnref: // columnref
      case symbol_kind::S_func_arg_expr: // func_arg_expr
      case symbol_kind::S_cast_expr: // cast_expr
      case symbol_kind::S_indirection: // indirection
      case symbol_kind::S_indirection_el: // indirection_el
      case symbol_kind::S_target_el: // target_el
      case symbol_kind::S_NumericOnly: // NumericOnly
      case symbol_kind::S_AexprConst: // AexprConst
      case symbol_kind::S_Iconst: // Iconst
      case symbol_kind::S_SignedIconst: // SignedIconst
      case symbol_kind::S_Fconst: // Fconst
      case symbol_kind::S_Sconst: // Sconst
      case symbol_kind::S_Bconst: // Bconst
        value.copy< std::shared_ptr<lingodb::ast::ParsedExpression> > (that.value);
        break;

      case symbol_kind::S_pipe_start: // pipe_start
      case symbol_kind::S_pipe_operator: // pipe_operator
        value.copy< std::shared_ptr<lingodb::ast::PipeOperator> > (that.value);
        break;

      case symbol_kind::S_select_with_parens: // select_with_parens
      case symbol_kind::S_select_no_parens: // select_no_parens
      case symbol_kind::S_select_clause: // select_clause
      case symbol_kind::S_simple_select: // simple_select
      case symbol_kind::S_with_clause: // with_clause
      case symbol_kind::S_cte_list: // cte_list
      case symbol_kind::S_common_table_expr: // common_table_expr
        value.copy< std::shared_ptr<lingodb::ast::QueryNode> > (that.value);
        break;

      case symbol_kind::S_set_list: // set_list
        value.copy< std::shared_ptr<lingodb::ast::SetColumnExpression> > (that.value);
        break;

      case symbol_kind::S_TableElement: // TableElement
      case symbol_kind::S_TableConstraint: // TableConstraint
      case symbol_kind::S_columnElement: // columnElement
        value.copy< std::shared_ptr<lingodb::ast::TableElement> > (that.value);
        break;

      case symbol_kind::S_SelectStmt: // SelectStmt
      case symbol_kind::S_PipeSQLStmt: // PipeSQLStmt
      case symbol_kind::S_classic_select_and_pipe_sql_with_parens: // classic_select_and_pipe_sql_with_parens
      case symbol_kind::S_pipe_sql_with_parens: // pipe_sql_with_parens
      case symbol_kind::S_pipe_sql_no_parens: // pipe_sql_no_parens
      case symbol_kind::S_pipe_or_select_clause: // pipe_or_select_clause
      case symbol_kind::S_PreparableStmt: // PreparableStmt
        value.copy< std::shared_ptr<lingodb::ast::TableProducer> > (that.value);
        break;

      case symbol_kind::S_opt_from_clause: // opt_from_clause
      case symbol_kind::S_from_clause: // from_clause
      case symbol_kind::S_table_ref: // table_ref
      case symbol_kind::S_joined_table: // joined_table
        value.copy< std::shared_ptr<lingodb::ast::TableRef> > (that.value);
        break;

      case symbol_kind::S_opt_target_list: // opt_target_list
        value.copy< std::shared_ptr<lingodb::ast::TargetList> > (that.value);
        break;

      case symbol_kind::S_type_modifier: // type_modifier
        value.copy< std::shared_ptr<lingodb::ast::Value> > (that.value);
        break;

      case symbol_kind::S_window_func_expr: // window_func_expr
      case symbol_kind::S_over_clause: // over_clause
      case symbol_kind::S_window_specification: // window_specification
        value.copy< std::shared_ptr<lingodb::ast::WindowExpression> > (that.value);
        break;

      case symbol_kind::S_opt_frame_clause: // opt_frame_clause
      case symbol_kind::S_frame_extent: // frame_extent
      case symbol_kind::S_frame_bound: // frame_bound
        value.copy< std::shared_ptr<lingodb::ast::WindowFrame> > (that.value);
        break;

      case symbol_kind::S_FCONST: // FCONST
      case symbol_kind::S_IDENT: // IDENT
      case symbol_kind::S_IDENTIFIER: // "identifier"
      case symbol_kind::S_STRING_VALUE: // STRING_VALUE
      case symbol_kind::S_BIT_VALUE: // "bit_string"
      case symbol_kind::S_HEX_VALUE: // "hex_string"
      case symbol_kind::S_NATIONAL_VALUE: // "nat_string"
      case symbol_kind::S_PERCENT: // "%"
      case symbol_kind::S_PLUS: // "+"
      case symbol_kind::S_SLASH: // "/"
      case symbol_kind::S_STAR: // "*"
      case symbol_kind::S_MINUS: // "-"
      case symbol_kind::S_EQUAL: // "="
      case symbol_kind::S_NOT_EQUAL: // "<>"
      case symbol_kind::S_LESS_EQUAL: // "<="
      case symbol_kind::S_LESS: // "<"
      case symbol_kind::S_GREATER_EQUAL: // ">="
      case symbol_kind::S_GREATER: // ">"
      case symbol_kind::S_UIDENT: // UIDENT
      case symbol_kind::S_SCONST: // SCONST
      case symbol_kind::S_USCONST: // USCONST
      case symbol_kind::S_BCONST: // BCONST
      case symbol_kind::S_XCONST: // XCONST
      case symbol_kind::S_Op: // Op
      case symbol_kind::S_TYPECAST: // TYPECAST
      case symbol_kind::S_ABORT_P: // ABORT_P
      case symbol_kind::S_ABSENT: // ABSENT
      case symbol_kind::S_ABSOLUTE_P: // ABSOLUTE_P
      case symbol_kind::S_ACCESS: // ACCESS
      case symbol_kind::S_ACTION: // ACTION
      case symbol_kind::S_ADD_P: // ADD_P
      case symbol_kind::S_ADMIN: // ADMIN
      case symbol_kind::S_AFTER: // AFTER
      case symbol_kind::S_AGGREGATE: // AGGREGATE
      case symbol_kind::S_ALL: // ALL
      case symbol_kind::S_ALSO: // ALSO
      case symbol_kind::S_ALTER: // ALTER
      case symbol_kind::S_ALWAYS: // ALWAYS
      case symbol_kind::S_ANALYSE: // ANALYSE
      case symbol_kind::S_ANALYZE: // ANALYZE
      case symbol_kind::S_AND: // AND
      case symbol_kind::S_ANY: // ANY
      case symbol_kind::S_ARRAY: // ARRAY
      case symbol_kind::S_AS: // AS
      case symbol_kind::S_ASC: // ASC
      case symbol_kind::S_ASENSITIVE: // ASENSITIVE
      case symbol_kind::S_ASSERTION: // ASSERTION
      case symbol_kind::S_ASSIGNMENT: // ASSIGNMENT
      case symbol_kind::S_ASYMMETRIC: // ASYMMETRIC
      case symbol_kind::S_ATOMIC: // ATOMIC
      case symbol_kind::S_AT: // AT
      case symbol_kind::S_ATTACH: // ATTACH
      case symbol_kind::S_ATTRIBUTE: // ATTRIBUTE
      case symbol_kind::S_AUTHORIZATION: // AUTHORIZATION
      case symbol_kind::S_BACKWARD: // BACKWARD
      case symbol_kind::S_BEFORE: // BEFORE
      case symbol_kind::S_BEGIN_P: // BEGIN_P
      case symbol_kind::S_BETWEEN: // BETWEEN
      case symbol_kind::S_BIGINT: // BIGINT
      case symbol_kind::S_BINARY: // BINARY
      case symbol_kind::S_BIT: // BIT
      case symbol_kind::S_BOOLEAN_P: // BOOLEAN_P
      case symbol_kind::S_BOTH: // BOTH
      case symbol_kind::S_BREADTH: // BREADTH
      case symbol_kind::S_BY: // BY
      case symbol_kind::S_CACHE: // CACHE
      case symbol_kind::S_CALL: // CALL
      case symbol_kind::S_CALLED: // CALLED
      case symbol_kind::S_CASCADE: // CASCADE
      case symbol_kind::S_CASCADED: // CASCADED
      case symbol_kind::S_CASE: // CASE
      case symbol_kind::S_CAST: // CAST
      case symbol_kind::S_CATALOG_P: // CATALOG_P
      case symbol_kind::S_CHAIN: // CHAIN
      case symbol_kind::S_CHAR_P: // CHAR_P
      case symbol_kind::S_CHARACTER: // CHARACTER
      case symbol_kind::S_CHARACTERISTICS: // CHARACTERISTICS
      case symbol_kind::S_CHECK: // CHECK
      case symbol_kind::S_CHECKPOINT: // CHECKPOINT
      case symbol_kind::S_CLASS: // CLASS
      case symbol_kind::S_CLOSE: // CLOSE
      case symbol_kind::S_CLUSTER: // CLUSTER
      case symbol_kind::S_COALESCE: // COALESCE
      case symbol_kind::S_COLLATE: // COLLATE
      case symbol_kind::S_COLLATION: // COLLATION
      case symbol_kind::S_COLUMN: // COLUMN
      case symbol_kind::S_COLUMNS: // COLUMNS
      case symbol_kind::S_COMMENT: // COMMENT
      case symbol_kind::S_COMMENTS: // COMMENTS
      case symbol_kind::S_COMMIT: // COMMIT
      case symbol_kind::S_COMMITTED: // COMMITTED
      case symbol_kind::S_COMPRESSION: // COMPRESSION
      case symbol_kind::S_CONCURRENTLY: // CONCURRENTLY
      case symbol_kind::S_CONDITIONAL: // CONDITIONAL
      case symbol_kind::S_CONFIGURATION: // CONFIGURATION
      case symbol_kind::S_CONFLICT: // CONFLICT
      case symbol_kind::S_CONNECTION: // CONNECTION
      case symbol_kind::S_CONSTRAINT: // CONSTRAINT
      case symbol_kind::S_CONSTRAINTS: // CONSTRAINTS
      case symbol_kind::S_CONTENT_P: // CONTENT_P
      case symbol_kind::S_CONTINUE_P: // CONTINUE_P
      case symbol_kind::S_CONVERSION_P: // CONVERSION_P
      case symbol_kind::S_COPY: // COPY
      case symbol_kind::S_COST: // COST
      case symbol_kind::S_CREATE: // CREATE
      case symbol_kind::S_CROSS: // CROSS
      case symbol_kind::S_CSV: // CSV
      case symbol_kind::S_CUBE: // CUBE
      case symbol_kind::S_CURRENT_P: // CURRENT_P
      case symbol_kind::S_CURRENT_CATALOG: // CURRENT_CATALOG
      case symbol_kind::S_CURRENT_DATE: // CURRENT_DATE
      case symbol_kind::S_CURRENT_ROLE: // CURRENT_ROLE
      case symbol_kind::S_CURRENT_SCHEMA: // CURRENT_SCHEMA
      case symbol_kind::S_CURRENT_TIME: // CURRENT_TIME
      case symbol_kind::S_CURRENT_TIMESTAMP: // CURRENT_TIMESTAMP
      case symbol_kind::S_CURRENT_USER: // CURRENT_USER
      case symbol_kind::S_CURSOR: // CURSOR
      case symbol_kind::S_CYCLE: // CYCLE
      case symbol_kind::S_DATA_P: // DATA_P
      case symbol_kind::S_DATABASE: // DATABASE
      case symbol_kind::S_DAY_P: // DAY_P
      case symbol_kind::S_DEALLOCATE: // DEALLOCATE
      case symbol_kind::S_DEC: // DEC
      case symbol_kind::S_DECIMAL_P: // DECIMAL_P
      case symbol_kind::S_DECLARE: // DECLARE
      case symbol_kind::S_DEFAULT: // DEFAULT
      case symbol_kind::S_DEFAULTS: // DEFAULTS
      case symbol_kind::S_DATE_P: // DATE_P
      case symbol_kind::S_DEFERRABLE: // DEFERRABLE
      case symbol_kind::S_DEFERRED: // DEFERRED
      case symbol_kind::S_DEFINER: // DEFINER
      case symbol_kind::S_DELETE_P: // DELETE_P
      case symbol_kind::S_DELIMITER: // DELIMITER
      case symbol_kind::S_DELIMITERS: // DELIMITERS
      case symbol_kind::S_DEPENDS: // DEPENDS
      case symbol_kind::S_DEPTH: // DEPTH
      case symbol_kind::S_DESC: // DESC
      case symbol_kind::S_DETACH: // DETACH
      case symbol_kind::S_DICTIONARY: // DICTIONARY
      case symbol_kind::S_DISABLE_P: // DISABLE_P
      case symbol_kind::S_DISCARD: // DISCARD
      case symbol_kind::S_DISTINCT: // DISTINCT
      case symbol_kind::S_DO: // DO
      case symbol_kind::S_DOCUMENT_P: // DOCUMENT_P
      case symbol_kind::S_DOMAIN_P: // DOMAIN_P
      case symbol_kind::S_DOUBLE_P: // DOUBLE_P
      case symbol_kind::S_DROP: // DROP
      case symbol_kind::S_EACH: // EACH
      case symbol_kind::S_ELSE: // ELSE
      case symbol_kind::S_EMPTY_P: // EMPTY_P
      case symbol_kind::S_ENABLE_P: // ENABLE_P
      case symbol_kind::S_ENCODING: // ENCODING
      case symbol_kind::S_ENCRYPTED: // ENCRYPTED
      case symbol_kind::S_END_P: // END_P
      case symbol_kind::S_ENFORCED: // ENFORCED
      case symbol_kind::S_ENUM_P: // ENUM_P
      case symbol_kind::S_ERROR_P: // ERROR_P
      case symbol_kind::S_ESCAPE: // ESCAPE
      case symbol_kind::S_EVENT: // EVENT
      case symbol_kind::S_EXCEPT: // EXCEPT
      case symbol_kind::S_EXCLUDE: // EXCLUDE
      case symbol_kind::S_EXCLUDING: // EXCLUDING
      case symbol_kind::S_EXCLUSIVE: // EXCLUSIVE
      case symbol_kind::S_EXECUTE: // EXECUTE
      case symbol_kind::S_EXISTS: // EXISTS
      case symbol_kind::S_EXPLAIN: // EXPLAIN
      case symbol_kind::S_EXPRESSION: // EXPRESSION
      case symbol_kind::S_EXTENSION: // EXTENSION
      case symbol_kind::S_EXTERNAL: // EXTERNAL
      case symbol_kind::S_EXTRACT: // EXTRACT
      case symbol_kind::S_FALSE_P: // FALSE_P
      case symbol_kind::S_FAMILY: // FAMILY
      case symbol_kind::S_FETCH: // FETCH
      case symbol_kind::S_FILTER: // FILTER
      case symbol_kind::S_FINALIZE: // FINALIZE
      case symbol_kind::S_FIRST_P: // FIRST_P
      case symbol_kind::S_FLOAT_P: // FLOAT_P
      case symbol_kind::S_FOLLOWING: // FOLLOWING
      case symbol_kind::S_FOR: // FOR
      case symbol_kind::S_FORCE: // FORCE
      case symbol_kind::S_FOREIGN: // FOREIGN
      case symbol_kind::S_FORMAT: // FORMAT
      case symbol_kind::S_FORWARD: // FORWARD
      case symbol_kind::S_FREEZE: // FREEZE
      case symbol_kind::S_FROM: // FROM
      case symbol_kind::S_FULL: // FULL
      case symbol_kind::S_FUNCTION: // FUNCTION
      case symbol_kind::S_FUNCTIONS: // FUNCTIONS
      case symbol_kind::S_GENERATED: // GENERATED
      case symbol_kind::S_GLOBAL: // GLOBAL
      case symbol_kind::S_GRANT: // GRANT
      case symbol_kind::S_GRANTED: // GRANTED
      case symbol_kind::S_GREATEST: // GREATEST
      case symbol_kind::S_GROUP_P: // GROUP_P
      case symbol_kind::S_GROUPING: // GROUPING
      case symbol_kind::S_GROUPS: // GROUPS
      case symbol_kind::S_HANDLER: // HANDLER
      case symbol_kind::S_HAVING: // HAVING
      case symbol_kind::S_HEADER_P: // HEADER_P
      case symbol_kind::S_HOLD: // HOLD
      case symbol_kind::S_HOUR_P: // HOUR_P
      case symbol_kind::S_IDENTITY_P: // IDENTITY_P
      case symbol_kind::S_IF_P: // IF_P
      case symbol_kind::S_ILIKE: // ILIKE
      case symbol_kind::S_IMMEDIATE: // IMMEDIATE
      case symbol_kind::S_IMMUTABLE: // IMMUTABLE
      case symbol_kind::S_IMPLICIT_P: // IMPLICIT_P
      case symbol_kind::S_IMPORT_P: // IMPORT_P
      case symbol_kind::S_IN_P: // IN_P
      case symbol_kind::S_INCLUDE: // INCLUDE
      case symbol_kind::S_INCLUDING: // INCLUDING
      case symbol_kind::S_INCREMENT: // INCREMENT
      case symbol_kind::S_INDENT: // INDENT
      case symbol_kind::S_INDEX: // INDEX
      case symbol_kind::S_INDEXES: // INDEXES
      case symbol_kind::S_INHERIT: // INHERIT
      case symbol_kind::S_INHERITS: // INHERITS
      case symbol_kind::S_INITIALLY: // INITIALLY
      case symbol_kind::S_INLINE_P: // INLINE_P
      case symbol_kind::S_INNER_P: // INNER_P
      case symbol_kind::S_INOUT: // INOUT
      case symbol_kind::S_INPUT_P: // INPUT_P
      case symbol_kind::S_INSENSITIVE: // INSENSITIVE
      case symbol_kind::S_INSERT: // INSERT
      case symbol_kind::S_INSTEAD: // INSTEAD
      case symbol_kind::S_INT_P: // INT_P
      case symbol_kind::S_INTEGER: // INTEGER
      case symbol_kind::S_INTERSECT: // INTERSECT
      case symbol_kind::S_INTERVAL: // INTERVAL
      case symbol_kind::S_INTO: // INTO
      case symbol_kind::S_INVOKER: // INVOKER
      case symbol_kind::S_IS: // IS
      case symbol_kind::S_ISNULL: // ISNULL
      case symbol_kind::S_ISOLATION: // ISOLATION
      case symbol_kind::S_JOIN: // JOIN
      case symbol_kind::S_JSON: // JSON
      case symbol_kind::S_JSON_ARRAY: // JSON_ARRAY
      case symbol_kind::S_JSON_ARRAYAGG: // JSON_ARRAYAGG
      case symbol_kind::S_JSON_EXISTS: // JSON_EXISTS
      case symbol_kind::S_JSON_OBJECT: // JSON_OBJECT
      case symbol_kind::S_JSON_OBJECTAGG: // JSON_OBJECTAGG
      case symbol_kind::S_JSON_QUERY: // JSON_QUERY
      case symbol_kind::S_JSON_SCALAR: // JSON_SCALAR
      case symbol_kind::S_JSON_SERIALIZE: // JSON_SERIALIZE
      case symbol_kind::S_JSON_TABLE: // JSON_TABLE
      case symbol_kind::S_JSON_VALUE: // JSON_VALUE
      case symbol_kind::S_KEEP: // KEEP
      case symbol_kind::S_KEY: // KEY
      case symbol_kind::S_KEYS: // KEYS
      case symbol_kind::S_LABEL: // LABEL
      case symbol_kind::S_LANGUAGE: // LANGUAGE
      case symbol_kind::S_LARGE_P: // LARGE_P
      case symbol_kind::S_LAST_P: // LAST_P
      case symbol_kind::S_LATERAL_P: // LATERAL_P
      case symbol_kind::S_LEADING: // LEADING
      case symbol_kind::S_LEAKPROOF: // LEAKPROOF
      case symbol_kind::S_LEAST: // LEAST
      case symbol_kind::S_LEFT: // LEFT
      case symbol_kind::S_LEVEL: // LEVEL
      case symbol_kind::S_LIKE: // LIKE
      case symbol_kind::S_LIMIT: // LIMIT
      case symbol_kind::S_LISTEN: // LISTEN
      case symbol_kind::S_LOAD: // LOAD
      case symbol_kind::S_LOCAL: // LOCAL
      case symbol_kind::S_LOCALTIME: // LOCALTIME
      case symbol_kind::S_LOCALTIMESTAMP: // LOCALTIMESTAMP
      case symbol_kind::S_LOCATION: // LOCATION
      case symbol_kind::S_LOCK_P: // LOCK_P
      case symbol_kind::S_LOCKED: // LOCKED
      case symbol_kind::S_LOGGED: // LOGGED
      case symbol_kind::S_MAPPING: // MAPPING
      case symbol_kind::S_MATCH: // MATCH
      case symbol_kind::S_MATCHED: // MATCHED
      case symbol_kind::S_MATERIALIZED: // MATERIALIZED
      case symbol_kind::S_MAXVALUE: // MAXVALUE
      case symbol_kind::S_MERGE: // MERGE
      case symbol_kind::S_MERGE_ACTION: // MERGE_ACTION
      case symbol_kind::S_METHOD: // METHOD
      case symbol_kind::S_MINUTE_P: // MINUTE_P
      case symbol_kind::S_MINVALUE: // MINVALUE
      case symbol_kind::S_MODE: // MODE
      case symbol_kind::S_MONTH_P: // MONTH_P
      case symbol_kind::S_MOVE: // MOVE
      case symbol_kind::S_NAME_P: // NAME_P
      case symbol_kind::S_NAMES: // NAMES
      case symbol_kind::S_NATIONAL: // NATIONAL
      case symbol_kind::S_NATURAL: // NATURAL
      case symbol_kind::S_NCHAR: // NCHAR
      case symbol_kind::S_NESTED: // NESTED
      case symbol_kind::S_NEW: // NEW
      case symbol_kind::S_NEXT: // NEXT
      case symbol_kind::S_NFC: // NFC
      case symbol_kind::S_NFD: // NFD
      case symbol_kind::S_NFKC: // NFKC
      case symbol_kind::S_NFKD: // NFKD
      case symbol_kind::S_NO: // NO
      case symbol_kind::S_NONE: // NONE
      case symbol_kind::S_NORMALIZE: // NORMALIZE
      case symbol_kind::S_NORMALIZED: // NORMALIZED
      case symbol_kind::S_NOT: // NOT
      case symbol_kind::S_NOTHING: // NOTHING
      case symbol_kind::S_NOTIFY: // NOTIFY
      case symbol_kind::S_NOTNULL: // NOTNULL
      case symbol_kind::S_NOWAIT: // NOWAIT
      case symbol_kind::S_NULL_P: // NULL_P
      case symbol_kind::S_NULLIF: // NULLIF
      case symbol_kind::S_NULLS_P: // NULLS_P
      case symbol_kind::S_NUMERIC: // NUMERIC
      case symbol_kind::S_OBJECT_P: // OBJECT_P
      case symbol_kind::S_OBJECTS_P: // OBJECTS_P
      case symbol_kind::S_OF: // OF
      case symbol_kind::S_OFF: // OFF
      case symbol_kind::S_OFFSET: // OFFSET
      case symbol_kind::S_OIDS: // OIDS
      case symbol_kind::S_OLD: // OLD
      case symbol_kind::S_OMIT: // OMIT
      case symbol_kind::S_ON: // ON
      case symbol_kind::S_ONLY: // ONLY
      case symbol_kind::S_OPERATOR: // OPERATOR
      case symbol_kind::S_OPTION: // OPTION
      case symbol_kind::S_OPTIONS: // OPTIONS
      case symbol_kind::S_OR: // OR
      case symbol_kind::S_ORDER: // ORDER
      case symbol_kind::S_ORDINALITY: // ORDINALITY
      case symbol_kind::S_OTHERS: // OTHERS
      case symbol_kind::S_OUT_P: // OUT_P
      case symbol_kind::S_OUTER_P: // OUTER_P
      case symbol_kind::S_OVER: // OVER
      case symbol_kind::S_OVERLAPS: // OVERLAPS
      case symbol_kind::S_OVERLAY: // OVERLAY
      case symbol_kind::S_OVERRIDING: // OVERRIDING
      case symbol_kind::S_OWNED: // OWNED
      case symbol_kind::S_OWNER: // OWNER
      case symbol_kind::S_PARALLEL: // PARALLEL
      case symbol_kind::S_PARAMETER: // PARAMETER
      case symbol_kind::S_PARSER: // PARSER
      case symbol_kind::S_PARTIAL: // PARTIAL
      case symbol_kind::S_PARTITION: // PARTITION
      case symbol_kind::S_PASSING: // PASSING
      case symbol_kind::S_PASSWORD: // PASSWORD
      case symbol_kind::S_PATH: // PATH
      case symbol_kind::S_PERIOD: // PERIOD
      case symbol_kind::S_PLACING: // PLACING
      case symbol_kind::S_PLAN: // PLAN
      case symbol_kind::S_PLANS: // PLANS
      case symbol_kind::S_POLICY: // POLICY
      case symbol_kind::S_POSITION: // POSITION
      case symbol_kind::S_PRECEDING: // PRECEDING
      case symbol_kind::S_PRECISION: // PRECISION
      case symbol_kind::S_PRESERVE: // PRESERVE
      case symbol_kind::S_PREPARE: // PREPARE
      case symbol_kind::S_PREPARED: // PREPARED
      case symbol_kind::S_PRIMARY: // PRIMARY
      case symbol_kind::S_PRIOR: // PRIOR
      case symbol_kind::S_PRIVILEGES: // PRIVILEGES
      case symbol_kind::S_PROCEDURAL: // PROCEDURAL
      case symbol_kind::S_PROCEDURE: // PROCEDURE
      case symbol_kind::S_PROCEDURES: // PROCEDURES
      case symbol_kind::S_PROGRAM: // PROGRAM
      case symbol_kind::S_PUBLICATION: // PUBLICATION
      case symbol_kind::S_QUOTES: // QUOTES
      case symbol_kind::S_EXTEND: // EXTEND
      case symbol_kind::S_RANGE: // RANGE
      case symbol_kind::S_READ: // READ
      case symbol_kind::S_REAL: // REAL
      case symbol_kind::S_REASSIGN: // REASSIGN
      case symbol_kind::S_RECURSIVE: // RECURSIVE
      case symbol_kind::S_REF_P: // REF_P
      case symbol_kind::S_REFERENCES: // REFERENCES
      case symbol_kind::S_REFERENCING: // REFERENCING
      case symbol_kind::S_REFRESH: // REFRESH
      case symbol_kind::S_REINDEX: // REINDEX
      case symbol_kind::S_RELATIVE_P: // RELATIVE_P
      case symbol_kind::S_RELEASE: // RELEASE
      case symbol_kind::S_RENAME: // RENAME
      case symbol_kind::S_REPEATABLE: // REPEATABLE
      case symbol_kind::S_REPLACE: // REPLACE
      case symbol_kind::S_REPLICA: // REPLICA
      case symbol_kind::S_RESET: // RESET
      case symbol_kind::S_RESTART: // RESTART
      case symbol_kind::S_RESTRICT: // RESTRICT
      case symbol_kind::S_RETURN: // RETURN
      case symbol_kind::S_RETURNING: // RETURNING
      case symbol_kind::S_RETURNS: // RETURNS
      case symbol_kind::S_REVOKE: // REVOKE
      case symbol_kind::S_RIGHT: // RIGHT
      case symbol_kind::S_ROLE: // ROLE
      case symbol_kind::S_ROLLBACK: // ROLLBACK
      case symbol_kind::S_ROLLUP: // ROLLUP
      case symbol_kind::S_ROUTINE: // ROUTINE
      case symbol_kind::S_ROUTINES: // ROUTINES
      case symbol_kind::S_ROW: // ROW
      case symbol_kind::S_ROWS: // ROWS
      case symbol_kind::S_RULE: // RULE
      case symbol_kind::S_SAVEPOINT: // SAVEPOINT
      case symbol_kind::S_SCALAR: // SCALAR
      case symbol_kind::S_SCHEMA: // SCHEMA
      case symbol_kind::S_SCHEMAS: // SCHEMAS
      case symbol_kind::S_SCROLL: // SCROLL
      case symbol_kind::S_SEARCH: // SEARCH
      case symbol_kind::S_SECOND_P: // SECOND_P
      case symbol_kind::S_SECURITY: // SECURITY
      case symbol_kind::S_SELECT: // SELECT
      case symbol_kind::S_SEQUENCE: // SEQUENCE
      case symbol_kind::S_SEQUENCES: // SEQUENCES
      case symbol_kind::S_SERIALIZABLE: // SERIALIZABLE
      case symbol_kind::S_SERVER: // SERVER
      case symbol_kind::S_SESSION: // SESSION
      case symbol_kind::S_SESSION_USER: // SESSION_USER
      case symbol_kind::S_SET: // SET
      case symbol_kind::S_SETS: // SETS
      case symbol_kind::S_SETOF: // SETOF
      case symbol_kind::S_SHARE: // SHARE
      case symbol_kind::S_SHOW: // SHOW
      case symbol_kind::S_SIMILAR: // SIMILAR
      case symbol_kind::S_SIMPLE: // SIMPLE
      case symbol_kind::S_SKIP: // SKIP
      case symbol_kind::S_SMALLINT: // SMALLINT
      case symbol_kind::S_SNAPSHOT: // SNAPSHOT
      case symbol_kind::S_SOME: // SOME
      case symbol_kind::S_SOURCE: // SOURCE
      case symbol_kind::S_SQL_P: // SQL_P
      case symbol_kind::S_STABLE: // STABLE
      case symbol_kind::S_STANDALONE_P: // STANDALONE_P
      case symbol_kind::S_START: // START
      case symbol_kind::S_STATEMENT: // STATEMENT
      case symbol_kind::S_STATISTICS: // STATISTICS
      case symbol_kind::S_STDIN: // STDIN
      case symbol_kind::S_STDOUT: // STDOUT
      case symbol_kind::S_STORAGE: // STORAGE
      case symbol_kind::S_STORED: // STORED
      case symbol_kind::S_STRICT_P: // STRICT_P
      case symbol_kind::S_STRING_P: // STRING_P
      case symbol_kind::S_STRIP_P: // STRIP_P
      case symbol_kind::S_SUBSCRIPTION: // SUBSCRIPTION
      case symbol_kind::S_SUBSTRING: // SUBSTRING
      case symbol_kind::S_SUPPORT: // SUPPORT
      case symbol_kind::S_SYMMETRIC: // SYMMETRIC
      case symbol_kind::S_SYSID: // SYSID
      case symbol_kind::S_SYSTEM_P: // SYSTEM_P
      case symbol_kind::S_SYSTEM_USER: // SYSTEM_USER
      case symbol_kind::S_TABLE: // TABLE
      case symbol_kind::S_TABLES: // TABLES
      case symbol_kind::S_TABLESAMPLE: // TABLESAMPLE
      case symbol_kind::S_TABLESPACE: // TABLESPACE
      case symbol_kind::S_TARGET: // TARGET
      case symbol_kind::S_TEMP: // TEMP
      case symbol_kind::S_TEMPLATE: // TEMPLATE
      case symbol_kind::S_TEMPORARY: // TEMPORARY
      case symbol_kind::S_TEXT_P: // TEXT_P
      case symbol_kind::S_THEN: // THEN
      case symbol_kind::S_TIES: // TIES
      case symbol_kind::S_TIME: // TIME
      case symbol_kind::S_TIMESTAMP: // TIMESTAMP
      case symbol_kind::S_TO: // TO
      case symbol_kind::S_TRAILING: // TRAILING
      case symbol_kind::S_TRANSACTION: // TRANSACTION
      case symbol_kind::S_TRANSFORM: // TRANSFORM
      case symbol_kind::S_TREAT: // TREAT
      case symbol_kind::S_TRIGGER: // TRIGGER
      case symbol_kind::S_TRIM: // TRIM
      case symbol_kind::S_TRUE_P: // TRUE_P
      case symbol_kind::S_TRUNCATE: // TRUNCATE
      case symbol_kind::S_TRUSTED: // TRUSTED
      case symbol_kind::S_TYPE_P: // TYPE_P
      case symbol_kind::S_TYPES_P: // TYPES_P
      case symbol_kind::S_UESCAPE: // UESCAPE
      case symbol_kind::S_UNBOUNDED: // UNBOUNDED
      case symbol_kind::S_UNCONDITIONAL: // UNCONDITIONAL
      case symbol_kind::S_UNCOMMITTED: // UNCOMMITTED
      case symbol_kind::S_UNENCRYPTED: // UNENCRYPTED
      case symbol_kind::S_UNION: // UNION
      case symbol_kind::S_UNIQUE: // UNIQUE
      case symbol_kind::S_UNKNOWN: // UNKNOWN
      case symbol_kind::S_UNLISTEN: // UNLISTEN
      case symbol_kind::S_UNLOGGED: // UNLOGGED
      case symbol_kind::S_UNTIL: // UNTIL
      case symbol_kind::S_UPDATE: // UPDATE
      case symbol_kind::S_USER: // USER
      case symbol_kind::S_USING: // USING
      case symbol_kind::S_VACUUM: // VACUUM
      case symbol_kind::S_VALID: // VALID
      case symbol_kind::S_VALIDATE: // VALIDATE
      case symbol_kind::S_VALIDATOR: // VALIDATOR
      case symbol_kind::S_VALUE_P: // VALUE_P
      case symbol_kind::S_VALUES: // VALUES
      case symbol_kind::S_VARCHAR: // VARCHAR
      case symbol_kind::S_VARIADIC: // VARIADIC
      case symbol_kind::S_VARYING: // VARYING
      case symbol_kind::S_VERBOSE: // VERBOSE
      case symbol_kind::S_VERSION_P: // VERSION_P
      case symbol_kind::S_VIEW: // VIEW
      case symbol_kind::S_VIEWS: // VIEWS
      case symbol_kind::S_VIRTUAL: // VIRTUAL
      case symbol_kind::S_VOLATILE: // VOLATILE
      case symbol_kind::S_WHEN: // WHEN
      case symbol_kind::S_WHERE: // WHERE
      case symbol_kind::S_WHITESPACE_P: // WHITESPACE_P
      case symbol_kind::S_WINDOW: // WINDOW
      case symbol_kind::S_WITH: // WITH
      case symbol_kind::S_WITHIN: // WITHIN
      case symbol_kind::S_WITHOUT: // WITHOUT
      case symbol_kind::S_WORK: // WORK
      case symbol_kind::S_WRAPPER: // WRAPPER
      case symbol_kind::S_WRITE: // WRITE
      case symbol_kind::S_XML_P: // XML_P
      case symbol_kind::S_XMLATTRIBUTES: // XMLATTRIBUTES
      case symbol_kind::S_XMLCONCAT: // XMLCONCAT
      case symbol_kind::S_XMLELEMENT: // XMLELEMENT
      case symbol_kind::S_XMLEXISTS: // XMLEXISTS
      case symbol_kind::S_XMLFOREST: // XMLFOREST
      case symbol_kind::S_XMLNAMESPACES: // XMLNAMESPACES
      case symbol_kind::S_XMLPARSE: // XMLPARSE
      case symbol_kind::S_XMLPI: // XMLPI
      case symbol_kind::S_XMLROOT: // XMLROOT
      case symbol_kind::S_XMLSERIALIZE: // XMLSERIALIZE
      case symbol_kind::S_XMLTABLE: // XMLTABLE
      case symbol_kind::S_YEAR_P: // YEAR_P
      case symbol_kind::S_YES_P: // YES_P
      case symbol_kind::S_ZONE: // ZONE
      case symbol_kind::S_copy_file_name: // copy_file_name
      case symbol_kind::S_copy_delimiter: // copy_delimiter
      case symbol_kind::S_var_name: // var_name
      case symbol_kind::S_NonReservedWord: // NonReservedWord
      case symbol_kind::S_relation_expr: // relation_expr
      case symbol_kind::S_any_operator: // any_operator
      case symbol_kind::S_qual_Op: // qual_Op
      case symbol_kind::S_all_Op: // all_Op
      case symbol_kind::S_ColId: // ColId
      case symbol_kind::S_type_function_name: // type_function_name
      case symbol_kind::S_type_func_name_keyword: // type_func_name_keyword
      case symbol_kind::S_ColLabel: // ColLabel
      case symbol_kind::S_BareColLabel: // BareColLabel
      case symbol_kind::S_reserved_keyword: // reserved_keyword
      case symbol_kind::S_unreserved_keyword: // unreserved_keyword
      case symbol_kind::S_col_name_keyword: // col_name_keyword
      case symbol_kind::S_qualified_name: // qualified_name
      case symbol_kind::S_name: // name
      case symbol_kind::S_attr_name: // attr_name
      case symbol_kind::S_func_name: // func_name
      case symbol_kind::S_insert_target: // insert_target
      case symbol_kind::S_insert_column_item: // insert_column_item
        value.copy< std::string > (that.value);
        break;

      case symbol_kind::S_in_expr: // in_expr
        value.copy< std::variant<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>, std::shared_ptr<lingodb::ast::SubqueryExpression>> > (that.value);
        break;

      case symbol_kind::S_when_clause_list: // when_clause_list
        value.copy< std::vector<lingodb::ast::CaseExpression::CaseCheck> > (that.value);
        break;

      case symbol_kind::S_copy_options: // copy_options
      case symbol_kind::S_copy_opt_list: // copy_opt_list
        value.copy< std::vector<std::pair<std::string, std::string>> > (that.value);
        break;

      case symbol_kind::S_stmtmulti: // stmtmulti
        value.copy< std::vector<std::shared_ptr<lingodb::ast::AstNode>> > (that.value);
        break;

      case symbol_kind::S_ColQualList: // ColQualList
        value.copy< std::vector<std::shared_ptr<lingodb::ast::Constraint>> > (that.value);
        break;

      case symbol_kind::S_func_expr_list: // func_expr_list
        value.copy< std::vector<std::shared_ptr<lingodb::ast::FunctionExpression>> > (that.value);
        break;

      case symbol_kind::S_sortby_list: // sortby_list
        value.copy< std::vector<std::shared_ptr<lingodb::ast::OrderByElement>> > (that.value);
        break;

      case symbol_kind::S_var_list: // var_list
      case symbol_kind::S_group_by_list: // group_by_list
      case symbol_kind::S_group_by_list_with_alias: // group_by_list_with_alias
      case symbol_kind::S_rollup_clause: // rollup_clause
      case symbol_kind::S_columnref_list: // columnref_list
      case symbol_kind::S_func_arg_list_opt: // func_arg_list_opt
      case symbol_kind::S_func_arg_list: // func_arg_list
      case symbol_kind::S_expr_list: // expr_list
      case symbol_kind::S_expr_list_with_alias: // expr_list_with_alias
      case symbol_kind::S_extract_list: // extract_list
      case symbol_kind::S_substr_list: // substr_list
      case symbol_kind::S_target_list: // target_list
      case symbol_kind::S_opt_partition_clause: // opt_partition_clause
        value.copy< std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > (that.value);
        break;

      case symbol_kind::S_OptTableElementList: // OptTableElementList
      case symbol_kind::S_TableElementList: // TableElementList
        value.copy< std::vector<std::shared_ptr<lingodb::ast::TableElement>> > (that.value);
        break;

      case symbol_kind::S_opt_type_modifiers: // opt_type_modifiers
      case symbol_kind::S_type_modifiers: // type_modifiers
        value.copy< std::vector<std::shared_ptr<lingodb::ast::Value>> > (that.value);
        break;

      case symbol_kind::S_opt_name_list: // opt_name_list
      case symbol_kind::S_name_list: // name_list
      case symbol_kind::S_insert_column_list: // insert_column_list
        value.copy< std::vector<std::string> > (that.value);
        break;

      case symbol_kind::S_INTEGER_VALUE: // "integer_value"
        value.copy< uint64_t > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    return *this;
  }

  parser::stack_symbol_type&
  parser::stack_symbol_type::operator= (stack_symbol_type& that)
  {
    state = that.state;
    switch (that.kind ())
    {
      case symbol_kind::S_distinct_clause: // distinct_clause
      case symbol_kind::S_set_quantifier: // set_quantifier
      case symbol_kind::S_opt_asymmetric: // opt_asymmetric
      case symbol_kind::S_OptTemp: // OptTemp
      case symbol_kind::S_opt_varying: // opt_varying
        value.move< bool > (that.value);
        break;

      case symbol_kind::S_ICONST: // ICONST
        value.move< int > (that.value);
        break;

      case symbol_kind::S_when_clause: // when_clause
        value.move< lingodb::ast::CaseExpression::CaseCheck > (that.value);
        break;

      case symbol_kind::S_basicComparisonType: // basicComparisonType
        value.move< lingodb::ast::ExpressionType > (that.value);
        break;

      case symbol_kind::S_join_type: // join_type
        value.move< lingodb::ast::JoinType > (that.value);
        break;

      case symbol_kind::S_Type: // Type
      case symbol_kind::S_SimpleType: // SimpleType
      case symbol_kind::S_ConstTypename: // ConstTypename
      case symbol_kind::S_Numeric_with_opt_lenghth: // Numeric_with_opt_lenghth
      case symbol_kind::S_Numeric: // Numeric
      case symbol_kind::S_Character: // Character
      case symbol_kind::S_ConstCharacter: // ConstCharacter
      case symbol_kind::S_CharacterWithLength: // CharacterWithLength
      case symbol_kind::S_CharacterWithoutLength: // CharacterWithoutLength
      case symbol_kind::S_character: // character
      case symbol_kind::S_ConstDatetime: // ConstDatetime
      case symbol_kind::S_ConstInterval: // ConstInterval
      case symbol_kind::S_Typename: // Typename
        value.move< lingodb::ast::LogicalTypeWithMods > (that.value);
        break;

      case symbol_kind::S_opt_nulls_order: // opt_nulls_order
        value.move< lingodb::ast::OrderByNullType > (that.value);
        break;

      case symbol_kind::S_opt_asc_desc: // opt_asc_desc
        value.move< lingodb::ast::OrderType > (that.value);
        break;

      case symbol_kind::S_sub_type: // sub_type
        value.move< lingodb::ast::SubqueryType > (that.value);
        break;

      case symbol_kind::S_join_qual: // join_qual
        value.move< lingodb::ast::jointCondOrUsingCols > (that.value);
        break;

      case symbol_kind::S_opt_sort_clause: // opt_sort_clause
        value.move< std::optional<std::shared_ptr<lingodb::ast::OrderByModifier>> > (that.value);
        break;

      case symbol_kind::S_case_arg: // case_arg
        value.move< std::optional<std::shared_ptr<lingodb::ast::ParsedExpression>> > (that.value);
        break;

      case symbol_kind::S_opt_select_limit: // opt_select_limit
        value.move< std::optional<std::shared_ptr<lingodb::ast::ResultModifier>> > (that.value);
        break;

      case symbol_kind::S_opt_interval: // opt_interval
        value.move< std::optional<std::string> > (that.value);
        break;

      case symbol_kind::S_copy_opt_item: // copy_opt_item
        value.move< std::pair<std::string, std::string> > (that.value);
        break;

      case symbol_kind::S_alias_clause: // alias_clause
      case symbol_kind::S_opt_alias_clause: // opt_alias_clause
        value.move< std::pair<std::string, std::vector<std::string>> > (that.value);
        break;

      case symbol_kind::S_extract_arg: // extract_arg
        value.move< std::shared_ptr<ast::ConstantExpression> > (that.value);
        break;

      case symbol_kind::S_CopyStmt: // CopyStmt
        value.move< std::shared_ptr<ast::CopyNode> > (that.value);
        break;

      case symbol_kind::S_VariableSetStmt: // VariableSetStmt
      case symbol_kind::S_set_rest: // set_rest
      case symbol_kind::S_generic_set: // generic_set
      case symbol_kind::S_set_rest_more: // set_rest_more
        value.move< std::shared_ptr<ast::SetVariableStatement> > (that.value);
        break;

      case symbol_kind::S_agg_expr: // agg_expr
        value.move< std::shared_ptr<lingodb::ast::AggregationNode> > (that.value);
        break;

      case symbol_kind::S_toplevel_stmt: // toplevel_stmt
      case symbol_kind::S_stmt: // stmt
        value.move< std::shared_ptr<lingodb::ast::AstNode> > (that.value);
        break;

      case symbol_kind::S_and_a_expr: // and_a_expr
      case symbol_kind::S_or_a_expr: // or_a_expr
        value.move< std::shared_ptr<lingodb::ast::ConjunctionExpression> > (that.value);
        break;

      case symbol_kind::S_ColConstraint: // ColConstraint
      case symbol_kind::S_ColConstraintElem: // ColConstraintElem
      case symbol_kind::S_ConstraintElem: // ConstraintElem
        value.move< std::shared_ptr<lingodb::ast::Constraint> > (that.value);
        break;

      case symbol_kind::S_CreateStmt: // CreateStmt
        value.move< std::shared_ptr<lingodb::ast::CreateNode> > (that.value);
        break;

      case symbol_kind::S_from_list: // from_list
        value.move< std::shared_ptr<lingodb::ast::CrossProductRef> > (that.value);
        break;

      case symbol_kind::S_values_clause: // values_clause
        value.move< std::shared_ptr<lingodb::ast::ExpressionListRef> > (that.value);
        break;

      case symbol_kind::S_func_application: // func_application
      case symbol_kind::S_func_expr: // func_expr
      case symbol_kind::S_func_expr_common_subexpr: // func_expr_common_subexpr
        value.move< std::shared_ptr<lingodb::ast::FunctionExpression> > (that.value);
        break;

      case symbol_kind::S_group_clause: // group_clause
      case symbol_kind::S_group_clause_with_alias: // group_clause_with_alias
        value.move< std::shared_ptr<lingodb::ast::GroupByNode> > (that.value);
        break;

      case symbol_kind::S_InsertStmt: // InsertStmt
      case symbol_kind::S_insert_rest: // insert_rest
        value.move< std::shared_ptr<lingodb::ast::InsertNode> > (that.value);
        break;

      case symbol_kind::S_select_limit: // select_limit
      case symbol_kind::S_limit_clause: // limit_clause
        value.move< std::shared_ptr<lingodb::ast::LimitModifier> > (that.value);
        break;

      case symbol_kind::S_sortby: // sortby
        value.move< std::shared_ptr<lingodb::ast::OrderByElement> > (that.value);
        break;

      case symbol_kind::S_sort_clause: // sort_clause
        value.move< std::shared_ptr<lingodb::ast::OrderByModifier> > (that.value);
        break;

      case symbol_kind::S_var_value: // var_value
      case symbol_kind::S_opt_boolean_or_string: // opt_boolean_or_string
      case symbol_kind::S_NonReservedWord_or_Sconst: // NonReservedWord_or_Sconst
      case symbol_kind::S_group_by_item: // group_by_item
      case symbol_kind::S_group_by_item_with_alias: // group_by_item_with_alias
      case symbol_kind::S_having_clause: // having_clause
      case symbol_kind::S_offset_clause: // offset_clause
      case symbol_kind::S_select_limit_value: // select_limit_value
      case symbol_kind::S_select_offset_value: // select_offset_value
      case symbol_kind::S_where_clause: // where_clause
      case symbol_kind::S_a_expr: // a_expr
      case symbol_kind::S_b_expr: // b_expr
      case symbol_kind::S_c_expr: // c_expr
      case symbol_kind::S_case_expr: // case_expr
      case symbol_kind::S_case_default: // case_default
      case symbol_kind::S_columnref: // columnref
      case symbol_kind::S_func_arg_expr: // func_arg_expr
      case symbol_kind::S_cast_expr: // cast_expr
      case symbol_kind::S_indirection: // indirection
      case symbol_kind::S_indirection_el: // indirection_el
      case symbol_kind::S_target_el: // target_el
      case symbol_kind::S_NumericOnly: // NumericOnly
      case symbol_kind::S_AexprConst: // AexprConst
      case symbol_kind::S_Iconst: // Iconst
      case symbol_kind::S_SignedIconst: // SignedIconst
      case symbol_kind::S_Fconst: // Fconst
      case symbol_kind::S_Sconst: // Sconst
      case symbol_kind::S_Bconst: // Bconst
        value.move< std::shared_ptr<lingodb::ast::ParsedExpression> > (that.value);
        break;

      case symbol_kind::S_pipe_start: // pipe_start
      case symbol_kind::S_pipe_operator: // pipe_operator
        value.move< std::shared_ptr<lingodb::ast::PipeOperator> > (that.value);
        break;

      case symbol_kind::S_select_with_parens: // select_with_parens
      case symbol_kind::S_select_no_parens: // select_no_parens
      case symbol_kind::S_select_clause: // select_clause
      case symbol_kind::S_simple_select: // simple_select
      case symbol_kind::S_with_clause: // with_clause
      case symbol_kind::S_cte_list: // cte_list
      case symbol_kind::S_common_table_expr: // common_table_expr
        value.move< std::shared_ptr<lingodb::ast::QueryNode> > (that.value);
        break;

      case symbol_kind::S_set_list: // set_list
        value.move< std::shared_ptr<lingodb::ast::SetColumnExpression> > (that.value);
        break;

      case symbol_kind::S_TableElement: // TableElement
      case symbol_kind::S_TableConstraint: // TableConstraint
      case symbol_kind::S_columnElement: // columnElement
        value.move< std::shared_ptr<lingodb::ast::TableElement> > (that.value);
        break;

      case symbol_kind::S_SelectStmt: // SelectStmt
      case symbol_kind::S_PipeSQLStmt: // PipeSQLStmt
      case symbol_kind::S_classic_select_and_pipe_sql_with_parens: // classic_select_and_pipe_sql_with_parens
      case symbol_kind::S_pipe_sql_with_parens: // pipe_sql_with_parens
      case symbol_kind::S_pipe_sql_no_parens: // pipe_sql_no_parens
      case symbol_kind::S_pipe_or_select_clause: // pipe_or_select_clause
      case symbol_kind::S_PreparableStmt: // PreparableStmt
        value.move< std::shared_ptr<lingodb::ast::TableProducer> > (that.value);
        break;

      case symbol_kind::S_opt_from_clause: // opt_from_clause
      case symbol_kind::S_from_clause: // from_clause
      case symbol_kind::S_table_ref: // table_ref
      case symbol_kind::S_joined_table: // joined_table
        value.move< std::shared_ptr<lingodb::ast::TableRef> > (that.value);
        break;

      case symbol_kind::S_opt_target_list: // opt_target_list
        value.move< std::shared_ptr<lingodb::ast::TargetList> > (that.value);
        break;

      case symbol_kind::S_type_modifier: // type_modifier
        value.move< std::shared_ptr<lingodb::ast::Value> > (that.value);
        break;

      case symbol_kind::S_window_func_expr: // window_func_expr
      case symbol_kind::S_over_clause: // over_clause
      case symbol_kind::S_window_specification: // window_specification
        value.move< std::shared_ptr<lingodb::ast::WindowExpression> > (that.value);
        break;

      case symbol_kind::S_opt_frame_clause: // opt_frame_clause
      case symbol_kind::S_frame_extent: // frame_extent
      case symbol_kind::S_frame_bound: // frame_bound
        value.move< std::shared_ptr<lingodb::ast::WindowFrame> > (that.value);
        break;

      case symbol_kind::S_FCONST: // FCONST
      case symbol_kind::S_IDENT: // IDENT
      case symbol_kind::S_IDENTIFIER: // "identifier"
      case symbol_kind::S_STRING_VALUE: // STRING_VALUE
      case symbol_kind::S_BIT_VALUE: // "bit_string"
      case symbol_kind::S_HEX_VALUE: // "hex_string"
      case symbol_kind::S_NATIONAL_VALUE: // "nat_string"
      case symbol_kind::S_PERCENT: // "%"
      case symbol_kind::S_PLUS: // "+"
      case symbol_kind::S_SLASH: // "/"
      case symbol_kind::S_STAR: // "*"
      case symbol_kind::S_MINUS: // "-"
      case symbol_kind::S_EQUAL: // "="
      case symbol_kind::S_NOT_EQUAL: // "<>"
      case symbol_kind::S_LESS_EQUAL: // "<="
      case symbol_kind::S_LESS: // "<"
      case symbol_kind::S_GREATER_EQUAL: // ">="
      case symbol_kind::S_GREATER: // ">"
      case symbol_kind::S_UIDENT: // UIDENT
      case symbol_kind::S_SCONST: // SCONST
      case symbol_kind::S_USCONST: // USCONST
      case symbol_kind::S_BCONST: // BCONST
      case symbol_kind::S_XCONST: // XCONST
      case symbol_kind::S_Op: // Op
      case symbol_kind::S_TYPECAST: // TYPECAST
      case symbol_kind::S_ABORT_P: // ABORT_P
      case symbol_kind::S_ABSENT: // ABSENT
      case symbol_kind::S_ABSOLUTE_P: // ABSOLUTE_P
      case symbol_kind::S_ACCESS: // ACCESS
      case symbol_kind::S_ACTION: // ACTION
      case symbol_kind::S_ADD_P: // ADD_P
      case symbol_kind::S_ADMIN: // ADMIN
      case symbol_kind::S_AFTER: // AFTER
      case symbol_kind::S_AGGREGATE: // AGGREGATE
      case symbol_kind::S_ALL: // ALL
      case symbol_kind::S_ALSO: // ALSO
      case symbol_kind::S_ALTER: // ALTER
      case symbol_kind::S_ALWAYS: // ALWAYS
      case symbol_kind::S_ANALYSE: // ANALYSE
      case symbol_kind::S_ANALYZE: // ANALYZE
      case symbol_kind::S_AND: // AND
      case symbol_kind::S_ANY: // ANY
      case symbol_kind::S_ARRAY: // ARRAY
      case symbol_kind::S_AS: // AS
      case symbol_kind::S_ASC: // ASC
      case symbol_kind::S_ASENSITIVE: // ASENSITIVE
      case symbol_kind::S_ASSERTION: // ASSERTION
      case symbol_kind::S_ASSIGNMENT: // ASSIGNMENT
      case symbol_kind::S_ASYMMETRIC: // ASYMMETRIC
      case symbol_kind::S_ATOMIC: // ATOMIC
      case symbol_kind::S_AT: // AT
      case symbol_kind::S_ATTACH: // ATTACH
      case symbol_kind::S_ATTRIBUTE: // ATTRIBUTE
      case symbol_kind::S_AUTHORIZATION: // AUTHORIZATION
      case symbol_kind::S_BACKWARD: // BACKWARD
      case symbol_kind::S_BEFORE: // BEFORE
      case symbol_kind::S_BEGIN_P: // BEGIN_P
      case symbol_kind::S_BETWEEN: // BETWEEN
      case symbol_kind::S_BIGINT: // BIGINT
      case symbol_kind::S_BINARY: // BINARY
      case symbol_kind::S_BIT: // BIT
      case symbol_kind::S_BOOLEAN_P: // BOOLEAN_P
      case symbol_kind::S_BOTH: // BOTH
      case symbol_kind::S_BREADTH: // BREADTH
      case symbol_kind::S_BY: // BY
      case symbol_kind::S_CACHE: // CACHE
      case symbol_kind::S_CALL: // CALL
      case symbol_kind::S_CALLED: // CALLED
      case symbol_kind::S_CASCADE: // CASCADE
      case symbol_kind::S_CASCADED: // CASCADED
      case symbol_kind::S_CASE: // CASE
      case symbol_kind::S_CAST: // CAST
      case symbol_kind::S_CATALOG_P: // CATALOG_P
      case symbol_kind::S_CHAIN: // CHAIN
      case symbol_kind::S_CHAR_P: // CHAR_P
      case symbol_kind::S_CHARACTER: // CHARACTER
      case symbol_kind::S_CHARACTERISTICS: // CHARACTERISTICS
      case symbol_kind::S_CHECK: // CHECK
      case symbol_kind::S_CHECKPOINT: // CHECKPOINT
      case symbol_kind::S_CLASS: // CLASS
      case symbol_kind::S_CLOSE: // CLOSE
      case symbol_kind::S_CLUSTER: // CLUSTER
      case symbol_kind::S_COALESCE: // COALESCE
      case symbol_kind::S_COLLATE: // COLLATE
      case symbol_kind::S_COLLATION: // COLLATION
      case symbol_kind::S_COLUMN: // COLUMN
      case symbol_kind::S_COLUMNS: // COLUMNS
      case symbol_kind::S_COMMENT: // COMMENT
      case symbol_kind::S_COMMENTS: // COMMENTS
      case symbol_kind::S_COMMIT: // COMMIT
      case symbol_kind::S_COMMITTED: // COMMITTED
      case symbol_kind::S_COMPRESSION: // COMPRESSION
      case symbol_kind::S_CONCURRENTLY: // CONCURRENTLY
      case symbol_kind::S_CONDITIONAL: // CONDITIONAL
      case symbol_kind::S_CONFIGURATION: // CONFIGURATION
      case symbol_kind::S_CONFLICT: // CONFLICT
      case symbol_kind::S_CONNECTION: // CONNECTION
      case symbol_kind::S_CONSTRAINT: // CONSTRAINT
      case symbol_kind::S_CONSTRAINTS: // CONSTRAINTS
      case symbol_kind::S_CONTENT_P: // CONTENT_P
      case symbol_kind::S_CONTINUE_P: // CONTINUE_P
      case symbol_kind::S_CONVERSION_P: // CONVERSION_P
      case symbol_kind::S_COPY: // COPY
      case symbol_kind::S_COST: // COST
      case symbol_kind::S_CREATE: // CREATE
      case symbol_kind::S_CROSS: // CROSS
      case symbol_kind::S_CSV: // CSV
      case symbol_kind::S_CUBE: // CUBE
      case symbol_kind::S_CURRENT_P: // CURRENT_P
      case symbol_kind::S_CURRENT_CATALOG: // CURRENT_CATALOG
      case symbol_kind::S_CURRENT_DATE: // CURRENT_DATE
      case symbol_kind::S_CURRENT_ROLE: // CURRENT_ROLE
      case symbol_kind::S_CURRENT_SCHEMA: // CURRENT_SCHEMA
      case symbol_kind::S_CURRENT_TIME: // CURRENT_TIME
      case symbol_kind::S_CURRENT_TIMESTAMP: // CURRENT_TIMESTAMP
      case symbol_kind::S_CURRENT_USER: // CURRENT_USER
      case symbol_kind::S_CURSOR: // CURSOR
      case symbol_kind::S_CYCLE: // CYCLE
      case symbol_kind::S_DATA_P: // DATA_P
      case symbol_kind::S_DATABASE: // DATABASE
      case symbol_kind::S_DAY_P: // DAY_P
      case symbol_kind::S_DEALLOCATE: // DEALLOCATE
      case symbol_kind::S_DEC: // DEC
      case symbol_kind::S_DECIMAL_P: // DECIMAL_P
      case symbol_kind::S_DECLARE: // DECLARE
      case symbol_kind::S_DEFAULT: // DEFAULT
      case symbol_kind::S_DEFAULTS: // DEFAULTS
      case symbol_kind::S_DATE_P: // DATE_P
      case symbol_kind::S_DEFERRABLE: // DEFERRABLE
      case symbol_kind::S_DEFERRED: // DEFERRED
      case symbol_kind::S_DEFINER: // DEFINER
      case symbol_kind::S_DELETE_P: // DELETE_P
      case symbol_kind::S_DELIMITER: // DELIMITER
      case symbol_kind::S_DELIMITERS: // DELIMITERS
      case symbol_kind::S_DEPENDS: // DEPENDS
      case symbol_kind::S_DEPTH: // DEPTH
      case symbol_kind::S_DESC: // DESC
      case symbol_kind::S_DETACH: // DETACH
      case symbol_kind::S_DICTIONARY: // DICTIONARY
      case symbol_kind::S_DISABLE_P: // DISABLE_P
      case symbol_kind::S_DISCARD: // DISCARD
      case symbol_kind::S_DISTINCT: // DISTINCT
      case symbol_kind::S_DO: // DO
      case symbol_kind::S_DOCUMENT_P: // DOCUMENT_P
      case symbol_kind::S_DOMAIN_P: // DOMAIN_P
      case symbol_kind::S_DOUBLE_P: // DOUBLE_P
      case symbol_kind::S_DROP: // DROP
      case symbol_kind::S_EACH: // EACH
      case symbol_kind::S_ELSE: // ELSE
      case symbol_kind::S_EMPTY_P: // EMPTY_P
      case symbol_kind::S_ENABLE_P: // ENABLE_P
      case symbol_kind::S_ENCODING: // ENCODING
      case symbol_kind::S_ENCRYPTED: // ENCRYPTED
      case symbol_kind::S_END_P: // END_P
      case symbol_kind::S_ENFORCED: // ENFORCED
      case symbol_kind::S_ENUM_P: // ENUM_P
      case symbol_kind::S_ERROR_P: // ERROR_P
      case symbol_kind::S_ESCAPE: // ESCAPE
      case symbol_kind::S_EVENT: // EVENT
      case symbol_kind::S_EXCEPT: // EXCEPT
      case symbol_kind::S_EXCLUDE: // EXCLUDE
      case symbol_kind::S_EXCLUDING: // EXCLUDING
      case symbol_kind::S_EXCLUSIVE: // EXCLUSIVE
      case symbol_kind::S_EXECUTE: // EXECUTE
      case symbol_kind::S_EXISTS: // EXISTS
      case symbol_kind::S_EXPLAIN: // EXPLAIN
      case symbol_kind::S_EXPRESSION: // EXPRESSION
      case symbol_kind::S_EXTENSION: // EXTENSION
      case symbol_kind::S_EXTERNAL: // EXTERNAL
      case symbol_kind::S_EXTRACT: // EXTRACT
      case symbol_kind::S_FALSE_P: // FALSE_P
      case symbol_kind::S_FAMILY: // FAMILY
      case symbol_kind::S_FETCH: // FETCH
      case symbol_kind::S_FILTER: // FILTER
      case symbol_kind::S_FINALIZE: // FINALIZE
      case symbol_kind::S_FIRST_P: // FIRST_P
      case symbol_kind::S_FLOAT_P: // FLOAT_P
      case symbol_kind::S_FOLLOWING: // FOLLOWING
      case symbol_kind::S_FOR: // FOR
      case symbol_kind::S_FORCE: // FORCE
      case symbol_kind::S_FOREIGN: // FOREIGN
      case symbol_kind::S_FORMAT: // FORMAT
      case symbol_kind::S_FORWARD: // FORWARD
      case symbol_kind::S_FREEZE: // FREEZE
      case symbol_kind::S_FROM: // FROM
      case symbol_kind::S_FULL: // FULL
      case symbol_kind::S_FUNCTION: // FUNCTION
      case symbol_kind::S_FUNCTIONS: // FUNCTIONS
      case symbol_kind::S_GENERATED: // GENERATED
      case symbol_kind::S_GLOBAL: // GLOBAL
      case symbol_kind::S_GRANT: // GRANT
      case symbol_kind::S_GRANTED: // GRANTED
      case symbol_kind::S_GREATEST: // GREATEST
      case symbol_kind::S_GROUP_P: // GROUP_P
      case symbol_kind::S_GROUPING: // GROUPING
      case symbol_kind::S_GROUPS: // GROUPS
      case symbol_kind::S_HANDLER: // HANDLER
      case symbol_kind::S_HAVING: // HAVING
      case symbol_kind::S_HEADER_P: // HEADER_P
      case symbol_kind::S_HOLD: // HOLD
      case symbol_kind::S_HOUR_P: // HOUR_P
      case symbol_kind::S_IDENTITY_P: // IDENTITY_P
      case symbol_kind::S_IF_P: // IF_P
      case symbol_kind::S_ILIKE: // ILIKE
      case symbol_kind::S_IMMEDIATE: // IMMEDIATE
      case symbol_kind::S_IMMUTABLE: // IMMUTABLE
      case symbol_kind::S_IMPLICIT_P: // IMPLICIT_P
      case symbol_kind::S_IMPORT_P: // IMPORT_P
      case symbol_kind::S_IN_P: // IN_P
      case symbol_kind::S_INCLUDE: // INCLUDE
      case symbol_kind::S_INCLUDING: // INCLUDING
      case symbol_kind::S_INCREMENT: // INCREMENT
      case symbol_kind::S_INDENT: // INDENT
      case symbol_kind::S_INDEX: // INDEX
      case symbol_kind::S_INDEXES: // INDEXES
      case symbol_kind::S_INHERIT: // INHERIT
      case symbol_kind::S_INHERITS: // INHERITS
      case symbol_kind::S_INITIALLY: // INITIALLY
      case symbol_kind::S_INLINE_P: // INLINE_P
      case symbol_kind::S_INNER_P: // INNER_P
      case symbol_kind::S_INOUT: // INOUT
      case symbol_kind::S_INPUT_P: // INPUT_P
      case symbol_kind::S_INSENSITIVE: // INSENSITIVE
      case symbol_kind::S_INSERT: // INSERT
      case symbol_kind::S_INSTEAD: // INSTEAD
      case symbol_kind::S_INT_P: // INT_P
      case symbol_kind::S_INTEGER: // INTEGER
      case symbol_kind::S_INTERSECT: // INTERSECT
      case symbol_kind::S_INTERVAL: // INTERVAL
      case symbol_kind::S_INTO: // INTO
      case symbol_kind::S_INVOKER: // INVOKER
      case symbol_kind::S_IS: // IS
      case symbol_kind::S_ISNULL: // ISNULL
      case symbol_kind::S_ISOLATION: // ISOLATION
      case symbol_kind::S_JOIN: // JOIN
      case symbol_kind::S_JSON: // JSON
      case symbol_kind::S_JSON_ARRAY: // JSON_ARRAY
      case symbol_kind::S_JSON_ARRAYAGG: // JSON_ARRAYAGG
      case symbol_kind::S_JSON_EXISTS: // JSON_EXISTS
      case symbol_kind::S_JSON_OBJECT: // JSON_OBJECT
      case symbol_kind::S_JSON_OBJECTAGG: // JSON_OBJECTAGG
      case symbol_kind::S_JSON_QUERY: // JSON_QUERY
      case symbol_kind::S_JSON_SCALAR: // JSON_SCALAR
      case symbol_kind::S_JSON_SERIALIZE: // JSON_SERIALIZE
      case symbol_kind::S_JSON_TABLE: // JSON_TABLE
      case symbol_kind::S_JSON_VALUE: // JSON_VALUE
      case symbol_kind::S_KEEP: // KEEP
      case symbol_kind::S_KEY: // KEY
      case symbol_kind::S_KEYS: // KEYS
      case symbol_kind::S_LABEL: // LABEL
      case symbol_kind::S_LANGUAGE: // LANGUAGE
      case symbol_kind::S_LARGE_P: // LARGE_P
      case symbol_kind::S_LAST_P: // LAST_P
      case symbol_kind::S_LATERAL_P: // LATERAL_P
      case symbol_kind::S_LEADING: // LEADING
      case symbol_kind::S_LEAKPROOF: // LEAKPROOF
      case symbol_kind::S_LEAST: // LEAST
      case symbol_kind::S_LEFT: // LEFT
      case symbol_kind::S_LEVEL: // LEVEL
      case symbol_kind::S_LIKE: // LIKE
      case symbol_kind::S_LIMIT: // LIMIT
      case symbol_kind::S_LISTEN: // LISTEN
      case symbol_kind::S_LOAD: // LOAD
      case symbol_kind::S_LOCAL: // LOCAL
      case symbol_kind::S_LOCALTIME: // LOCALTIME
      case symbol_kind::S_LOCALTIMESTAMP: // LOCALTIMESTAMP
      case symbol_kind::S_LOCATION: // LOCATION
      case symbol_kind::S_LOCK_P: // LOCK_P
      case symbol_kind::S_LOCKED: // LOCKED
      case symbol_kind::S_LOGGED: // LOGGED
      case symbol_kind::S_MAPPING: // MAPPING
      case symbol_kind::S_MATCH: // MATCH
      case symbol_kind::S_MATCHED: // MATCHED
      case symbol_kind::S_MATERIALIZED: // MATERIALIZED
      case symbol_kind::S_MAXVALUE: // MAXVALUE
      case symbol_kind::S_MERGE: // MERGE
      case symbol_kind::S_MERGE_ACTION: // MERGE_ACTION
      case symbol_kind::S_METHOD: // METHOD
      case symbol_kind::S_MINUTE_P: // MINUTE_P
      case symbol_kind::S_MINVALUE: // MINVALUE
      case symbol_kind::S_MODE: // MODE
      case symbol_kind::S_MONTH_P: // MONTH_P
      case symbol_kind::S_MOVE: // MOVE
      case symbol_kind::S_NAME_P: // NAME_P
      case symbol_kind::S_NAMES: // NAMES
      case symbol_kind::S_NATIONAL: // NATIONAL
      case symbol_kind::S_NATURAL: // NATURAL
      case symbol_kind::S_NCHAR: // NCHAR
      case symbol_kind::S_NESTED: // NESTED
      case symbol_kind::S_NEW: // NEW
      case symbol_kind::S_NEXT: // NEXT
      case symbol_kind::S_NFC: // NFC
      case symbol_kind::S_NFD: // NFD
      case symbol_kind::S_NFKC: // NFKC
      case symbol_kind::S_NFKD: // NFKD
      case symbol_kind::S_NO: // NO
      case symbol_kind::S_NONE: // NONE
      case symbol_kind::S_NORMALIZE: // NORMALIZE
      case symbol_kind::S_NORMALIZED: // NORMALIZED
      case symbol_kind::S_NOT: // NOT
      case symbol_kind::S_NOTHING: // NOTHING
      case symbol_kind::S_NOTIFY: // NOTIFY
      case symbol_kind::S_NOTNULL: // NOTNULL
      case symbol_kind::S_NOWAIT: // NOWAIT
      case symbol_kind::S_NULL_P: // NULL_P
      case symbol_kind::S_NULLIF: // NULLIF
      case symbol_kind::S_NULLS_P: // NULLS_P
      case symbol_kind::S_NUMERIC: // NUMERIC
      case symbol_kind::S_OBJECT_P: // OBJECT_P
      case symbol_kind::S_OBJECTS_P: // OBJECTS_P
      case symbol_kind::S_OF: // OF
      case symbol_kind::S_OFF: // OFF
      case symbol_kind::S_OFFSET: // OFFSET
      case symbol_kind::S_OIDS: // OIDS
      case symbol_kind::S_OLD: // OLD
      case symbol_kind::S_OMIT: // OMIT
      case symbol_kind::S_ON: // ON
      case symbol_kind::S_ONLY: // ONLY
      case symbol_kind::S_OPERATOR: // OPERATOR
      case symbol_kind::S_OPTION: // OPTION
      case symbol_kind::S_OPTIONS: // OPTIONS
      case symbol_kind::S_OR: // OR
      case symbol_kind::S_ORDER: // ORDER
      case symbol_kind::S_ORDINALITY: // ORDINALITY
      case symbol_kind::S_OTHERS: // OTHERS
      case symbol_kind::S_OUT_P: // OUT_P
      case symbol_kind::S_OUTER_P: // OUTER_P
      case symbol_kind::S_OVER: // OVER
      case symbol_kind::S_OVERLAPS: // OVERLAPS
      case symbol_kind::S_OVERLAY: // OVERLAY
      case symbol_kind::S_OVERRIDING: // OVERRIDING
      case symbol_kind::S_OWNED: // OWNED
      case symbol_kind::S_OWNER: // OWNER
      case symbol_kind::S_PARALLEL: // PARALLEL
      case symbol_kind::S_PARAMETER: // PARAMETER
      case symbol_kind::S_PARSER: // PARSER
      case symbol_kind::S_PARTIAL: // PARTIAL
      case symbol_kind::S_PARTITION: // PARTITION
      case symbol_kind::S_PASSING: // PASSING
      case symbol_kind::S_PASSWORD: // PASSWORD
      case symbol_kind::S_PATH: // PATH
      case symbol_kind::S_PERIOD: // PERIOD
      case symbol_kind::S_PLACING: // PLACING
      case symbol_kind::S_PLAN: // PLAN
      case symbol_kind::S_PLANS: // PLANS
      case symbol_kind::S_POLICY: // POLICY
      case symbol_kind::S_POSITION: // POSITION
      case symbol_kind::S_PRECEDING: // PRECEDING
      case symbol_kind::S_PRECISION: // PRECISION
      case symbol_kind::S_PRESERVE: // PRESERVE
      case symbol_kind::S_PREPARE: // PREPARE
      case symbol_kind::S_PREPARED: // PREPARED
      case symbol_kind::S_PRIMARY: // PRIMARY
      case symbol_kind::S_PRIOR: // PRIOR
      case symbol_kind::S_PRIVILEGES: // PRIVILEGES
      case symbol_kind::S_PROCEDURAL: // PROCEDURAL
      case symbol_kind::S_PROCEDURE: // PROCEDURE
      case symbol_kind::S_PROCEDURES: // PROCEDURES
      case symbol_kind::S_PROGRAM: // PROGRAM
      case symbol_kind::S_PUBLICATION: // PUBLICATION
      case symbol_kind::S_QUOTES: // QUOTES
      case symbol_kind::S_EXTEND: // EXTEND
      case symbol_kind::S_RANGE: // RANGE
      case symbol_kind::S_READ: // READ
      case symbol_kind::S_REAL: // REAL
      case symbol_kind::S_REASSIGN: // REASSIGN
      case symbol_kind::S_RECURSIVE: // RECURSIVE
      case symbol_kind::S_REF_P: // REF_P
      case symbol_kind::S_REFERENCES: // REFERENCES
      case symbol_kind::S_REFERENCING: // REFERENCING
      case symbol_kind::S_REFRESH: // REFRESH
      case symbol_kind::S_REINDEX: // REINDEX
      case symbol_kind::S_RELATIVE_P: // RELATIVE_P
      case symbol_kind::S_RELEASE: // RELEASE
      case symbol_kind::S_RENAME: // RENAME
      case symbol_kind::S_REPEATABLE: // REPEATABLE
      case symbol_kind::S_REPLACE: // REPLACE
      case symbol_kind::S_REPLICA: // REPLICA
      case symbol_kind::S_RESET: // RESET
      case symbol_kind::S_RESTART: // RESTART
      case symbol_kind::S_RESTRICT: // RESTRICT
      case symbol_kind::S_RETURN: // RETURN
      case symbol_kind::S_RETURNING: // RETURNING
      case symbol_kind::S_RETURNS: // RETURNS
      case symbol_kind::S_REVOKE: // REVOKE
      case symbol_kind::S_RIGHT: // RIGHT
      case symbol_kind::S_ROLE: // ROLE
      case symbol_kind::S_ROLLBACK: // ROLLBACK
      case symbol_kind::S_ROLLUP: // ROLLUP
      case symbol_kind::S_ROUTINE: // ROUTINE
      case symbol_kind::S_ROUTINES: // ROUTINES
      case symbol_kind::S_ROW: // ROW
      case symbol_kind::S_ROWS: // ROWS
      case symbol_kind::S_RULE: // RULE
      case symbol_kind::S_SAVEPOINT: // SAVEPOINT
      case symbol_kind::S_SCALAR: // SCALAR
      case symbol_kind::S_SCHEMA: // SCHEMA
      case symbol_kind::S_SCHEMAS: // SCHEMAS
      case symbol_kind::S_SCROLL: // SCROLL
      case symbol_kind::S_SEARCH: // SEARCH
      case symbol_kind::S_SECOND_P: // SECOND_P
      case symbol_kind::S_SECURITY: // SECURITY
      case symbol_kind::S_SELECT: // SELECT
      case symbol_kind::S_SEQUENCE: // SEQUENCE
      case symbol_kind::S_SEQUENCES: // SEQUENCES
      case symbol_kind::S_SERIALIZABLE: // SERIALIZABLE
      case symbol_kind::S_SERVER: // SERVER
      case symbol_kind::S_SESSION: // SESSION
      case symbol_kind::S_SESSION_USER: // SESSION_USER
      case symbol_kind::S_SET: // SET
      case symbol_kind::S_SETS: // SETS
      case symbol_kind::S_SETOF: // SETOF
      case symbol_kind::S_SHARE: // SHARE
      case symbol_kind::S_SHOW: // SHOW
      case symbol_kind::S_SIMILAR: // SIMILAR
      case symbol_kind::S_SIMPLE: // SIMPLE
      case symbol_kind::S_SKIP: // SKIP
      case symbol_kind::S_SMALLINT: // SMALLINT
      case symbol_kind::S_SNAPSHOT: // SNAPSHOT
      case symbol_kind::S_SOME: // SOME
      case symbol_kind::S_SOURCE: // SOURCE
      case symbol_kind::S_SQL_P: // SQL_P
      case symbol_kind::S_STABLE: // STABLE
      case symbol_kind::S_STANDALONE_P: // STANDALONE_P
      case symbol_kind::S_START: // START
      case symbol_kind::S_STATEMENT: // STATEMENT
      case symbol_kind::S_STATISTICS: // STATISTICS
      case symbol_kind::S_STDIN: // STDIN
      case symbol_kind::S_STDOUT: // STDOUT
      case symbol_kind::S_STORAGE: // STORAGE
      case symbol_kind::S_STORED: // STORED
      case symbol_kind::S_STRICT_P: // STRICT_P
      case symbol_kind::S_STRING_P: // STRING_P
      case symbol_kind::S_STRIP_P: // STRIP_P
      case symbol_kind::S_SUBSCRIPTION: // SUBSCRIPTION
      case symbol_kind::S_SUBSTRING: // SUBSTRING
      case symbol_kind::S_SUPPORT: // SUPPORT
      case symbol_kind::S_SYMMETRIC: // SYMMETRIC
      case symbol_kind::S_SYSID: // SYSID
      case symbol_kind::S_SYSTEM_P: // SYSTEM_P
      case symbol_kind::S_SYSTEM_USER: // SYSTEM_USER
      case symbol_kind::S_TABLE: // TABLE
      case symbol_kind::S_TABLES: // TABLES
      case symbol_kind::S_TABLESAMPLE: // TABLESAMPLE
      case symbol_kind::S_TABLESPACE: // TABLESPACE
      case symbol_kind::S_TARGET: // TARGET
      case symbol_kind::S_TEMP: // TEMP
      case symbol_kind::S_TEMPLATE: // TEMPLATE
      case symbol_kind::S_TEMPORARY: // TEMPORARY
      case symbol_kind::S_TEXT_P: // TEXT_P
      case symbol_kind::S_THEN: // THEN
      case symbol_kind::S_TIES: // TIES
      case symbol_kind::S_TIME: // TIME
      case symbol_kind::S_TIMESTAMP: // TIMESTAMP
      case symbol_kind::S_TO: // TO
      case symbol_kind::S_TRAILING: // TRAILING
      case symbol_kind::S_TRANSACTION: // TRANSACTION
      case symbol_kind::S_TRANSFORM: // TRANSFORM
      case symbol_kind::S_TREAT: // TREAT
      case symbol_kind::S_TRIGGER: // TRIGGER
      case symbol_kind::S_TRIM: // TRIM
      case symbol_kind::S_TRUE_P: // TRUE_P
      case symbol_kind::S_TRUNCATE: // TRUNCATE
      case symbol_kind::S_TRUSTED: // TRUSTED
      case symbol_kind::S_TYPE_P: // TYPE_P
      case symbol_kind::S_TYPES_P: // TYPES_P
      case symbol_kind::S_UESCAPE: // UESCAPE
      case symbol_kind::S_UNBOUNDED: // UNBOUNDED
      case symbol_kind::S_UNCONDITIONAL: // UNCONDITIONAL
      case symbol_kind::S_UNCOMMITTED: // UNCOMMITTED
      case symbol_kind::S_UNENCRYPTED: // UNENCRYPTED
      case symbol_kind::S_UNION: // UNION
      case symbol_kind::S_UNIQUE: // UNIQUE
      case symbol_kind::S_UNKNOWN: // UNKNOWN
      case symbol_kind::S_UNLISTEN: // UNLISTEN
      case symbol_kind::S_UNLOGGED: // UNLOGGED
      case symbol_kind::S_UNTIL: // UNTIL
      case symbol_kind::S_UPDATE: // UPDATE
      case symbol_kind::S_USER: // USER
      case symbol_kind::S_USING: // USING
      case symbol_kind::S_VACUUM: // VACUUM
      case symbol_kind::S_VALID: // VALID
      case symbol_kind::S_VALIDATE: // VALIDATE
      case symbol_kind::S_VALIDATOR: // VALIDATOR
      case symbol_kind::S_VALUE_P: // VALUE_P
      case symbol_kind::S_VALUES: // VALUES
      case symbol_kind::S_VARCHAR: // VARCHAR
      case symbol_kind::S_VARIADIC: // VARIADIC
      case symbol_kind::S_VARYING: // VARYING
      case symbol_kind::S_VERBOSE: // VERBOSE
      case symbol_kind::S_VERSION_P: // VERSION_P
      case symbol_kind::S_VIEW: // VIEW
      case symbol_kind::S_VIEWS: // VIEWS
      case symbol_kind::S_VIRTUAL: // VIRTUAL
      case symbol_kind::S_VOLATILE: // VOLATILE
      case symbol_kind::S_WHEN: // WHEN
      case symbol_kind::S_WHERE: // WHERE
      case symbol_kind::S_WHITESPACE_P: // WHITESPACE_P
      case symbol_kind::S_WINDOW: // WINDOW
      case symbol_kind::S_WITH: // WITH
      case symbol_kind::S_WITHIN: // WITHIN
      case symbol_kind::S_WITHOUT: // WITHOUT
      case symbol_kind::S_WORK: // WORK
      case symbol_kind::S_WRAPPER: // WRAPPER
      case symbol_kind::S_WRITE: // WRITE
      case symbol_kind::S_XML_P: // XML_P
      case symbol_kind::S_XMLATTRIBUTES: // XMLATTRIBUTES
      case symbol_kind::S_XMLCONCAT: // XMLCONCAT
      case symbol_kind::S_XMLELEMENT: // XMLELEMENT
      case symbol_kind::S_XMLEXISTS: // XMLEXISTS
      case symbol_kind::S_XMLFOREST: // XMLFOREST
      case symbol_kind::S_XMLNAMESPACES: // XMLNAMESPACES
      case symbol_kind::S_XMLPARSE: // XMLPARSE
      case symbol_kind::S_XMLPI: // XMLPI
      case symbol_kind::S_XMLROOT: // XMLROOT
      case symbol_kind::S_XMLSERIALIZE: // XMLSERIALIZE
      case symbol_kind::S_XMLTABLE: // XMLTABLE
      case symbol_kind::S_YEAR_P: // YEAR_P
      case symbol_kind::S_YES_P: // YES_P
      case symbol_kind::S_ZONE: // ZONE
      case symbol_kind::S_copy_file_name: // copy_file_name
      case symbol_kind::S_copy_delimiter: // copy_delimiter
      case symbol_kind::S_var_name: // var_name
      case symbol_kind::S_NonReservedWord: // NonReservedWord
      case symbol_kind::S_relation_expr: // relation_expr
      case symbol_kind::S_any_operator: // any_operator
      case symbol_kind::S_qual_Op: // qual_Op
      case symbol_kind::S_all_Op: // all_Op
      case symbol_kind::S_ColId: // ColId
      case symbol_kind::S_type_function_name: // type_function_name
      case symbol_kind::S_type_func_name_keyword: // type_func_name_keyword
      case symbol_kind::S_ColLabel: // ColLabel
      case symbol_kind::S_BareColLabel: // BareColLabel
      case symbol_kind::S_reserved_keyword: // reserved_keyword
      case symbol_kind::S_unreserved_keyword: // unreserved_keyword
      case symbol_kind::S_col_name_keyword: // col_name_keyword
      case symbol_kind::S_qualified_name: // qualified_name
      case symbol_kind::S_name: // name
      case symbol_kind::S_attr_name: // attr_name
      case symbol_kind::S_func_name: // func_name
      case symbol_kind::S_insert_target: // insert_target
      case symbol_kind::S_insert_column_item: // insert_column_item
        value.move< std::string > (that.value);
        break;

      case symbol_kind::S_in_expr: // in_expr
        value.move< std::variant<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>, std::shared_ptr<lingodb::ast::SubqueryExpression>> > (that.value);
        break;

      case symbol_kind::S_when_clause_list: // when_clause_list
        value.move< std::vector<lingodb::ast::CaseExpression::CaseCheck> > (that.value);
        break;

      case symbol_kind::S_copy_options: // copy_options
      case symbol_kind::S_copy_opt_list: // copy_opt_list
        value.move< std::vector<std::pair<std::string, std::string>> > (that.value);
        break;

      case symbol_kind::S_stmtmulti: // stmtmulti
        value.move< std::vector<std::shared_ptr<lingodb::ast::AstNode>> > (that.value);
        break;

      case symbol_kind::S_ColQualList: // ColQualList
        value.move< std::vector<std::shared_ptr<lingodb::ast::Constraint>> > (that.value);
        break;

      case symbol_kind::S_func_expr_list: // func_expr_list
        value.move< std::vector<std::shared_ptr<lingodb::ast::FunctionExpression>> > (that.value);
        break;

      case symbol_kind::S_sortby_list: // sortby_list
        value.move< std::vector<std::shared_ptr<lingodb::ast::OrderByElement>> > (that.value);
        break;

      case symbol_kind::S_var_list: // var_list
      case symbol_kind::S_group_by_list: // group_by_list
      case symbol_kind::S_group_by_list_with_alias: // group_by_list_with_alias
      case symbol_kind::S_rollup_clause: // rollup_clause
      case symbol_kind::S_columnref_list: // columnref_list
      case symbol_kind::S_func_arg_list_opt: // func_arg_list_opt
      case symbol_kind::S_func_arg_list: // func_arg_list
      case symbol_kind::S_expr_list: // expr_list
      case symbol_kind::S_expr_list_with_alias: // expr_list_with_alias
      case symbol_kind::S_extract_list: // extract_list
      case symbol_kind::S_substr_list: // substr_list
      case symbol_kind::S_target_list: // target_list
      case symbol_kind::S_opt_partition_clause: // opt_partition_clause
        value.move< std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > (that.value);
        break;

      case symbol_kind::S_OptTableElementList: // OptTableElementList
      case symbol_kind::S_TableElementList: // TableElementList
        value.move< std::vector<std::shared_ptr<lingodb::ast::TableElement>> > (that.value);
        break;

      case symbol_kind::S_opt_type_modifiers: // opt_type_modifiers
      case symbol_kind::S_type_modifiers: // type_modifiers
        value.move< std::vector<std::shared_ptr<lingodb::ast::Value>> > (that.value);
        break;

      case symbol_kind::S_opt_name_list: // opt_name_list
      case symbol_kind::S_name_list: // name_list
      case symbol_kind::S_insert_column_list: // insert_column_list
        value.move< std::vector<std::string> > (that.value);
        break;

      case symbol_kind::S_INTEGER_VALUE: // "integer_value"
        value.move< uint64_t > (that.value);
        break;

      default:
        break;
    }

    location = that.location;
    // that is emptied.
    that.state = empty_state;
    return *this;
  }
#endif

  template <typename Base>
  void
  parser::yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const
  {
    if (yymsg)
      YY_SYMBOL_PRINT (yymsg, yysym);
  }

#if YYDEBUG
  template <typename Base>
  void
  parser::yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const
  {
    std::ostream& yyoutput = yyo;
    YY_USE (yyoutput);
    if (yysym.empty ())
      yyo << "empty symbol";
    else
      {
        symbol_kind_type yykind = yysym.kind ();
        yyo << (yykind < YYNTOKENS ? "token" : "nterm")
            << ' ' << yysym.name () << " ("
            << yysym.location << ": ";
        switch (yykind)
    {
      case symbol_kind::S_ICONST: // ICONST
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3745 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INTEGER_VALUE: // "integer_value"
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3751 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FCONST: // FCONST
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3757 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_IDENT: // IDENT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3763 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_IDENTIFIER: // "identifier"
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3769 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_STRING_VALUE: // STRING_VALUE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3775 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_BIT_VALUE: // "bit_string"
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3781 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_HEX_VALUE: // "hex_string"
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3787 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NATIONAL_VALUE: // "nat_string"
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3793 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PERCENT: // "%"
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3799 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PLUS: // "+"
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3805 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SLASH: // "/"
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3811 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_STAR: // "*"
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3817 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_MINUS: // "-"
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3823 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EQUAL: // "="
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3829 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NOT_EQUAL: // "<>"
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3835 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LESS_EQUAL: // "<="
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3841 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LESS: // "<"
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3847 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_GREATER_EQUAL: // ">="
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3853 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_GREATER: // ">"
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3859 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_UIDENT: // UIDENT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3865 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SCONST: // SCONST
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3871 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_USCONST: // USCONST
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3877 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_BCONST: // BCONST
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3883 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_XCONST: // XCONST
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3889 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_Op: // Op
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3895 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TYPECAST: // TYPECAST
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3901 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ABORT_P: // ABORT_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3907 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ABSENT: // ABSENT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3913 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ABSOLUTE_P: // ABSOLUTE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3919 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ACCESS: // ACCESS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3925 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ACTION: // ACTION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3931 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ADD_P: // ADD_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3937 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ADMIN: // ADMIN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3943 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_AFTER: // AFTER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3949 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_AGGREGATE: // AGGREGATE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3955 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ALL: // ALL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3961 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ALSO: // ALSO
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3967 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ALTER: // ALTER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3973 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ALWAYS: // ALWAYS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3979 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ANALYSE: // ANALYSE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3985 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ANALYZE: // ANALYZE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3991 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_AND: // AND
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 3997 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ANY: // ANY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4003 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ARRAY: // ARRAY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4009 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_AS: // AS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4015 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ASC: // ASC
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4021 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ASENSITIVE: // ASENSITIVE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4027 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ASSERTION: // ASSERTION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4033 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ASSIGNMENT: // ASSIGNMENT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4039 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ASYMMETRIC: // ASYMMETRIC
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4045 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ATOMIC: // ATOMIC
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4051 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_AT: // AT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4057 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ATTACH: // ATTACH
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4063 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ATTRIBUTE: // ATTRIBUTE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4069 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_AUTHORIZATION: // AUTHORIZATION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4075 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_BACKWARD: // BACKWARD
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4081 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_BEFORE: // BEFORE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4087 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_BEGIN_P: // BEGIN_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4093 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_BETWEEN: // BETWEEN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4099 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_BIGINT: // BIGINT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4105 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_BINARY: // BINARY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4111 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_BIT: // BIT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4117 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_BOOLEAN_P: // BOOLEAN_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4123 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_BOTH: // BOTH
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4129 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_BREADTH: // BREADTH
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4135 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_BY: // BY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4141 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CACHE: // CACHE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4147 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CALL: // CALL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4153 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CALLED: // CALLED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4159 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CASCADE: // CASCADE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4165 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CASCADED: // CASCADED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4171 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CASE: // CASE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4177 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CAST: // CAST
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4183 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CATALOG_P: // CATALOG_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4189 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CHAIN: // CHAIN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4195 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CHAR_P: // CHAR_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4201 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CHARACTER: // CHARACTER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4207 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CHARACTERISTICS: // CHARACTERISTICS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4213 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CHECK: // CHECK
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4219 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CHECKPOINT: // CHECKPOINT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4225 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CLASS: // CLASS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4231 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CLOSE: // CLOSE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4237 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CLUSTER: // CLUSTER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4243 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_COALESCE: // COALESCE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4249 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_COLLATE: // COLLATE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4255 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_COLLATION: // COLLATION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4261 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_COLUMN: // COLUMN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4267 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_COLUMNS: // COLUMNS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4273 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_COMMENT: // COMMENT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4279 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_COMMENTS: // COMMENTS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4285 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_COMMIT: // COMMIT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4291 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_COMMITTED: // COMMITTED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4297 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_COMPRESSION: // COMPRESSION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4303 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CONCURRENTLY: // CONCURRENTLY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4309 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CONDITIONAL: // CONDITIONAL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4315 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CONFIGURATION: // CONFIGURATION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4321 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CONFLICT: // CONFLICT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4327 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CONNECTION: // CONNECTION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4333 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CONSTRAINT: // CONSTRAINT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4339 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CONSTRAINTS: // CONSTRAINTS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4345 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CONTENT_P: // CONTENT_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4351 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CONTINUE_P: // CONTINUE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4357 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CONVERSION_P: // CONVERSION_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4363 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_COPY: // COPY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4369 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_COST: // COST
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4375 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CREATE: // CREATE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4381 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CROSS: // CROSS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4387 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CSV: // CSV
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4393 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CUBE: // CUBE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4399 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CURRENT_P: // CURRENT_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4405 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CURRENT_CATALOG: // CURRENT_CATALOG
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4411 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CURRENT_DATE: // CURRENT_DATE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4417 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CURRENT_ROLE: // CURRENT_ROLE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4423 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CURRENT_SCHEMA: // CURRENT_SCHEMA
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4429 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CURRENT_TIME: // CURRENT_TIME
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4435 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CURRENT_TIMESTAMP: // CURRENT_TIMESTAMP
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4441 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CURRENT_USER: // CURRENT_USER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4447 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CURSOR: // CURSOR
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4453 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CYCLE: // CYCLE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4459 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DATA_P: // DATA_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4465 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DATABASE: // DATABASE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4471 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DAY_P: // DAY_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4477 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DEALLOCATE: // DEALLOCATE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4483 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DEC: // DEC
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4489 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DECIMAL_P: // DECIMAL_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4495 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DECLARE: // DECLARE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4501 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DEFAULT: // DEFAULT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4507 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DEFAULTS: // DEFAULTS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4513 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DATE_P: // DATE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4519 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DEFERRABLE: // DEFERRABLE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4525 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DEFERRED: // DEFERRED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4531 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DEFINER: // DEFINER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4537 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DELETE_P: // DELETE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4543 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DELIMITER: // DELIMITER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4549 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DELIMITERS: // DELIMITERS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4555 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DEPENDS: // DEPENDS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4561 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DEPTH: // DEPTH
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4567 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DESC: // DESC
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4573 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DETACH: // DETACH
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4579 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DICTIONARY: // DICTIONARY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4585 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DISABLE_P: // DISABLE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4591 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DISCARD: // DISCARD
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4597 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DISTINCT: // DISTINCT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4603 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DO: // DO
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4609 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DOCUMENT_P: // DOCUMENT_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4615 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DOMAIN_P: // DOMAIN_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4621 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DOUBLE_P: // DOUBLE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4627 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_DROP: // DROP
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4633 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EACH: // EACH
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4639 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ELSE: // ELSE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4645 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EMPTY_P: // EMPTY_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4651 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ENABLE_P: // ENABLE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4657 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ENCODING: // ENCODING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4663 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ENCRYPTED: // ENCRYPTED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4669 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_END_P: // END_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4675 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ENFORCED: // ENFORCED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4681 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ENUM_P: // ENUM_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4687 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ERROR_P: // ERROR_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4693 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ESCAPE: // ESCAPE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4699 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EVENT: // EVENT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4705 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EXCEPT: // EXCEPT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4711 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EXCLUDE: // EXCLUDE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4717 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EXCLUDING: // EXCLUDING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4723 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EXCLUSIVE: // EXCLUSIVE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4729 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EXECUTE: // EXECUTE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4735 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EXISTS: // EXISTS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4741 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EXPLAIN: // EXPLAIN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4747 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EXPRESSION: // EXPRESSION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4753 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EXTENSION: // EXTENSION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4759 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EXTERNAL: // EXTERNAL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4765 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EXTRACT: // EXTRACT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4771 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FALSE_P: // FALSE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4777 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FAMILY: // FAMILY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4783 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FETCH: // FETCH
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4789 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FILTER: // FILTER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4795 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FINALIZE: // FINALIZE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4801 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FIRST_P: // FIRST_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4807 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FLOAT_P: // FLOAT_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4813 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FOLLOWING: // FOLLOWING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4819 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FOR: // FOR
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4825 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FORCE: // FORCE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4831 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FOREIGN: // FOREIGN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4837 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FORMAT: // FORMAT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4843 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FORWARD: // FORWARD
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4849 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FREEZE: // FREEZE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4855 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FROM: // FROM
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4861 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FULL: // FULL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4867 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FUNCTION: // FUNCTION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4873 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_FUNCTIONS: // FUNCTIONS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4879 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_GENERATED: // GENERATED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4885 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_GLOBAL: // GLOBAL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4891 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_GRANT: // GRANT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4897 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_GRANTED: // GRANTED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4903 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_GREATEST: // GREATEST
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4909 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_GROUP_P: // GROUP_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4915 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_GROUPING: // GROUPING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4921 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_GROUPS: // GROUPS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4927 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_HANDLER: // HANDLER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4933 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_HAVING: // HAVING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4939 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_HEADER_P: // HEADER_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4945 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_HOLD: // HOLD
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4951 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_HOUR_P: // HOUR_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4957 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_IDENTITY_P: // IDENTITY_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4963 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_IF_P: // IF_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4969 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ILIKE: // ILIKE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4975 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_IMMEDIATE: // IMMEDIATE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4981 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_IMMUTABLE: // IMMUTABLE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4987 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_IMPLICIT_P: // IMPLICIT_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4993 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_IMPORT_P: // IMPORT_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 4999 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_IN_P: // IN_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5005 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INCLUDE: // INCLUDE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5011 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INCLUDING: // INCLUDING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5017 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INCREMENT: // INCREMENT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5023 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INDENT: // INDENT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5029 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INDEX: // INDEX
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5035 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INDEXES: // INDEXES
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5041 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INHERIT: // INHERIT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5047 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INHERITS: // INHERITS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5053 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INITIALLY: // INITIALLY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5059 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INLINE_P: // INLINE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5065 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INNER_P: // INNER_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5071 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INOUT: // INOUT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5077 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INPUT_P: // INPUT_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5083 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INSENSITIVE: // INSENSITIVE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5089 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INSERT: // INSERT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5095 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INSTEAD: // INSTEAD
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5101 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INT_P: // INT_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5107 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INTEGER: // INTEGER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5113 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INTERSECT: // INTERSECT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5119 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INTERVAL: // INTERVAL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5125 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INTO: // INTO
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5131 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_INVOKER: // INVOKER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5137 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_IS: // IS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5143 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ISNULL: // ISNULL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5149 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ISOLATION: // ISOLATION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5155 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_JOIN: // JOIN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5161 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_JSON: // JSON
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5167 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_JSON_ARRAY: // JSON_ARRAY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5173 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_JSON_ARRAYAGG: // JSON_ARRAYAGG
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5179 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_JSON_EXISTS: // JSON_EXISTS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5185 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_JSON_OBJECT: // JSON_OBJECT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5191 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_JSON_OBJECTAGG: // JSON_OBJECTAGG
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5197 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_JSON_QUERY: // JSON_QUERY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5203 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_JSON_SCALAR: // JSON_SCALAR
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5209 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_JSON_SERIALIZE: // JSON_SERIALIZE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5215 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_JSON_TABLE: // JSON_TABLE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5221 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_JSON_VALUE: // JSON_VALUE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5227 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_KEEP: // KEEP
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5233 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_KEY: // KEY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5239 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_KEYS: // KEYS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5245 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LABEL: // LABEL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5251 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LANGUAGE: // LANGUAGE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5257 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LARGE_P: // LARGE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5263 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LAST_P: // LAST_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5269 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LATERAL_P: // LATERAL_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5275 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LEADING: // LEADING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5281 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LEAKPROOF: // LEAKPROOF
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5287 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LEAST: // LEAST
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5293 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LEFT: // LEFT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5299 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LEVEL: // LEVEL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5305 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LIKE: // LIKE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5311 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LIMIT: // LIMIT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5317 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LISTEN: // LISTEN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5323 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LOAD: // LOAD
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5329 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LOCAL: // LOCAL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5335 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LOCALTIME: // LOCALTIME
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5341 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LOCALTIMESTAMP: // LOCALTIMESTAMP
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5347 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LOCATION: // LOCATION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5353 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LOCK_P: // LOCK_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5359 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LOCKED: // LOCKED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5365 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_LOGGED: // LOGGED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5371 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_MAPPING: // MAPPING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5377 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_MATCH: // MATCH
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5383 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_MATCHED: // MATCHED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5389 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_MATERIALIZED: // MATERIALIZED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5395 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_MAXVALUE: // MAXVALUE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5401 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_MERGE: // MERGE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5407 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_MERGE_ACTION: // MERGE_ACTION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5413 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_METHOD: // METHOD
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5419 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_MINUTE_P: // MINUTE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5425 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_MINVALUE: // MINVALUE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5431 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_MODE: // MODE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5437 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_MONTH_P: // MONTH_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5443 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_MOVE: // MOVE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5449 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NAME_P: // NAME_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5455 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NAMES: // NAMES
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5461 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NATIONAL: // NATIONAL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5467 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NATURAL: // NATURAL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5473 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NCHAR: // NCHAR
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5479 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NESTED: // NESTED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5485 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NEW: // NEW
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5491 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NEXT: // NEXT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5497 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NFC: // NFC
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5503 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NFD: // NFD
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5509 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NFKC: // NFKC
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5515 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NFKD: // NFKD
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5521 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NO: // NO
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5527 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NONE: // NONE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5533 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NORMALIZE: // NORMALIZE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5539 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NORMALIZED: // NORMALIZED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5545 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NOT: // NOT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5551 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NOTHING: // NOTHING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5557 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NOTIFY: // NOTIFY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5563 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NOTNULL: // NOTNULL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5569 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NOWAIT: // NOWAIT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5575 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NULL_P: // NULL_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5581 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NULLIF: // NULLIF
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5587 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NULLS_P: // NULLS_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5593 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NUMERIC: // NUMERIC
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5599 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OBJECT_P: // OBJECT_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5605 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OBJECTS_P: // OBJECTS_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5611 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OF: // OF
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5617 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OFF: // OFF
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5623 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OFFSET: // OFFSET
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5629 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OIDS: // OIDS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5635 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OLD: // OLD
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5641 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OMIT: // OMIT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5647 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ON: // ON
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5653 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ONLY: // ONLY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5659 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OPERATOR: // OPERATOR
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5665 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OPTION: // OPTION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5671 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OPTIONS: // OPTIONS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5677 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OR: // OR
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5683 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ORDER: // ORDER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5689 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ORDINALITY: // ORDINALITY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5695 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OTHERS: // OTHERS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5701 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OUT_P: // OUT_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5707 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OUTER_P: // OUTER_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5713 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OVER: // OVER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5719 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OVERLAPS: // OVERLAPS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5725 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OVERLAY: // OVERLAY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5731 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OVERRIDING: // OVERRIDING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5737 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OWNED: // OWNED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5743 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OWNER: // OWNER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5749 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PARALLEL: // PARALLEL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5755 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PARAMETER: // PARAMETER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5761 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PARSER: // PARSER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5767 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PARTIAL: // PARTIAL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5773 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PARTITION: // PARTITION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5779 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PASSING: // PASSING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5785 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PASSWORD: // PASSWORD
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5791 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PATH: // PATH
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5797 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PERIOD: // PERIOD
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5803 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PLACING: // PLACING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5809 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PLAN: // PLAN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5815 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PLANS: // PLANS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5821 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_POLICY: // POLICY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5827 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_POSITION: // POSITION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5833 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PRECEDING: // PRECEDING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5839 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PRECISION: // PRECISION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5845 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PRESERVE: // PRESERVE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5851 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PREPARE: // PREPARE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5857 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PREPARED: // PREPARED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5863 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PRIMARY: // PRIMARY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5869 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PRIOR: // PRIOR
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5875 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PRIVILEGES: // PRIVILEGES
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5881 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PROCEDURAL: // PROCEDURAL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5887 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PROCEDURE: // PROCEDURE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5893 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PROCEDURES: // PROCEDURES
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5899 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PROGRAM: // PROGRAM
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5905 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PUBLICATION: // PUBLICATION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5911 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_QUOTES: // QUOTES
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5917 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_EXTEND: // EXTEND
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5923 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_RANGE: // RANGE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5929 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_READ: // READ
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5935 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_REAL: // REAL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5941 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_REASSIGN: // REASSIGN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5947 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_RECURSIVE: // RECURSIVE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5953 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_REF_P: // REF_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5959 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_REFERENCES: // REFERENCES
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5965 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_REFERENCING: // REFERENCING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5971 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_REFRESH: // REFRESH
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5977 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_REINDEX: // REINDEX
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5983 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_RELATIVE_P: // RELATIVE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5989 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_RELEASE: // RELEASE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 5995 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_RENAME: // RENAME
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6001 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_REPEATABLE: // REPEATABLE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6007 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_REPLACE: // REPLACE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6013 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_REPLICA: // REPLICA
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6019 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_RESET: // RESET
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6025 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_RESTART: // RESTART
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6031 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_RESTRICT: // RESTRICT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6037 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_RETURN: // RETURN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6043 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_RETURNING: // RETURNING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6049 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_RETURNS: // RETURNS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6055 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_REVOKE: // REVOKE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6061 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_RIGHT: // RIGHT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6067 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ROLE: // ROLE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6073 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ROLLBACK: // ROLLBACK
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6079 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ROLLUP: // ROLLUP
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6085 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ROUTINE: // ROUTINE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6091 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ROUTINES: // ROUTINES
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6097 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ROW: // ROW
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6103 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ROWS: // ROWS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6109 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_RULE: // RULE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6115 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SAVEPOINT: // SAVEPOINT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6121 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SCALAR: // SCALAR
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6127 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SCHEMA: // SCHEMA
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6133 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SCHEMAS: // SCHEMAS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6139 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SCROLL: // SCROLL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6145 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SEARCH: // SEARCH
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6151 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SECOND_P: // SECOND_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6157 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SECURITY: // SECURITY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6163 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SELECT: // SELECT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6169 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SEQUENCE: // SEQUENCE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6175 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SEQUENCES: // SEQUENCES
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6181 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SERIALIZABLE: // SERIALIZABLE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6187 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SERVER: // SERVER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6193 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SESSION: // SESSION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6199 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SESSION_USER: // SESSION_USER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6205 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SET: // SET
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6211 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SETS: // SETS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6217 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SETOF: // SETOF
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6223 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SHARE: // SHARE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6229 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SHOW: // SHOW
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6235 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SIMILAR: // SIMILAR
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6241 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SIMPLE: // SIMPLE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6247 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SKIP: // SKIP
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6253 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SMALLINT: // SMALLINT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6259 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SNAPSHOT: // SNAPSHOT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6265 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SOME: // SOME
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6271 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SOURCE: // SOURCE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6277 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SQL_P: // SQL_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6283 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_STABLE: // STABLE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6289 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_STANDALONE_P: // STANDALONE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6295 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_START: // START
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6301 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_STATEMENT: // STATEMENT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6307 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_STATISTICS: // STATISTICS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6313 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_STDIN: // STDIN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6319 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_STDOUT: // STDOUT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6325 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_STORAGE: // STORAGE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6331 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_STORED: // STORED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6337 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_STRICT_P: // STRICT_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6343 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_STRING_P: // STRING_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6349 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_STRIP_P: // STRIP_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6355 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SUBSCRIPTION: // SUBSCRIPTION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6361 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SUBSTRING: // SUBSTRING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6367 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SUPPORT: // SUPPORT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6373 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SYMMETRIC: // SYMMETRIC
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6379 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SYSID: // SYSID
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6385 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SYSTEM_P: // SYSTEM_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6391 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SYSTEM_USER: // SYSTEM_USER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6397 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TABLE: // TABLE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6403 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TABLES: // TABLES
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6409 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TABLESAMPLE: // TABLESAMPLE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6415 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TABLESPACE: // TABLESPACE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6421 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TARGET: // TARGET
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6427 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TEMP: // TEMP
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6433 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TEMPLATE: // TEMPLATE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6439 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TEMPORARY: // TEMPORARY
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6445 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TEXT_P: // TEXT_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6451 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_THEN: // THEN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6457 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TIES: // TIES
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6463 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TIME: // TIME
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6469 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TIMESTAMP: // TIMESTAMP
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6475 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TO: // TO
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6481 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TRAILING: // TRAILING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6487 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TRANSACTION: // TRANSACTION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6493 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TRANSFORM: // TRANSFORM
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6499 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TREAT: // TREAT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6505 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TRIGGER: // TRIGGER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6511 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TRIM: // TRIM
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6517 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TRUE_P: // TRUE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6523 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TRUNCATE: // TRUNCATE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6529 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TRUSTED: // TRUSTED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6535 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TYPE_P: // TYPE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6541 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TYPES_P: // TYPES_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6547 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_UESCAPE: // UESCAPE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6553 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_UNBOUNDED: // UNBOUNDED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6559 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_UNCONDITIONAL: // UNCONDITIONAL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6565 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_UNCOMMITTED: // UNCOMMITTED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6571 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_UNENCRYPTED: // UNENCRYPTED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6577 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_UNION: // UNION
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6583 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_UNIQUE: // UNIQUE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6589 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_UNKNOWN: // UNKNOWN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6595 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_UNLISTEN: // UNLISTEN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6601 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_UNLOGGED: // UNLOGGED
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6607 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_UNTIL: // UNTIL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6613 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_UPDATE: // UPDATE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6619 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_USER: // USER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6625 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_USING: // USING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6631 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VACUUM: // VACUUM
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6637 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VALID: // VALID
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6643 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VALIDATE: // VALIDATE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6649 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VALIDATOR: // VALIDATOR
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6655 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VALUE_P: // VALUE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6661 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VALUES: // VALUES
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6667 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VARCHAR: // VARCHAR
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6673 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VARIADIC: // VARIADIC
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6679 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VARYING: // VARYING
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6685 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VERBOSE: // VERBOSE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6691 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VERSION_P: // VERSION_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6697 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VIEW: // VIEW
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6703 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VIEWS: // VIEWS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6709 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VIRTUAL: // VIRTUAL
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6715 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VOLATILE: // VOLATILE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6721 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_WHEN: // WHEN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6727 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_WHERE: // WHERE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6733 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_WHITESPACE_P: // WHITESPACE_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6739 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_WINDOW: // WINDOW
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6745 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_WITH: // WITH
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6751 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_WITHIN: // WITHIN
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6757 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_WITHOUT: // WITHOUT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6763 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_WORK: // WORK
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6769 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_WRAPPER: // WRAPPER
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6775 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_WRITE: // WRITE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6781 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_XML_P: // XML_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6787 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_XMLATTRIBUTES: // XMLATTRIBUTES
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6793 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_XMLCONCAT: // XMLCONCAT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6799 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_XMLELEMENT: // XMLELEMENT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6805 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_XMLEXISTS: // XMLEXISTS
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6811 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_XMLFOREST: // XMLFOREST
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6817 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_XMLNAMESPACES: // XMLNAMESPACES
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6823 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_XMLPARSE: // XMLPARSE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6829 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_XMLPI: // XMLPI
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6835 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_XMLROOT: // XMLROOT
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6841 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_XMLSERIALIZE: // XMLSERIALIZE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6847 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_XMLTABLE: // XMLTABLE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6853 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_YEAR_P: // YEAR_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6859 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_YES_P: // YES_P
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6865 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ZONE: // ZONE
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6871 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_stmtmulti: // stmtmulti
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6877 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_toplevel_stmt: // toplevel_stmt
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6883 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_stmt: // stmt
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6889 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SelectStmt: // SelectStmt
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6895 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PipeSQLStmt: // PipeSQLStmt
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6901 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_classic_select_and_pipe_sql_with_parens: // classic_select_and_pipe_sql_with_parens
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6907 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_select_with_parens: // select_with_parens
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6913 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_pipe_sql_with_parens: // pipe_sql_with_parens
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6919 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_select_no_parens: // select_no_parens
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6925 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_pipe_sql_no_parens: // pipe_sql_no_parens
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6931 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_pipe_start: // pipe_start
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6937 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_pipe_or_select_clause: // pipe_or_select_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6943 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_select_clause: // select_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6949 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_PreparableStmt: // PreparableStmt
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6955 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CopyStmt: // CopyStmt
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6961 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_copy_file_name: // copy_file_name
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6967 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_copy_options: // copy_options
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6973 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_copy_opt_list: // copy_opt_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6979 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_copy_opt_item: // copy_opt_item
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6985 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_copy_delimiter: // copy_delimiter
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6991 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_VariableSetStmt: // VariableSetStmt
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 6997 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_set_rest: // set_rest
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7003 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_generic_set: // generic_set
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7009 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_set_rest_more: // set_rest_more
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7015 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_var_name: // var_name
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7021 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_var_list: // var_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7027 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_var_value: // var_value
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7033 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_boolean_or_string: // opt_boolean_or_string
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7039 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NonReservedWord_or_Sconst: // NonReservedWord_or_Sconst
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7045 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NonReservedWord: // NonReservedWord
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7051 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_simple_select: // simple_select
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7057 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_with_clause: // with_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7063 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_distinct_clause: // distinct_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7069 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_cte_list: // cte_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7075 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_common_table_expr: // common_table_expr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7081 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_from_clause: // opt_from_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7087 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_from_clause: // from_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7093 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_from_list: // from_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7099 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_table_ref: // table_ref
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7105 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_set_quantifier: // set_quantifier
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7111 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_group_clause: // group_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7117 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_group_clause_with_alias: // group_clause_with_alias
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7123 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_group_by_list: // group_by_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7129 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_group_by_list_with_alias: // group_by_list_with_alias
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7135 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_rollup_clause: // rollup_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7141 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_group_by_item: // group_by_item
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7147 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_group_by_item_with_alias: // group_by_item_with_alias
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7153 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_having_clause: // having_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7159 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_joined_table: // joined_table
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7165 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_alias_clause: // alias_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7171 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_nulls_order: // opt_nulls_order
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7177 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_alias_clause: // opt_alias_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7183 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_asc_desc: // opt_asc_desc
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7189 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_join_type: // join_type
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7195 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_join_qual: // join_qual
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7201 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_relation_expr: // relation_expr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7207 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_asymmetric: // opt_asymmetric
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7213 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_sort_clause: // opt_sort_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7219 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_sort_clause: // sort_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7225 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_sortby_list: // sortby_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7231 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_sortby: // sortby
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7237 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_select_limit: // select_limit
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7243 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_select_limit: // opt_select_limit
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7249 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_limit_clause: // limit_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7255 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_offset_clause: // offset_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7261 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_select_limit_value: // select_limit_value
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7267 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_select_offset_value: // select_offset_value
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7273 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_values_clause: // values_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7279 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_where_clause: // where_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7285 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_a_expr: // a_expr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7291 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_and_a_expr: // and_a_expr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7297 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_or_a_expr: // or_a_expr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7303 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_b_expr: // b_expr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7309 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_c_expr: // c_expr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7315 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_basicComparisonType: // basicComparisonType
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7321 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_in_expr: // in_expr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7327 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_case_expr: // case_expr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7333 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_when_clause_list: // when_clause_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7339 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_when_clause: // when_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7345 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_case_default: // case_default
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7351 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_case_arg: // case_arg
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7357 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_columnref_list: // columnref_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7363 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_columnref: // columnref
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7369 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_func_application: // func_application
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7375 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_func_expr: // func_expr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7381 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_window_func_expr: // window_func_expr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7387 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_func_arg_list_opt: // func_arg_list_opt
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7393 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_func_arg_list: // func_arg_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7399 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_expr_list: // expr_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7405 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_expr_list_with_alias: // expr_list_with_alias
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7411 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_func_arg_expr: // func_arg_expr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7417 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_func_expr_common_subexpr: // func_expr_common_subexpr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7423 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_cast_expr: // cast_expr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7429 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_extract_list: // extract_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7435 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_extract_arg: // extract_arg
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7441 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_substr_list: // substr_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7447 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_over_clause: // over_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7453 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_window_specification: // window_specification
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7459 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_indirection: // indirection
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7465 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_indirection_el: // indirection_el
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7471 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_target_list: // opt_target_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7477 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_target_list: // target_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7483 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_target_el: // target_el
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7489 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_partition_clause: // opt_partition_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7495 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_frame_clause: // opt_frame_clause
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7501 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_frame_extent: // frame_extent
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7507 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_frame_bound: // frame_bound
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7513 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_any_operator: // any_operator
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7519 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_qual_Op: // qual_Op
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7525 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_sub_type: // sub_type
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7531 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_all_Op: // all_Op
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7537 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ColId: // ColId
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7543 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_type_function_name: // type_function_name
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7549 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_type_func_name_keyword: // type_func_name_keyword
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7555 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ColLabel: // ColLabel
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7561 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_BareColLabel: // BareColLabel
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7567 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_reserved_keyword: // reserved_keyword
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7573 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_unreserved_keyword: // unreserved_keyword
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7579 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_col_name_keyword: // col_name_keyword
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7585 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_qualified_name: // qualified_name
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7591 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_name_list: // opt_name_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7597 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_name_list: // name_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7603 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_name: // name
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7609 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_attr_name: // attr_name
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7615 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_func_name: // func_name
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7621 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CreateStmt: // CreateStmt
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7627 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OptTemp: // OptTemp
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7633 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_OptTableElementList: // OptTableElementList
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7639 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TableElementList: // TableElementList
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7645 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TableElement: // TableElement
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7651 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_TableConstraint: // TableConstraint
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7657 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_columnElement: // columnElement
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7663 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ColQualList: // ColQualList
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7669 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ColConstraint: // ColConstraint
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7675 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ColConstraintElem: // ColConstraintElem
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7681 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ConstraintElem: // ConstraintElem
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7687 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_Type: // Type
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7693 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SimpleType: // SimpleType
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7699 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_type_modifiers: // opt_type_modifiers
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7705 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_type_modifiers: // type_modifiers
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7711 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_type_modifier: // type_modifier
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7717 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ConstTypename: // ConstTypename
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7723 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_NumericOnly: // NumericOnly
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7729 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_Numeric_with_opt_lenghth: // Numeric_with_opt_lenghth
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7735 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_Numeric: // Numeric
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7741 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_Character: // Character
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7747 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ConstCharacter: // ConstCharacter
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7753 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CharacterWithLength: // CharacterWithLength
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7759 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_CharacterWithoutLength: // CharacterWithoutLength
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7765 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_character: // character
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7771 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_varying: // opt_varying
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7777 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ConstDatetime: // ConstDatetime
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7783 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_InsertStmt: // InsertStmt
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7789 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_insert_target: // insert_target
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7795 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_insert_rest: // insert_rest
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7801 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_insert_column_list: // insert_column_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7807 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_insert_column_item: // insert_column_item
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7813 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_AexprConst: // AexprConst
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7819 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_Iconst: // Iconst
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7825 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_SignedIconst: // SignedIconst
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7831 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_Fconst: // Fconst
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7837 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_Sconst: // Sconst
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7843 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_Bconst: // Bconst
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7849 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_ConstInterval: // ConstInterval
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7855 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_opt_interval: // opt_interval
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7861 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_Typename: // Typename
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7867 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_pipe_operator: // pipe_operator
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7873 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_agg_expr: // agg_expr
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7879 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_func_expr_list: // func_expr_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7885 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      case symbol_kind::S_set_list: // set_list
#line 388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {  }
#line 7891 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
        break;

      default:
        break;
    }
        yyo << ')';
      }
  }
#endif

  void
  parser::yypush_ (const char* m, YY_MOVE_REF (stack_symbol_type) sym)
  {
    if (m)
      YY_SYMBOL_PRINT (m, sym);
    yystack_.push (YY_MOVE (sym));
  }

  void
  parser::yypush_ (const char* m, state_type s, YY_MOVE_REF (symbol_type) sym)
  {
#if 201103L <= YY_CPLUSPLUS
    yypush_ (m, stack_symbol_type (s, std::move (sym)));
#else
    stack_symbol_type ss (s, sym);
    yypush_ (m, ss);
#endif
  }

  void
  parser::yypop_ (int n) YY_NOEXCEPT
  {
    yystack_.pop (n);
  }

#if YYDEBUG
  std::ostream&
  parser::debug_stream () const
  {
    return *yycdebug_;
  }

  void
  parser::set_debug_stream (std::ostream& o)
  {
    yycdebug_ = &o;
  }


  parser::debug_level_type
  parser::debug_level () const
  {
    return yydebug_;
  }

  void
  parser::set_debug_level (debug_level_type l)
  {
    yydebug_ = l;
  }
#endif // YYDEBUG

  parser::state_type
  parser::yy_lr_goto_state_ (state_type yystate, int yysym)
  {
    int yyr = yypgoto_[yysym - YYNTOKENS] + yystate;
    if (0 <= yyr && yyr <= yylast_ && yycheck_[yyr] == yystate)
      return yytable_[yyr];
    else
      return yydefgoto_[yysym - YYNTOKENS];
  }

  bool
  parser::yy_pact_value_is_default_ (int yyvalue) YY_NOEXCEPT
  {
    return yyvalue == yypact_ninf_;
  }

  bool
  parser::yy_table_value_is_error_ (int yyvalue) YY_NOEXCEPT
  {
    return yyvalue == yytable_ninf_;
  }

  int
  parser::operator() ()
  {
    return parse ();
  }

  int
  parser::parse ()
  {
    int yyn;
    /// Length of the RHS of the rule being reduced.
    int yylen = 0;

    // Error handling.
    int yynerrs_ = 0;
    int yyerrstatus_ = 0;

    /// The lookahead symbol.
    symbol_type yyla;

    /// The locations where the error started and ended.
    stack_symbol_type yyerror_range[3];

    /// The return value of parse ().
    int yyresult;

    // Discard the LAC context in case there still is one left from a
    // previous invocation.
    yy_lac_discard_ ("init");

#if YY_EXCEPTIONS
    try
#endif // YY_EXCEPTIONS
      {
    YYCDEBUG << "Starting parse\n";


    /* Initialize the stack.  The initial state will be set in
       yynewstate, since the latter expects the semantical and the
       location values to have been already stored, initialize these
       stacks with a primary value.  */
    yystack_.clear ();
    yypush_ (YY_NULLPTR, 0, YY_MOVE (yyla));

  /*-----------------------------------------------.
  | yynewstate -- push a new symbol on the stack.  |
  `-----------------------------------------------*/
  yynewstate:
    YYCDEBUG << "Entering state " << int (yystack_[0].state) << '\n';
    YY_STACK_PRINT ();

    // Accept?
    if (yystack_[0].state == yyfinal_)
      YYACCEPT;

    goto yybackup;


  /*-----------.
  | yybackup.  |
  `-----------*/
  yybackup:
    // Try to take a decision without lookahead.
    yyn = yypact_[+yystack_[0].state];
    if (yy_pact_value_is_default_ (yyn))
      goto yydefault;

    // Read a lookahead token.
    if (yyla.empty ())
      {
        YYCDEBUG << "Reading a token\n";
#if YY_EXCEPTIONS
        try
#endif // YY_EXCEPTIONS
          {
            symbol_type yylookahead (yylex (drv));
            yyla.move (yylookahead);
          }
#if YY_EXCEPTIONS
        catch (const syntax_error& yyexc)
          {
            YYCDEBUG << "Caught exception: " << yyexc.what() << '\n';
            error (yyexc);
            goto yyerrlab1;
          }
#endif // YY_EXCEPTIONS
      }
    YY_SYMBOL_PRINT ("Next token is", yyla);

    if (yyla.kind () == symbol_kind::S_YYerror)
    {
      // The scanner already issued an error message, process directly
      // to error recovery.  But do not keep the error token as
      // lookahead, it is too special and may lead us to an endless
      // loop in error recovery. */
      yyla.kind_ = symbol_kind::S_YYUNDEF;
      goto yyerrlab1;
    }

    /* If the proper action on seeing token YYLA.TYPE is to reduce or
       to detect an error, take that action.  */
    yyn += yyla.kind ();
    if (yyn < 0 || yylast_ < yyn || yycheck_[yyn] != yyla.kind ())
      {
        if (!yy_lac_establish_ (yyla.kind ()))
          goto yyerrlab;
        goto yydefault;
      }

    // Reduce or error.
    yyn = yytable_[yyn];
    if (yyn <= 0)
      {
        if (yy_table_value_is_error_ (yyn))
          goto yyerrlab;
        if (!yy_lac_establish_ (yyla.kind ()))
          goto yyerrlab;

        yyn = -yyn;
        goto yyreduce;
      }

    // Count tokens shifted since error; after three, turn off error status.
    if (yyerrstatus_)
      --yyerrstatus_;

    // Shift the lookahead token.
    yypush_ ("Shifting", state_type (yyn), YY_MOVE (yyla));
    yy_lac_discard_ ("shift");
    goto yynewstate;


  /*-----------------------------------------------------------.
  | yydefault -- do the default action for the current state.  |
  `-----------------------------------------------------------*/
  yydefault:
    yyn = yydefact_[+yystack_[0].state];
    if (yyn == 0)
      goto yyerrlab;
    goto yyreduce;


  /*-----------------------------.
  | yyreduce -- do a reduction.  |
  `-----------------------------*/
  yyreduce:
    yylen = yyr2_[yyn];
    {
      stack_symbol_type yylhs;
      yylhs.state = yy_lr_goto_state_ (yystack_[yylen].state, yyr1_[yyn]);
      /* Variants are always initialized to an empty instance of the
         correct type. The default '$$ = $1' action is NOT applied
         when using variants.  */
      switch (yyr1_[yyn])
    {
      case symbol_kind::S_distinct_clause: // distinct_clause
      case symbol_kind::S_set_quantifier: // set_quantifier
      case symbol_kind::S_opt_asymmetric: // opt_asymmetric
      case symbol_kind::S_OptTemp: // OptTemp
      case symbol_kind::S_opt_varying: // opt_varying
        yylhs.value.emplace< bool > ();
        break;

      case symbol_kind::S_ICONST: // ICONST
        yylhs.value.emplace< int > ();
        break;

      case symbol_kind::S_when_clause: // when_clause
        yylhs.value.emplace< lingodb::ast::CaseExpression::CaseCheck > ();
        break;

      case symbol_kind::S_basicComparisonType: // basicComparisonType
        yylhs.value.emplace< lingodb::ast::ExpressionType > ();
        break;

      case symbol_kind::S_join_type: // join_type
        yylhs.value.emplace< lingodb::ast::JoinType > ();
        break;

      case symbol_kind::S_Type: // Type
      case symbol_kind::S_SimpleType: // SimpleType
      case symbol_kind::S_ConstTypename: // ConstTypename
      case symbol_kind::S_Numeric_with_opt_lenghth: // Numeric_with_opt_lenghth
      case symbol_kind::S_Numeric: // Numeric
      case symbol_kind::S_Character: // Character
      case symbol_kind::S_ConstCharacter: // ConstCharacter
      case symbol_kind::S_CharacterWithLength: // CharacterWithLength
      case symbol_kind::S_CharacterWithoutLength: // CharacterWithoutLength
      case symbol_kind::S_character: // character
      case symbol_kind::S_ConstDatetime: // ConstDatetime
      case symbol_kind::S_ConstInterval: // ConstInterval
      case symbol_kind::S_Typename: // Typename
        yylhs.value.emplace< lingodb::ast::LogicalTypeWithMods > ();
        break;

      case symbol_kind::S_opt_nulls_order: // opt_nulls_order
        yylhs.value.emplace< lingodb::ast::OrderByNullType > ();
        break;

      case symbol_kind::S_opt_asc_desc: // opt_asc_desc
        yylhs.value.emplace< lingodb::ast::OrderType > ();
        break;

      case symbol_kind::S_sub_type: // sub_type
        yylhs.value.emplace< lingodb::ast::SubqueryType > ();
        break;

      case symbol_kind::S_join_qual: // join_qual
        yylhs.value.emplace< lingodb::ast::jointCondOrUsingCols > ();
        break;

      case symbol_kind::S_opt_sort_clause: // opt_sort_clause
        yylhs.value.emplace< std::optional<std::shared_ptr<lingodb::ast::OrderByModifier>> > ();
        break;

      case symbol_kind::S_case_arg: // case_arg
        yylhs.value.emplace< std::optional<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
        break;

      case symbol_kind::S_opt_select_limit: // opt_select_limit
        yylhs.value.emplace< std::optional<std::shared_ptr<lingodb::ast::ResultModifier>> > ();
        break;

      case symbol_kind::S_opt_interval: // opt_interval
        yylhs.value.emplace< std::optional<std::string> > ();
        break;

      case symbol_kind::S_copy_opt_item: // copy_opt_item
        yylhs.value.emplace< std::pair<std::string, std::string> > ();
        break;

      case symbol_kind::S_alias_clause: // alias_clause
      case symbol_kind::S_opt_alias_clause: // opt_alias_clause
        yylhs.value.emplace< std::pair<std::string, std::vector<std::string>> > ();
        break;

      case symbol_kind::S_extract_arg: // extract_arg
        yylhs.value.emplace< std::shared_ptr<ast::ConstantExpression> > ();
        break;

      case symbol_kind::S_CopyStmt: // CopyStmt
        yylhs.value.emplace< std::shared_ptr<ast::CopyNode> > ();
        break;

      case symbol_kind::S_VariableSetStmt: // VariableSetStmt
      case symbol_kind::S_set_rest: // set_rest
      case symbol_kind::S_generic_set: // generic_set
      case symbol_kind::S_set_rest_more: // set_rest_more
        yylhs.value.emplace< std::shared_ptr<ast::SetVariableStatement> > ();
        break;

      case symbol_kind::S_agg_expr: // agg_expr
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::AggregationNode> > ();
        break;

      case symbol_kind::S_toplevel_stmt: // toplevel_stmt
      case symbol_kind::S_stmt: // stmt
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::AstNode> > ();
        break;

      case symbol_kind::S_and_a_expr: // and_a_expr
      case symbol_kind::S_or_a_expr: // or_a_expr
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::ConjunctionExpression> > ();
        break;

      case symbol_kind::S_ColConstraint: // ColConstraint
      case symbol_kind::S_ColConstraintElem: // ColConstraintElem
      case symbol_kind::S_ConstraintElem: // ConstraintElem
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::Constraint> > ();
        break;

      case symbol_kind::S_CreateStmt: // CreateStmt
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::CreateNode> > ();
        break;

      case symbol_kind::S_from_list: // from_list
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::CrossProductRef> > ();
        break;

      case symbol_kind::S_values_clause: // values_clause
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::ExpressionListRef> > ();
        break;

      case symbol_kind::S_func_application: // func_application
      case symbol_kind::S_func_expr: // func_expr
      case symbol_kind::S_func_expr_common_subexpr: // func_expr_common_subexpr
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::FunctionExpression> > ();
        break;

      case symbol_kind::S_group_clause: // group_clause
      case symbol_kind::S_group_clause_with_alias: // group_clause_with_alias
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::GroupByNode> > ();
        break;

      case symbol_kind::S_InsertStmt: // InsertStmt
      case symbol_kind::S_insert_rest: // insert_rest
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::InsertNode> > ();
        break;

      case symbol_kind::S_select_limit: // select_limit
      case symbol_kind::S_limit_clause: // limit_clause
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::LimitModifier> > ();
        break;

      case symbol_kind::S_sortby: // sortby
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::OrderByElement> > ();
        break;

      case symbol_kind::S_sort_clause: // sort_clause
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::OrderByModifier> > ();
        break;

      case symbol_kind::S_var_value: // var_value
      case symbol_kind::S_opt_boolean_or_string: // opt_boolean_or_string
      case symbol_kind::S_NonReservedWord_or_Sconst: // NonReservedWord_or_Sconst
      case symbol_kind::S_group_by_item: // group_by_item
      case symbol_kind::S_group_by_item_with_alias: // group_by_item_with_alias
      case symbol_kind::S_having_clause: // having_clause
      case symbol_kind::S_offset_clause: // offset_clause
      case symbol_kind::S_select_limit_value: // select_limit_value
      case symbol_kind::S_select_offset_value: // select_offset_value
      case symbol_kind::S_where_clause: // where_clause
      case symbol_kind::S_a_expr: // a_expr
      case symbol_kind::S_b_expr: // b_expr
      case symbol_kind::S_c_expr: // c_expr
      case symbol_kind::S_case_expr: // case_expr
      case symbol_kind::S_case_default: // case_default
      case symbol_kind::S_columnref: // columnref
      case symbol_kind::S_func_arg_expr: // func_arg_expr
      case symbol_kind::S_cast_expr: // cast_expr
      case symbol_kind::S_indirection: // indirection
      case symbol_kind::S_indirection_el: // indirection_el
      case symbol_kind::S_target_el: // target_el
      case symbol_kind::S_NumericOnly: // NumericOnly
      case symbol_kind::S_AexprConst: // AexprConst
      case symbol_kind::S_Iconst: // Iconst
      case symbol_kind::S_SignedIconst: // SignedIconst
      case symbol_kind::S_Fconst: // Fconst
      case symbol_kind::S_Sconst: // Sconst
      case symbol_kind::S_Bconst: // Bconst
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::ParsedExpression> > ();
        break;

      case symbol_kind::S_pipe_start: // pipe_start
      case symbol_kind::S_pipe_operator: // pipe_operator
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::PipeOperator> > ();
        break;

      case symbol_kind::S_select_with_parens: // select_with_parens
      case symbol_kind::S_select_no_parens: // select_no_parens
      case symbol_kind::S_select_clause: // select_clause
      case symbol_kind::S_simple_select: // simple_select
      case symbol_kind::S_with_clause: // with_clause
      case symbol_kind::S_cte_list: // cte_list
      case symbol_kind::S_common_table_expr: // common_table_expr
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::QueryNode> > ();
        break;

      case symbol_kind::S_set_list: // set_list
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::SetColumnExpression> > ();
        break;

      case symbol_kind::S_TableElement: // TableElement
      case symbol_kind::S_TableConstraint: // TableConstraint
      case symbol_kind::S_columnElement: // columnElement
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::TableElement> > ();
        break;

      case symbol_kind::S_SelectStmt: // SelectStmt
      case symbol_kind::S_PipeSQLStmt: // PipeSQLStmt
      case symbol_kind::S_classic_select_and_pipe_sql_with_parens: // classic_select_and_pipe_sql_with_parens
      case symbol_kind::S_pipe_sql_with_parens: // pipe_sql_with_parens
      case symbol_kind::S_pipe_sql_no_parens: // pipe_sql_no_parens
      case symbol_kind::S_pipe_or_select_clause: // pipe_or_select_clause
      case symbol_kind::S_PreparableStmt: // PreparableStmt
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::TableProducer> > ();
        break;

      case symbol_kind::S_opt_from_clause: // opt_from_clause
      case symbol_kind::S_from_clause: // from_clause
      case symbol_kind::S_table_ref: // table_ref
      case symbol_kind::S_joined_table: // joined_table
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::TableRef> > ();
        break;

      case symbol_kind::S_opt_target_list: // opt_target_list
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::TargetList> > ();
        break;

      case symbol_kind::S_type_modifier: // type_modifier
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::Value> > ();
        break;

      case symbol_kind::S_window_func_expr: // window_func_expr
      case symbol_kind::S_over_clause: // over_clause
      case symbol_kind::S_window_specification: // window_specification
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::WindowExpression> > ();
        break;

      case symbol_kind::S_opt_frame_clause: // opt_frame_clause
      case symbol_kind::S_frame_extent: // frame_extent
      case symbol_kind::S_frame_bound: // frame_bound
        yylhs.value.emplace< std::shared_ptr<lingodb::ast::WindowFrame> > ();
        break;

      case symbol_kind::S_FCONST: // FCONST
      case symbol_kind::S_IDENT: // IDENT
      case symbol_kind::S_IDENTIFIER: // "identifier"
      case symbol_kind::S_STRING_VALUE: // STRING_VALUE
      case symbol_kind::S_BIT_VALUE: // "bit_string"
      case symbol_kind::S_HEX_VALUE: // "hex_string"
      case symbol_kind::S_NATIONAL_VALUE: // "nat_string"
      case symbol_kind::S_PERCENT: // "%"
      case symbol_kind::S_PLUS: // "+"
      case symbol_kind::S_SLASH: // "/"
      case symbol_kind::S_STAR: // "*"
      case symbol_kind::S_MINUS: // "-"
      case symbol_kind::S_EQUAL: // "="
      case symbol_kind::S_NOT_EQUAL: // "<>"
      case symbol_kind::S_LESS_EQUAL: // "<="
      case symbol_kind::S_LESS: // "<"
      case symbol_kind::S_GREATER_EQUAL: // ">="
      case symbol_kind::S_GREATER: // ">"
      case symbol_kind::S_UIDENT: // UIDENT
      case symbol_kind::S_SCONST: // SCONST
      case symbol_kind::S_USCONST: // USCONST
      case symbol_kind::S_BCONST: // BCONST
      case symbol_kind::S_XCONST: // XCONST
      case symbol_kind::S_Op: // Op
      case symbol_kind::S_TYPECAST: // TYPECAST
      case symbol_kind::S_ABORT_P: // ABORT_P
      case symbol_kind::S_ABSENT: // ABSENT
      case symbol_kind::S_ABSOLUTE_P: // ABSOLUTE_P
      case symbol_kind::S_ACCESS: // ACCESS
      case symbol_kind::S_ACTION: // ACTION
      case symbol_kind::S_ADD_P: // ADD_P
      case symbol_kind::S_ADMIN: // ADMIN
      case symbol_kind::S_AFTER: // AFTER
      case symbol_kind::S_AGGREGATE: // AGGREGATE
      case symbol_kind::S_ALL: // ALL
      case symbol_kind::S_ALSO: // ALSO
      case symbol_kind::S_ALTER: // ALTER
      case symbol_kind::S_ALWAYS: // ALWAYS
      case symbol_kind::S_ANALYSE: // ANALYSE
      case symbol_kind::S_ANALYZE: // ANALYZE
      case symbol_kind::S_AND: // AND
      case symbol_kind::S_ANY: // ANY
      case symbol_kind::S_ARRAY: // ARRAY
      case symbol_kind::S_AS: // AS
      case symbol_kind::S_ASC: // ASC
      case symbol_kind::S_ASENSITIVE: // ASENSITIVE
      case symbol_kind::S_ASSERTION: // ASSERTION
      case symbol_kind::S_ASSIGNMENT: // ASSIGNMENT
      case symbol_kind::S_ASYMMETRIC: // ASYMMETRIC
      case symbol_kind::S_ATOMIC: // ATOMIC
      case symbol_kind::S_AT: // AT
      case symbol_kind::S_ATTACH: // ATTACH
      case symbol_kind::S_ATTRIBUTE: // ATTRIBUTE
      case symbol_kind::S_AUTHORIZATION: // AUTHORIZATION
      case symbol_kind::S_BACKWARD: // BACKWARD
      case symbol_kind::S_BEFORE: // BEFORE
      case symbol_kind::S_BEGIN_P: // BEGIN_P
      case symbol_kind::S_BETWEEN: // BETWEEN
      case symbol_kind::S_BIGINT: // BIGINT
      case symbol_kind::S_BINARY: // BINARY
      case symbol_kind::S_BIT: // BIT
      case symbol_kind::S_BOOLEAN_P: // BOOLEAN_P
      case symbol_kind::S_BOTH: // BOTH
      case symbol_kind::S_BREADTH: // BREADTH
      case symbol_kind::S_BY: // BY
      case symbol_kind::S_CACHE: // CACHE
      case symbol_kind::S_CALL: // CALL
      case symbol_kind::S_CALLED: // CALLED
      case symbol_kind::S_CASCADE: // CASCADE
      case symbol_kind::S_CASCADED: // CASCADED
      case symbol_kind::S_CASE: // CASE
      case symbol_kind::S_CAST: // CAST
      case symbol_kind::S_CATALOG_P: // CATALOG_P
      case symbol_kind::S_CHAIN: // CHAIN
      case symbol_kind::S_CHAR_P: // CHAR_P
      case symbol_kind::S_CHARACTER: // CHARACTER
      case symbol_kind::S_CHARACTERISTICS: // CHARACTERISTICS
      case symbol_kind::S_CHECK: // CHECK
      case symbol_kind::S_CHECKPOINT: // CHECKPOINT
      case symbol_kind::S_CLASS: // CLASS
      case symbol_kind::S_CLOSE: // CLOSE
      case symbol_kind::S_CLUSTER: // CLUSTER
      case symbol_kind::S_COALESCE: // COALESCE
      case symbol_kind::S_COLLATE: // COLLATE
      case symbol_kind::S_COLLATION: // COLLATION
      case symbol_kind::S_COLUMN: // COLUMN
      case symbol_kind::S_COLUMNS: // COLUMNS
      case symbol_kind::S_COMMENT: // COMMENT
      case symbol_kind::S_COMMENTS: // COMMENTS
      case symbol_kind::S_COMMIT: // COMMIT
      case symbol_kind::S_COMMITTED: // COMMITTED
      case symbol_kind::S_COMPRESSION: // COMPRESSION
      case symbol_kind::S_CONCURRENTLY: // CONCURRENTLY
      case symbol_kind::S_CONDITIONAL: // CONDITIONAL
      case symbol_kind::S_CONFIGURATION: // CONFIGURATION
      case symbol_kind::S_CONFLICT: // CONFLICT
      case symbol_kind::S_CONNECTION: // CONNECTION
      case symbol_kind::S_CONSTRAINT: // CONSTRAINT
      case symbol_kind::S_CONSTRAINTS: // CONSTRAINTS
      case symbol_kind::S_CONTENT_P: // CONTENT_P
      case symbol_kind::S_CONTINUE_P: // CONTINUE_P
      case symbol_kind::S_CONVERSION_P: // CONVERSION_P
      case symbol_kind::S_COPY: // COPY
      case symbol_kind::S_COST: // COST
      case symbol_kind::S_CREATE: // CREATE
      case symbol_kind::S_CROSS: // CROSS
      case symbol_kind::S_CSV: // CSV
      case symbol_kind::S_CUBE: // CUBE
      case symbol_kind::S_CURRENT_P: // CURRENT_P
      case symbol_kind::S_CURRENT_CATALOG: // CURRENT_CATALOG
      case symbol_kind::S_CURRENT_DATE: // CURRENT_DATE
      case symbol_kind::S_CURRENT_ROLE: // CURRENT_ROLE
      case symbol_kind::S_CURRENT_SCHEMA: // CURRENT_SCHEMA
      case symbol_kind::S_CURRENT_TIME: // CURRENT_TIME
      case symbol_kind::S_CURRENT_TIMESTAMP: // CURRENT_TIMESTAMP
      case symbol_kind::S_CURRENT_USER: // CURRENT_USER
      case symbol_kind::S_CURSOR: // CURSOR
      case symbol_kind::S_CYCLE: // CYCLE
      case symbol_kind::S_DATA_P: // DATA_P
      case symbol_kind::S_DATABASE: // DATABASE
      case symbol_kind::S_DAY_P: // DAY_P
      case symbol_kind::S_DEALLOCATE: // DEALLOCATE
      case symbol_kind::S_DEC: // DEC
      case symbol_kind::S_DECIMAL_P: // DECIMAL_P
      case symbol_kind::S_DECLARE: // DECLARE
      case symbol_kind::S_DEFAULT: // DEFAULT
      case symbol_kind::S_DEFAULTS: // DEFAULTS
      case symbol_kind::S_DATE_P: // DATE_P
      case symbol_kind::S_DEFERRABLE: // DEFERRABLE
      case symbol_kind::S_DEFERRED: // DEFERRED
      case symbol_kind::S_DEFINER: // DEFINER
      case symbol_kind::S_DELETE_P: // DELETE_P
      case symbol_kind::S_DELIMITER: // DELIMITER
      case symbol_kind::S_DELIMITERS: // DELIMITERS
      case symbol_kind::S_DEPENDS: // DEPENDS
      case symbol_kind::S_DEPTH: // DEPTH
      case symbol_kind::S_DESC: // DESC
      case symbol_kind::S_DETACH: // DETACH
      case symbol_kind::S_DICTIONARY: // DICTIONARY
      case symbol_kind::S_DISABLE_P: // DISABLE_P
      case symbol_kind::S_DISCARD: // DISCARD
      case symbol_kind::S_DISTINCT: // DISTINCT
      case symbol_kind::S_DO: // DO
      case symbol_kind::S_DOCUMENT_P: // DOCUMENT_P
      case symbol_kind::S_DOMAIN_P: // DOMAIN_P
      case symbol_kind::S_DOUBLE_P: // DOUBLE_P
      case symbol_kind::S_DROP: // DROP
      case symbol_kind::S_EACH: // EACH
      case symbol_kind::S_ELSE: // ELSE
      case symbol_kind::S_EMPTY_P: // EMPTY_P
      case symbol_kind::S_ENABLE_P: // ENABLE_P
      case symbol_kind::S_ENCODING: // ENCODING
      case symbol_kind::S_ENCRYPTED: // ENCRYPTED
      case symbol_kind::S_END_P: // END_P
      case symbol_kind::S_ENFORCED: // ENFORCED
      case symbol_kind::S_ENUM_P: // ENUM_P
      case symbol_kind::S_ERROR_P: // ERROR_P
      case symbol_kind::S_ESCAPE: // ESCAPE
      case symbol_kind::S_EVENT: // EVENT
      case symbol_kind::S_EXCEPT: // EXCEPT
      case symbol_kind::S_EXCLUDE: // EXCLUDE
      case symbol_kind::S_EXCLUDING: // EXCLUDING
      case symbol_kind::S_EXCLUSIVE: // EXCLUSIVE
      case symbol_kind::S_EXECUTE: // EXECUTE
      case symbol_kind::S_EXISTS: // EXISTS
      case symbol_kind::S_EXPLAIN: // EXPLAIN
      case symbol_kind::S_EXPRESSION: // EXPRESSION
      case symbol_kind::S_EXTENSION: // EXTENSION
      case symbol_kind::S_EXTERNAL: // EXTERNAL
      case symbol_kind::S_EXTRACT: // EXTRACT
      case symbol_kind::S_FALSE_P: // FALSE_P
      case symbol_kind::S_FAMILY: // FAMILY
      case symbol_kind::S_FETCH: // FETCH
      case symbol_kind::S_FILTER: // FILTER
      case symbol_kind::S_FINALIZE: // FINALIZE
      case symbol_kind::S_FIRST_P: // FIRST_P
      case symbol_kind::S_FLOAT_P: // FLOAT_P
      case symbol_kind::S_FOLLOWING: // FOLLOWING
      case symbol_kind::S_FOR: // FOR
      case symbol_kind::S_FORCE: // FORCE
      case symbol_kind::S_FOREIGN: // FOREIGN
      case symbol_kind::S_FORMAT: // FORMAT
      case symbol_kind::S_FORWARD: // FORWARD
      case symbol_kind::S_FREEZE: // FREEZE
      case symbol_kind::S_FROM: // FROM
      case symbol_kind::S_FULL: // FULL
      case symbol_kind::S_FUNCTION: // FUNCTION
      case symbol_kind::S_FUNCTIONS: // FUNCTIONS
      case symbol_kind::S_GENERATED: // GENERATED
      case symbol_kind::S_GLOBAL: // GLOBAL
      case symbol_kind::S_GRANT: // GRANT
      case symbol_kind::S_GRANTED: // GRANTED
      case symbol_kind::S_GREATEST: // GREATEST
      case symbol_kind::S_GROUP_P: // GROUP_P
      case symbol_kind::S_GROUPING: // GROUPING
      case symbol_kind::S_GROUPS: // GROUPS
      case symbol_kind::S_HANDLER: // HANDLER
      case symbol_kind::S_HAVING: // HAVING
      case symbol_kind::S_HEADER_P: // HEADER_P
      case symbol_kind::S_HOLD: // HOLD
      case symbol_kind::S_HOUR_P: // HOUR_P
      case symbol_kind::S_IDENTITY_P: // IDENTITY_P
      case symbol_kind::S_IF_P: // IF_P
      case symbol_kind::S_ILIKE: // ILIKE
      case symbol_kind::S_IMMEDIATE: // IMMEDIATE
      case symbol_kind::S_IMMUTABLE: // IMMUTABLE
      case symbol_kind::S_IMPLICIT_P: // IMPLICIT_P
      case symbol_kind::S_IMPORT_P: // IMPORT_P
      case symbol_kind::S_IN_P: // IN_P
      case symbol_kind::S_INCLUDE: // INCLUDE
      case symbol_kind::S_INCLUDING: // INCLUDING
      case symbol_kind::S_INCREMENT: // INCREMENT
      case symbol_kind::S_INDENT: // INDENT
      case symbol_kind::S_INDEX: // INDEX
      case symbol_kind::S_INDEXES: // INDEXES
      case symbol_kind::S_INHERIT: // INHERIT
      case symbol_kind::S_INHERITS: // INHERITS
      case symbol_kind::S_INITIALLY: // INITIALLY
      case symbol_kind::S_INLINE_P: // INLINE_P
      case symbol_kind::S_INNER_P: // INNER_P
      case symbol_kind::S_INOUT: // INOUT
      case symbol_kind::S_INPUT_P: // INPUT_P
      case symbol_kind::S_INSENSITIVE: // INSENSITIVE
      case symbol_kind::S_INSERT: // INSERT
      case symbol_kind::S_INSTEAD: // INSTEAD
      case symbol_kind::S_INT_P: // INT_P
      case symbol_kind::S_INTEGER: // INTEGER
      case symbol_kind::S_INTERSECT: // INTERSECT
      case symbol_kind::S_INTERVAL: // INTERVAL
      case symbol_kind::S_INTO: // INTO
      case symbol_kind::S_INVOKER: // INVOKER
      case symbol_kind::S_IS: // IS
      case symbol_kind::S_ISNULL: // ISNULL
      case symbol_kind::S_ISOLATION: // ISOLATION
      case symbol_kind::S_JOIN: // JOIN
      case symbol_kind::S_JSON: // JSON
      case symbol_kind::S_JSON_ARRAY: // JSON_ARRAY
      case symbol_kind::S_JSON_ARRAYAGG: // JSON_ARRAYAGG
      case symbol_kind::S_JSON_EXISTS: // JSON_EXISTS
      case symbol_kind::S_JSON_OBJECT: // JSON_OBJECT
      case symbol_kind::S_JSON_OBJECTAGG: // JSON_OBJECTAGG
      case symbol_kind::S_JSON_QUERY: // JSON_QUERY
      case symbol_kind::S_JSON_SCALAR: // JSON_SCALAR
      case symbol_kind::S_JSON_SERIALIZE: // JSON_SERIALIZE
      case symbol_kind::S_JSON_TABLE: // JSON_TABLE
      case symbol_kind::S_JSON_VALUE: // JSON_VALUE
      case symbol_kind::S_KEEP: // KEEP
      case symbol_kind::S_KEY: // KEY
      case symbol_kind::S_KEYS: // KEYS
      case symbol_kind::S_LABEL: // LABEL
      case symbol_kind::S_LANGUAGE: // LANGUAGE
      case symbol_kind::S_LARGE_P: // LARGE_P
      case symbol_kind::S_LAST_P: // LAST_P
      case symbol_kind::S_LATERAL_P: // LATERAL_P
      case symbol_kind::S_LEADING: // LEADING
      case symbol_kind::S_LEAKPROOF: // LEAKPROOF
      case symbol_kind::S_LEAST: // LEAST
      case symbol_kind::S_LEFT: // LEFT
      case symbol_kind::S_LEVEL: // LEVEL
      case symbol_kind::S_LIKE: // LIKE
      case symbol_kind::S_LIMIT: // LIMIT
      case symbol_kind::S_LISTEN: // LISTEN
      case symbol_kind::S_LOAD: // LOAD
      case symbol_kind::S_LOCAL: // LOCAL
      case symbol_kind::S_LOCALTIME: // LOCALTIME
      case symbol_kind::S_LOCALTIMESTAMP: // LOCALTIMESTAMP
      case symbol_kind::S_LOCATION: // LOCATION
      case symbol_kind::S_LOCK_P: // LOCK_P
      case symbol_kind::S_LOCKED: // LOCKED
      case symbol_kind::S_LOGGED: // LOGGED
      case symbol_kind::S_MAPPING: // MAPPING
      case symbol_kind::S_MATCH: // MATCH
      case symbol_kind::S_MATCHED: // MATCHED
      case symbol_kind::S_MATERIALIZED: // MATERIALIZED
      case symbol_kind::S_MAXVALUE: // MAXVALUE
      case symbol_kind::S_MERGE: // MERGE
      case symbol_kind::S_MERGE_ACTION: // MERGE_ACTION
      case symbol_kind::S_METHOD: // METHOD
      case symbol_kind::S_MINUTE_P: // MINUTE_P
      case symbol_kind::S_MINVALUE: // MINVALUE
      case symbol_kind::S_MODE: // MODE
      case symbol_kind::S_MONTH_P: // MONTH_P
      case symbol_kind::S_MOVE: // MOVE
      case symbol_kind::S_NAME_P: // NAME_P
      case symbol_kind::S_NAMES: // NAMES
      case symbol_kind::S_NATIONAL: // NATIONAL
      case symbol_kind::S_NATURAL: // NATURAL
      case symbol_kind::S_NCHAR: // NCHAR
      case symbol_kind::S_NESTED: // NESTED
      case symbol_kind::S_NEW: // NEW
      case symbol_kind::S_NEXT: // NEXT
      case symbol_kind::S_NFC: // NFC
      case symbol_kind::S_NFD: // NFD
      case symbol_kind::S_NFKC: // NFKC
      case symbol_kind::S_NFKD: // NFKD
      case symbol_kind::S_NO: // NO
      case symbol_kind::S_NONE: // NONE
      case symbol_kind::S_NORMALIZE: // NORMALIZE
      case symbol_kind::S_NORMALIZED: // NORMALIZED
      case symbol_kind::S_NOT: // NOT
      case symbol_kind::S_NOTHING: // NOTHING
      case symbol_kind::S_NOTIFY: // NOTIFY
      case symbol_kind::S_NOTNULL: // NOTNULL
      case symbol_kind::S_NOWAIT: // NOWAIT
      case symbol_kind::S_NULL_P: // NULL_P
      case symbol_kind::S_NULLIF: // NULLIF
      case symbol_kind::S_NULLS_P: // NULLS_P
      case symbol_kind::S_NUMERIC: // NUMERIC
      case symbol_kind::S_OBJECT_P: // OBJECT_P
      case symbol_kind::S_OBJECTS_P: // OBJECTS_P
      case symbol_kind::S_OF: // OF
      case symbol_kind::S_OFF: // OFF
      case symbol_kind::S_OFFSET: // OFFSET
      case symbol_kind::S_OIDS: // OIDS
      case symbol_kind::S_OLD: // OLD
      case symbol_kind::S_OMIT: // OMIT
      case symbol_kind::S_ON: // ON
      case symbol_kind::S_ONLY: // ONLY
      case symbol_kind::S_OPERATOR: // OPERATOR
      case symbol_kind::S_OPTION: // OPTION
      case symbol_kind::S_OPTIONS: // OPTIONS
      case symbol_kind::S_OR: // OR
      case symbol_kind::S_ORDER: // ORDER
      case symbol_kind::S_ORDINALITY: // ORDINALITY
      case symbol_kind::S_OTHERS: // OTHERS
      case symbol_kind::S_OUT_P: // OUT_P
      case symbol_kind::S_OUTER_P: // OUTER_P
      case symbol_kind::S_OVER: // OVER
      case symbol_kind::S_OVERLAPS: // OVERLAPS
      case symbol_kind::S_OVERLAY: // OVERLAY
      case symbol_kind::S_OVERRIDING: // OVERRIDING
      case symbol_kind::S_OWNED: // OWNED
      case symbol_kind::S_OWNER: // OWNER
      case symbol_kind::S_PARALLEL: // PARALLEL
      case symbol_kind::S_PARAMETER: // PARAMETER
      case symbol_kind::S_PARSER: // PARSER
      case symbol_kind::S_PARTIAL: // PARTIAL
      case symbol_kind::S_PARTITION: // PARTITION
      case symbol_kind::S_PASSING: // PASSING
      case symbol_kind::S_PASSWORD: // PASSWORD
      case symbol_kind::S_PATH: // PATH
      case symbol_kind::S_PERIOD: // PERIOD
      case symbol_kind::S_PLACING: // PLACING
      case symbol_kind::S_PLAN: // PLAN
      case symbol_kind::S_PLANS: // PLANS
      case symbol_kind::S_POLICY: // POLICY
      case symbol_kind::S_POSITION: // POSITION
      case symbol_kind::S_PRECEDING: // PRECEDING
      case symbol_kind::S_PRECISION: // PRECISION
      case symbol_kind::S_PRESERVE: // PRESERVE
      case symbol_kind::S_PREPARE: // PREPARE
      case symbol_kind::S_PREPARED: // PREPARED
      case symbol_kind::S_PRIMARY: // PRIMARY
      case symbol_kind::S_PRIOR: // PRIOR
      case symbol_kind::S_PRIVILEGES: // PRIVILEGES
      case symbol_kind::S_PROCEDURAL: // PROCEDURAL
      case symbol_kind::S_PROCEDURE: // PROCEDURE
      case symbol_kind::S_PROCEDURES: // PROCEDURES
      case symbol_kind::S_PROGRAM: // PROGRAM
      case symbol_kind::S_PUBLICATION: // PUBLICATION
      case symbol_kind::S_QUOTES: // QUOTES
      case symbol_kind::S_EXTEND: // EXTEND
      case symbol_kind::S_RANGE: // RANGE
      case symbol_kind::S_READ: // READ
      case symbol_kind::S_REAL: // REAL
      case symbol_kind::S_REASSIGN: // REASSIGN
      case symbol_kind::S_RECURSIVE: // RECURSIVE
      case symbol_kind::S_REF_P: // REF_P
      case symbol_kind::S_REFERENCES: // REFERENCES
      case symbol_kind::S_REFERENCING: // REFERENCING
      case symbol_kind::S_REFRESH: // REFRESH
      case symbol_kind::S_REINDEX: // REINDEX
      case symbol_kind::S_RELATIVE_P: // RELATIVE_P
      case symbol_kind::S_RELEASE: // RELEASE
      case symbol_kind::S_RENAME: // RENAME
      case symbol_kind::S_REPEATABLE: // REPEATABLE
      case symbol_kind::S_REPLACE: // REPLACE
      case symbol_kind::S_REPLICA: // REPLICA
      case symbol_kind::S_RESET: // RESET
      case symbol_kind::S_RESTART: // RESTART
      case symbol_kind::S_RESTRICT: // RESTRICT
      case symbol_kind::S_RETURN: // RETURN
      case symbol_kind::S_RETURNING: // RETURNING
      case symbol_kind::S_RETURNS: // RETURNS
      case symbol_kind::S_REVOKE: // REVOKE
      case symbol_kind::S_RIGHT: // RIGHT
      case symbol_kind::S_ROLE: // ROLE
      case symbol_kind::S_ROLLBACK: // ROLLBACK
      case symbol_kind::S_ROLLUP: // ROLLUP
      case symbol_kind::S_ROUTINE: // ROUTINE
      case symbol_kind::S_ROUTINES: // ROUTINES
      case symbol_kind::S_ROW: // ROW
      case symbol_kind::S_ROWS: // ROWS
      case symbol_kind::S_RULE: // RULE
      case symbol_kind::S_SAVEPOINT: // SAVEPOINT
      case symbol_kind::S_SCALAR: // SCALAR
      case symbol_kind::S_SCHEMA: // SCHEMA
      case symbol_kind::S_SCHEMAS: // SCHEMAS
      case symbol_kind::S_SCROLL: // SCROLL
      case symbol_kind::S_SEARCH: // SEARCH
      case symbol_kind::S_SECOND_P: // SECOND_P
      case symbol_kind::S_SECURITY: // SECURITY
      case symbol_kind::S_SELECT: // SELECT
      case symbol_kind::S_SEQUENCE: // SEQUENCE
      case symbol_kind::S_SEQUENCES: // SEQUENCES
      case symbol_kind::S_SERIALIZABLE: // SERIALIZABLE
      case symbol_kind::S_SERVER: // SERVER
      case symbol_kind::S_SESSION: // SESSION
      case symbol_kind::S_SESSION_USER: // SESSION_USER
      case symbol_kind::S_SET: // SET
      case symbol_kind::S_SETS: // SETS
      case symbol_kind::S_SETOF: // SETOF
      case symbol_kind::S_SHARE: // SHARE
      case symbol_kind::S_SHOW: // SHOW
      case symbol_kind::S_SIMILAR: // SIMILAR
      case symbol_kind::S_SIMPLE: // SIMPLE
      case symbol_kind::S_SKIP: // SKIP
      case symbol_kind::S_SMALLINT: // SMALLINT
      case symbol_kind::S_SNAPSHOT: // SNAPSHOT
      case symbol_kind::S_SOME: // SOME
      case symbol_kind::S_SOURCE: // SOURCE
      case symbol_kind::S_SQL_P: // SQL_P
      case symbol_kind::S_STABLE: // STABLE
      case symbol_kind::S_STANDALONE_P: // STANDALONE_P
      case symbol_kind::S_START: // START
      case symbol_kind::S_STATEMENT: // STATEMENT
      case symbol_kind::S_STATISTICS: // STATISTICS
      case symbol_kind::S_STDIN: // STDIN
      case symbol_kind::S_STDOUT: // STDOUT
      case symbol_kind::S_STORAGE: // STORAGE
      case symbol_kind::S_STORED: // STORED
      case symbol_kind::S_STRICT_P: // STRICT_P
      case symbol_kind::S_STRING_P: // STRING_P
      case symbol_kind::S_STRIP_P: // STRIP_P
      case symbol_kind::S_SUBSCRIPTION: // SUBSCRIPTION
      case symbol_kind::S_SUBSTRING: // SUBSTRING
      case symbol_kind::S_SUPPORT: // SUPPORT
      case symbol_kind::S_SYMMETRIC: // SYMMETRIC
      case symbol_kind::S_SYSID: // SYSID
      case symbol_kind::S_SYSTEM_P: // SYSTEM_P
      case symbol_kind::S_SYSTEM_USER: // SYSTEM_USER
      case symbol_kind::S_TABLE: // TABLE
      case symbol_kind::S_TABLES: // TABLES
      case symbol_kind::S_TABLESAMPLE: // TABLESAMPLE
      case symbol_kind::S_TABLESPACE: // TABLESPACE
      case symbol_kind::S_TARGET: // TARGET
      case symbol_kind::S_TEMP: // TEMP
      case symbol_kind::S_TEMPLATE: // TEMPLATE
      case symbol_kind::S_TEMPORARY: // TEMPORARY
      case symbol_kind::S_TEXT_P: // TEXT_P
      case symbol_kind::S_THEN: // THEN
      case symbol_kind::S_TIES: // TIES
      case symbol_kind::S_TIME: // TIME
      case symbol_kind::S_TIMESTAMP: // TIMESTAMP
      case symbol_kind::S_TO: // TO
      case symbol_kind::S_TRAILING: // TRAILING
      case symbol_kind::S_TRANSACTION: // TRANSACTION
      case symbol_kind::S_TRANSFORM: // TRANSFORM
      case symbol_kind::S_TREAT: // TREAT
      case symbol_kind::S_TRIGGER: // TRIGGER
      case symbol_kind::S_TRIM: // TRIM
      case symbol_kind::S_TRUE_P: // TRUE_P
      case symbol_kind::S_TRUNCATE: // TRUNCATE
      case symbol_kind::S_TRUSTED: // TRUSTED
      case symbol_kind::S_TYPE_P: // TYPE_P
      case symbol_kind::S_TYPES_P: // TYPES_P
      case symbol_kind::S_UESCAPE: // UESCAPE
      case symbol_kind::S_UNBOUNDED: // UNBOUNDED
      case symbol_kind::S_UNCONDITIONAL: // UNCONDITIONAL
      case symbol_kind::S_UNCOMMITTED: // UNCOMMITTED
      case symbol_kind::S_UNENCRYPTED: // UNENCRYPTED
      case symbol_kind::S_UNION: // UNION
      case symbol_kind::S_UNIQUE: // UNIQUE
      case symbol_kind::S_UNKNOWN: // UNKNOWN
      case symbol_kind::S_UNLISTEN: // UNLISTEN
      case symbol_kind::S_UNLOGGED: // UNLOGGED
      case symbol_kind::S_UNTIL: // UNTIL
      case symbol_kind::S_UPDATE: // UPDATE
      case symbol_kind::S_USER: // USER
      case symbol_kind::S_USING: // USING
      case symbol_kind::S_VACUUM: // VACUUM
      case symbol_kind::S_VALID: // VALID
      case symbol_kind::S_VALIDATE: // VALIDATE
      case symbol_kind::S_VALIDATOR: // VALIDATOR
      case symbol_kind::S_VALUE_P: // VALUE_P
      case symbol_kind::S_VALUES: // VALUES
      case symbol_kind::S_VARCHAR: // VARCHAR
      case symbol_kind::S_VARIADIC: // VARIADIC
      case symbol_kind::S_VARYING: // VARYING
      case symbol_kind::S_VERBOSE: // VERBOSE
      case symbol_kind::S_VERSION_P: // VERSION_P
      case symbol_kind::S_VIEW: // VIEW
      case symbol_kind::S_VIEWS: // VIEWS
      case symbol_kind::S_VIRTUAL: // VIRTUAL
      case symbol_kind::S_VOLATILE: // VOLATILE
      case symbol_kind::S_WHEN: // WHEN
      case symbol_kind::S_WHERE: // WHERE
      case symbol_kind::S_WHITESPACE_P: // WHITESPACE_P
      case symbol_kind::S_WINDOW: // WINDOW
      case symbol_kind::S_WITH: // WITH
      case symbol_kind::S_WITHIN: // WITHIN
      case symbol_kind::S_WITHOUT: // WITHOUT
      case symbol_kind::S_WORK: // WORK
      case symbol_kind::S_WRAPPER: // WRAPPER
      case symbol_kind::S_WRITE: // WRITE
      case symbol_kind::S_XML_P: // XML_P
      case symbol_kind::S_XMLATTRIBUTES: // XMLATTRIBUTES
      case symbol_kind::S_XMLCONCAT: // XMLCONCAT
      case symbol_kind::S_XMLELEMENT: // XMLELEMENT
      case symbol_kind::S_XMLEXISTS: // XMLEXISTS
      case symbol_kind::S_XMLFOREST: // XMLFOREST
      case symbol_kind::S_XMLNAMESPACES: // XMLNAMESPACES
      case symbol_kind::S_XMLPARSE: // XMLPARSE
      case symbol_kind::S_XMLPI: // XMLPI
      case symbol_kind::S_XMLROOT: // XMLROOT
      case symbol_kind::S_XMLSERIALIZE: // XMLSERIALIZE
      case symbol_kind::S_XMLTABLE: // XMLTABLE
      case symbol_kind::S_YEAR_P: // YEAR_P
      case symbol_kind::S_YES_P: // YES_P
      case symbol_kind::S_ZONE: // ZONE
      case symbol_kind::S_copy_file_name: // copy_file_name
      case symbol_kind::S_copy_delimiter: // copy_delimiter
      case symbol_kind::S_var_name: // var_name
      case symbol_kind::S_NonReservedWord: // NonReservedWord
      case symbol_kind::S_relation_expr: // relation_expr
      case symbol_kind::S_any_operator: // any_operator
      case symbol_kind::S_qual_Op: // qual_Op
      case symbol_kind::S_all_Op: // all_Op
      case symbol_kind::S_ColId: // ColId
      case symbol_kind::S_type_function_name: // type_function_name
      case symbol_kind::S_type_func_name_keyword: // type_func_name_keyword
      case symbol_kind::S_ColLabel: // ColLabel
      case symbol_kind::S_BareColLabel: // BareColLabel
      case symbol_kind::S_reserved_keyword: // reserved_keyword
      case symbol_kind::S_unreserved_keyword: // unreserved_keyword
      case symbol_kind::S_col_name_keyword: // col_name_keyword
      case symbol_kind::S_qualified_name: // qualified_name
      case symbol_kind::S_name: // name
      case symbol_kind::S_attr_name: // attr_name
      case symbol_kind::S_func_name: // func_name
      case symbol_kind::S_insert_target: // insert_target
      case symbol_kind::S_insert_column_item: // insert_column_item
        yylhs.value.emplace< std::string > ();
        break;

      case symbol_kind::S_in_expr: // in_expr
        yylhs.value.emplace< std::variant<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>, std::shared_ptr<lingodb::ast::SubqueryExpression>> > ();
        break;

      case symbol_kind::S_when_clause_list: // when_clause_list
        yylhs.value.emplace< std::vector<lingodb::ast::CaseExpression::CaseCheck> > ();
        break;

      case symbol_kind::S_copy_options: // copy_options
      case symbol_kind::S_copy_opt_list: // copy_opt_list
        yylhs.value.emplace< std::vector<std::pair<std::string, std::string>> > ();
        break;

      case symbol_kind::S_stmtmulti: // stmtmulti
        yylhs.value.emplace< std::vector<std::shared_ptr<lingodb::ast::AstNode>> > ();
        break;

      case symbol_kind::S_ColQualList: // ColQualList
        yylhs.value.emplace< std::vector<std::shared_ptr<lingodb::ast::Constraint>> > ();
        break;

      case symbol_kind::S_func_expr_list: // func_expr_list
        yylhs.value.emplace< std::vector<std::shared_ptr<lingodb::ast::FunctionExpression>> > ();
        break;

      case symbol_kind::S_sortby_list: // sortby_list
        yylhs.value.emplace< std::vector<std::shared_ptr<lingodb::ast::OrderByElement>> > ();
        break;

      case symbol_kind::S_var_list: // var_list
      case symbol_kind::S_group_by_list: // group_by_list
      case symbol_kind::S_group_by_list_with_alias: // group_by_list_with_alias
      case symbol_kind::S_rollup_clause: // rollup_clause
      case symbol_kind::S_columnref_list: // columnref_list
      case symbol_kind::S_func_arg_list_opt: // func_arg_list_opt
      case symbol_kind::S_func_arg_list: // func_arg_list
      case symbol_kind::S_expr_list: // expr_list
      case symbol_kind::S_expr_list_with_alias: // expr_list_with_alias
      case symbol_kind::S_extract_list: // extract_list
      case symbol_kind::S_substr_list: // substr_list
      case symbol_kind::S_target_list: // target_list
      case symbol_kind::S_opt_partition_clause: // opt_partition_clause
        yylhs.value.emplace< std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
        break;

      case symbol_kind::S_OptTableElementList: // OptTableElementList
      case symbol_kind::S_TableElementList: // TableElementList
        yylhs.value.emplace< std::vector<std::shared_ptr<lingodb::ast::TableElement>> > ();
        break;

      case symbol_kind::S_opt_type_modifiers: // opt_type_modifiers
      case symbol_kind::S_type_modifiers: // type_modifiers
        yylhs.value.emplace< std::vector<std::shared_ptr<lingodb::ast::Value>> > ();
        break;

      case symbol_kind::S_opt_name_list: // opt_name_list
      case symbol_kind::S_name_list: // name_list
      case symbol_kind::S_insert_column_list: // insert_column_list
        yylhs.value.emplace< std::vector<std::string> > ();
        break;

      case symbol_kind::S_INTEGER_VALUE: // "integer_value"
        yylhs.value.emplace< uint64_t > ();
        break;

      default:
        break;
    }


      // Default location.
      {
        stack_type::slice range (yystack_, yylen);
        YYLLOC_DEFAULT (yylhs.location, range, yylen);
        yyerror_range[1].location = yylhs.location;
      }

      // Perform the reduction.
      YY_REDUCE_PRINT (yyn);
#if YY_EXCEPTIONS
      try
#endif // YY_EXCEPTIONS
        {
          switch (yyn)
            {
  case 2: // parse_toplevel: stmtmulti
#line 397 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
              {drv.result = yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::AstNode>> > ();}
#line 9014 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 3: // stmtmulti: toplevel_stmt
#line 404 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkListShared<lingodb::ast::AstNode>();
        list.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::AstNode> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::AstNode>> > () = list;
    }
#line 9024 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 4: // stmtmulti: stmtmulti ";" toplevel_stmt
#line 411 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        if(yystack_[0].value.as < std::shared_ptr<lingodb::ast::AstNode> > () != nullptr) {
            yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::AstNode>> > ().emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::AstNode> > ());
        }
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::AstNode>> > () = yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::AstNode>> > ();

    }
#line 9036 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 5: // toplevel_stmt: stmt
#line 423 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
         {yylhs.value.as < std::shared_ptr<lingodb::ast::AstNode> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::AstNode> > ();}
#line 9042 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 7: // stmt: SelectStmt
#line 427 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
            {yylhs.value.as < std::shared_ptr<lingodb::ast::AstNode> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ();}
#line 9048 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 8: // stmt: CreateStmt
#line 428 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
              {yylhs.value.as < std::shared_ptr<lingodb::ast::AstNode> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::CreateNode> > ();}
#line 9054 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 9: // stmt: InsertStmt
#line 429 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
              {yylhs.value.as < std::shared_ptr<lingodb::ast::AstNode> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::InsertNode> > ();}
#line 9060 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 10: // stmt: PipeSQLStmt
#line 430 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
               {yylhs.value.as < std::shared_ptr<lingodb::ast::AstNode> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ();}
#line 9066 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 11: // stmt: VariableSetStmt
#line 431 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                   {yylhs.value.as < std::shared_ptr<lingodb::ast::AstNode> > ()=yystack_[0].value.as < std::shared_ptr<ast::SetVariableStatement> > ();}
#line 9072 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 12: // stmt: CopyStmt
#line 432 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
            {yylhs.value.as < std::shared_ptr<lingodb::ast::AstNode> > ()=yystack_[0].value.as < std::shared_ptr<ast::CopyNode> > ();}
#line 9078 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 13: // SelectStmt: select_no_parens
#line 436 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                     {yylhs.value.as < std::shared_ptr<lingodb::ast::TableProducer> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();}
#line 9084 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 14: // SelectStmt: select_with_parens
#line 437 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                         {yylhs.value.as < std::shared_ptr<lingodb::ast::TableProducer> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();}
#line 9090 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 15: // PipeSQLStmt: pipe_sql_no_parens
#line 440 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                       {yylhs.value.as < std::shared_ptr<lingodb::ast::TableProducer> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ();}
#line 9096 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 16: // PipeSQLStmt: pipe_sql_with_parens
#line 441 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                           {yylhs.value.as < std::shared_ptr<lingodb::ast::TableProducer> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ();}
#line 9102 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 17: // classic_select_and_pipe_sql_with_parens: select_with_parens
#line 445 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                       {yylhs.value.as < std::shared_ptr<lingodb::ast::TableProducer> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();}
#line 9108 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 18: // classic_select_and_pipe_sql_with_parens: pipe_sql_with_parens
#line 446 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                           {yylhs.value.as < std::shared_ptr<lingodb::ast::TableProducer> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ();}
#line 9114 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 19: // select_with_parens: "(" select_no_parens ")"
#line 450 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                           {yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > ()=yystack_[1].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();}
#line 9120 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 20: // select_with_parens: "(" select_with_parens ")"
#line 451 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                               {yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > ()=yystack_[1].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();}
#line 9126 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 21: // pipe_sql_with_parens: "(" pipe_sql_no_parens ")"
#line 454 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                             {yylhs.value.as < std::shared_ptr<lingodb::ast::TableProducer> > ()=yystack_[1].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ();}
#line 9132 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 22: // pipe_sql_with_parens: "(" pipe_sql_with_parens ")"
#line 455 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                 {yylhs.value.as < std::shared_ptr<lingodb::ast::TableProducer> > ()=yystack_[1].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ();}
#line 9138 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 23: // select_no_parens: simple_select
#line 462 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                  {yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();}
#line 9144 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 24: // select_no_parens: select_clause sort_clause
#line 464 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[1].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ()->modifiers.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::OrderByModifier> > ());
        yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = yystack_[1].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();
    }
#line 9153 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 25: // select_no_parens: select_clause opt_sort_clause opt_select_limit
#line 469 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        if (yystack_[1].value.as < std::optional<std::shared_ptr<lingodb::ast::OrderByModifier>> > ().has_value()) {
            yystack_[2].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ()->modifiers.emplace_back(yystack_[1].value.as < std::optional<std::shared_ptr<lingodb::ast::OrderByModifier>> > ().value());
        }
        if(yystack_[0].value.as < std::optional<std::shared_ptr<lingodb::ast::ResultModifier>> > ().has_value()) {
            yystack_[2].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ()->modifiers.emplace_back(yystack_[0].value.as < std::optional<std::shared_ptr<lingodb::ast::ResultModifier>> > ().value());
        }
        yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = yystack_[2].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();
    }
#line 9167 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 26: // select_no_parens: with_clause select_clause opt_sort_clause
#line 480 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        if (yystack_[0].value.as < std::optional<std::shared_ptr<lingodb::ast::OrderByModifier>> > ().has_value()) {
            yystack_[1].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ()->modifiers.emplace_back(yystack_[0].value.as < std::optional<std::shared_ptr<lingodb::ast::OrderByModifier>> > ().value());
        }
        auto current = std::static_pointer_cast<lingodb::ast::CTENode>(yystack_[2].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ());
        while(current->child != nullptr) {
            current = std::dynamic_pointer_cast<lingodb::ast::CTENode>(current->child);
            if(!current) {
                error(yylhs.location, "Should not happen");
            }
        }
        current->child = yystack_[1].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = yystack_[2].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();
    }
#line 9186 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 27: // select_no_parens: with_clause select_clause opt_sort_clause opt_select_limit
#line 495 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        if (yystack_[1].value.as < std::optional<std::shared_ptr<lingodb::ast::OrderByModifier>> > ().has_value()) {
            yystack_[2].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ()->modifiers.emplace_back(yystack_[1].value.as < std::optional<std::shared_ptr<lingodb::ast::OrderByModifier>> > ().value());
        }
        if(yystack_[0].value.as < std::optional<std::shared_ptr<lingodb::ast::ResultModifier>> > ().has_value()) {
            yystack_[2].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ()->modifiers.emplace_back(yystack_[0].value.as < std::optional<std::shared_ptr<lingodb::ast::ResultModifier>> > ().value());
        }

        auto current = std::static_pointer_cast<lingodb::ast::CTENode>(yystack_[3].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ());
        while(current->child != nullptr) {
            current = std::dynamic_pointer_cast<lingodb::ast::CTENode>(current->child);
            if(!current) {
                error(yylhs.location, "Should not happen");
            }
        }
        current->child = yystack_[2].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = yystack_[3].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();
    }
#line 9209 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 29: // pipe_sql_no_parens: from_clause
#line 517 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {

        yylhs.value.as < std::shared_ptr<lingodb::ast::TableProducer> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableRef> > ();

    }
#line 9219 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 30: // pipe_sql_no_parens: PipeSQLStmt "|>" pipe_operator
#line 523 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {

        auto pipeOp = std::static_pointer_cast<lingodb::ast::PipeOperator>(yystack_[0].value.as < std::shared_ptr<lingodb::ast::PipeOperator> > ());
        yystack_[0].value.as < std::shared_ptr<lingodb::ast::PipeOperator> > ()->input = yystack_[2].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ();

        yylhs.value.as < std::shared_ptr<lingodb::ast::TableProducer> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::PipeOperator> > ();

    }
#line 9232 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 32: // pipe_start: from_clause
#line 535 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
     {


     }
#line 9241 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 33: // pipe_start: select_no_parens "|>" pipe_operator
#line 540 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {

    }
#line 9249 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 34: // pipe_or_select_clause: pipe_start
#line 545 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
               {yylhs.value.as < std::shared_ptr<lingodb::ast::TableProducer> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::PipeOperator> > ();}
#line 9255 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 35: // pipe_or_select_clause: select_clause
#line 546 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                    {yylhs.value.as < std::shared_ptr<lingodb::ast::TableProducer> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();}
#line 9261 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 36: // select_clause: simple_select
#line 549 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                  {yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();}
#line 9267 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 37: // select_clause: select_with_parens
#line 550 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                         {yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();}
#line 9273 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 38: // PreparableStmt: SelectStmt
#line 557 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::TableProducer> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ();
    }
#line 9281 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 39: // CopyStmt: COPY qualified_name copy_from copy_file_name copy_options copy_delimiter
#line 564 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto node = mkNode<lingodb::ast::CopyNode>(yylhs.location);
        node->copyInfo->table = yystack_[4].value.as < std::string > ();
        node->copyInfo->fromFileName = yystack_[2].value.as < std::string > ();
        node->copyInfo->options = yystack_[1].value.as < std::vector<std::pair<std::string, std::string>> > ();
        yylhs.value.as < std::shared_ptr<ast::CopyNode> > () = node;
    }
#line 9293 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 41: // copy_file_name: STRING_VALUE
#line 579 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > ();
    }
#line 9301 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 42: // copy_options: copy_opt_list
#line 586 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::vector<std::pair<std::string, std::string>> > () = yystack_[0].value.as < std::vector<std::pair<std::string, std::string>> > ();
    }
#line 9309 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 43: // copy_opt_list: copy_opt_list copy_opt_item
#line 592 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[1].value.as < std::vector<std::pair<std::string, std::string>> > ().emplace_back(yystack_[0].value.as < std::pair<std::string, std::string> > ());
        yylhs.value.as < std::vector<std::pair<std::string, std::string>> > () = yystack_[1].value.as < std::vector<std::pair<std::string, std::string>> > ();
    }
#line 9318 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 44: // copy_opt_list: %empty
#line 597 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::vector<std::pair<std::string, std::string>> > () = mkList<std::pair<std::string,std::string>>();
    }
#line 9326 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 45: // copy_opt_item: DELIMITER STRING_VALUE
#line 603 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        std::string str = yystack_[0].value.as < std::string > ();
        yylhs.value.as < std::pair<std::string, std::string> > () = std::pair<std::string, std::string>("DELIMITER", str);
    }
#line 9335 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 46: // copy_opt_item: NULL_P STRING_VALUE
#line 608 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        std::string str = yystack_[0].value.as < std::string > ();
        yylhs.value.as < std::pair<std::string, std::string> > () = std::pair<std::string, std::string>("NULL", str);
    }
#line 9344 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 47: // copy_opt_item: CSV
#line 613 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::pair<std::string, std::string> > () = std::pair<std::string, std::string>("FORMAT", "csv");
    }
#line 9352 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 48: // copy_opt_item: ESCAPE STRING_VALUE
#line 617 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        std::string str = yystack_[0].value.as < std::string > ();
        yylhs.value.as < std::pair<std::string, std::string> > () = std::pair<std::string, std::string>("ESCAPE", str);
    }
#line 9361 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 49: // copy_delimiter: DELIMITERS Sconst
#line 623 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    { yylhs.value.as < std::string > () = yystack_[1].value.as < std::string > (); }
#line 9367 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 51: // VariableSetStmt: SET set_rest
#line 630 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<ast::SetVariableStatement> > () = yystack_[0].value.as < std::shared_ptr<ast::SetVariableStatement> > ();
    }
#line 9375 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 54: // set_rest: set_rest_more
#line 638 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<ast::SetVariableStatement> > () = yystack_[0].value.as < std::shared_ptr<ast::SetVariableStatement> > ();
    }
#line 9383 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 55: // generic_set: var_name TO var_list
#line 644 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
       yylhs.value.as < std::shared_ptr<ast::SetVariableStatement> > () = mkNode<lingodb::ast::SetVariableStatement>(yylhs.location, yystack_[2].value.as < std::string > (), yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ());
    }
#line 9391 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 56: // generic_set: var_name "=" var_list
#line 648 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
         yylhs.value.as < std::shared_ptr<ast::SetVariableStatement> > () = mkNode<lingodb::ast::SetVariableStatement>(yylhs.location, yystack_[2].value.as < std::string > (), yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ());
    }
#line 9399 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 57: // set_rest_more: generic_set
#line 655 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<ast::SetVariableStatement> > () =yystack_[0].value.as < std::shared_ptr<ast::SetVariableStatement> > ();
    }
#line 9407 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 58: // var_name: ColId
#line 662 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > ();
    }
#line 9415 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 59: // var_name: var_name "." ColId
#line 666 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::string > () = yystack_[2].value.as < std::string > () + "." + yystack_[0].value.as < std::string > ();
    }
#line 9423 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 60: // var_list: var_value
#line 672 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkListShared<lingodb::ast::ParsedExpression>();
        list.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = list;
    }
#line 9433 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 61: // var_list: var_list "," var_value
#line 678 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ().emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
    }
#line 9442 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 62: // var_value: opt_boolean_or_string
#line 685 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
    }
#line 9450 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 63: // var_value: NumericOnly
#line 689 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
    }
#line 9458 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 64: // opt_boolean_or_string: TRUE_P
#line 695 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto t = mkNode<lingodb::ast::ConstantExpression>(yylhs.location);
        t->value=std::make_shared<lingodb::ast::BoolValue>(true);
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=t;
    }
#line 9468 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 65: // opt_boolean_or_string: FALSE_P
#line 701 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto t = mkNode<lingodb::ast::ConstantExpression>(yylhs.location);
        t->value=std::make_shared<lingodb::ast::BoolValue>(false);
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=t;
    }
#line 9478 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 66: // opt_boolean_or_string: ON
#line 707 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto t = mkNode<lingodb::ast::ConstantExpression>(yylhs.location);
        t->value=std::make_shared<lingodb::ast::StringValue>("on");
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=t;
    }
#line 9488 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 67: // opt_boolean_or_string: NonReservedWord_or_Sconst
#line 713 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
    }
#line 9496 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 68: // NonReservedWord_or_Sconst: NonReservedWord
#line 719 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    { 
        auto t = mkNode<lingodb::ast::ConstantExpression>(yylhs.location);
        t->value=std::make_shared<lingodb::ast::StringValue>(yystack_[0].value.as < std::string > ());
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=t;
    }
#line 9506 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 69: // NonReservedWord_or_Sconst: Sconst
#line 725 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    { 
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (); 
    }
#line 9514 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 70: // NonReservedWord: IDENT
#line 730 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                        { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9520 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 71: // NonReservedWord: unreserved_keyword
#line 731 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                                                { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9526 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 72: // NonReservedWord: col_name_keyword
#line 732 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                                                        { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9532 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 73: // NonReservedWord: type_func_name_keyword
#line 733 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                                                { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 9538 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 74: // simple_select: SELECT opt_all_clause opt_target_list opt_from_clause where_clause group_clause having_clause
#line 769 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto t = mkNode<lingodb::ast::SelectNode>(yylhs.location);
        t->selectList = yystack_[4].value.as < std::shared_ptr<lingodb::ast::TargetList> > ();
        t->whereClause = yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
        t->fromClause = yystack_[3].value.as < std::shared_ptr<lingodb::ast::TableRef> > ();
        t->groups = yystack_[1].value.as < std::shared_ptr<lingodb::ast::GroupByNode> > ();
        t->having = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = t;
    }
#line 9552 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 75: // simple_select: SELECT distinct_clause target_list into_clause from_clause where_clause group_clause having_clause window_clause
#line 779 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto t = mkNode<lingodb::ast::SelectNode>(yylhs.location);
        auto target_list = mkNode<lingodb::ast::TargetList>(yylhs.location);
        target_list->targets = std::move(yystack_[6].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ());

        target_list->distinct = yystack_[7].value.as < bool > ();
        t->selectList = target_list;
        t->whereClause = yystack_[3].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
        t->fromClause = yystack_[4].value.as < std::shared_ptr<lingodb::ast::TableRef> > ();
        t->groups = yystack_[2].value.as < std::shared_ptr<lingodb::ast::GroupByNode> > ();
        t->having = yystack_[1].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = t;
    }
#line 9570 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 76: // simple_select: select_clause UNION set_quantifier select_clause
#line 794 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto setOpNode = mkNode<lingodb::ast::SetOperationNode>(yylhs.location, lingodb::ast::SetOperationType::UNION, yystack_[3].value.as < std::shared_ptr<lingodb::ast::QueryNode> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ());
        setOpNode->setOpAll = yystack_[1].value.as < bool > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = setOpNode;

    }
#line 9581 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 77: // simple_select: select_clause INTERSECT set_quantifier select_clause
#line 801 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto setOpNode = mkNode<lingodb::ast::SetOperationNode>(yylhs.location, lingodb::ast::SetOperationType::INTERSECT, yystack_[3].value.as < std::shared_ptr<lingodb::ast::QueryNode> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ());
        setOpNode->setOpAll = yystack_[1].value.as < bool > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = setOpNode;

    }
#line 9592 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 78: // simple_select: select_clause EXCEPT set_quantifier select_clause
#line 808 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto setOpNode = mkNode<lingodb::ast::SetOperationNode>(yylhs.location, lingodb::ast::SetOperationType::EXCEPT, yystack_[3].value.as < std::shared_ptr<lingodb::ast::QueryNode> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ());
        setOpNode->setOpAll = yystack_[1].value.as < bool > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = setOpNode;
    }
#line 9602 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 79: // simple_select: values_clause
#line 814 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = mkNode<lingodb::ast::ValuesQueryNode>(yylhs.location, yystack_[0].value.as < std::shared_ptr<lingodb::ast::ExpressionListRef> > ());
    }
#line 9610 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 80: // with_clause: WITH cte_list
#line 821 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();

    }
#line 9619 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 81: // with_clause: WITH_LA cte_list
#line 826 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {

    }
#line 9627 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 82: // distinct_clause: DISTINCT
#line 831 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
             {yylhs.value.as < bool > () = true;}
#line 9633 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 83: // cte_list: common_table_expr
#line 835 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();
    }
#line 9641 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 84: // cte_list: cte_list "," common_table_expr
#line 839 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto current = std::static_pointer_cast<lingodb::ast::CTENode>(yystack_[2].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ());
        while(current->child != nullptr) {
            current = std::dynamic_pointer_cast<lingodb::ast::CTENode>(current->child);
            if(!current) {
                error(yylhs.location, "should not happen");
            }
        }
        current->child = yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = yystack_[2].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ();

    }
#line 9658 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 87: // common_table_expr: name opt_name_list AS opt_materialized "(" PreparableStmt ")"
#line 865 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto cteNode = mkNode<lingodb::ast::CTENode>(yylhs.location);
        cteNode->alias = yystack_[6].value.as < std::string > ();
        cteNode->query = yystack_[1].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ();
        cteNode->columnNames = yystack_[5].value.as < std::vector<std::string> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::QueryNode> > () = cteNode;

    }
#line 9671 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 89: // opt_materialized: %empty
#line 877 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                                {}
#line 9677 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 90: // opt_from_clause: FROM from_list
#line 887 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                                                        { yylhs.value.as < std::shared_ptr<lingodb::ast::TableRef> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::CrossProductRef> > (); }
#line 9683 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 91: // opt_from_clause: %empty
#line 888 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                                                                {  }
#line 9689 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 92: // from_clause: FROM from_list
#line 894 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
            {
                yylhs.value.as < std::shared_ptr<lingodb::ast::TableRef> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::CrossProductRef> > ();
            }
#line 9697 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 93: // from_list: table_ref
#line 899 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
              { auto crossProd = mkNode<lingodb::ast::CrossProductRef>(yylhs.location); crossProd->tables.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableRef> > ()) ; yylhs.value.as < std::shared_ptr<lingodb::ast::CrossProductRef> > ()=crossProd;}
#line 9703 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 94: // from_list: from_list "," table_ref
#line 901 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[2].value.as < std::shared_ptr<lingodb::ast::CrossProductRef> > ()->tables.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableRef> > ());
        yylhs.value.as < std::shared_ptr<lingodb::ast::CrossProductRef> > () = yystack_[2].value.as < std::shared_ptr<lingodb::ast::CrossProductRef> > ();
    }
#line 9712 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 95: // table_ref: relation_expr opt_alias_clause
#line 914 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        //TODO Alias clause
        //TODO schema
        //TODO for now it is very simplyfied
        lingodb::ast::TableDescription desc{"", "", yystack_[1].value.as < std::string > () };
        auto tableref = mkNode<lingodb::ast::BaseTableRef>(yylhs.location, desc);
        tableref->alias = yystack_[0].value.as < std::pair<std::string, std::vector<std::string>> > ().first;
        yylhs.value.as < std::shared_ptr<lingodb::ast::TableRef> > () = tableref;

    }
#line 9727 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 96: // table_ref: joined_table
#line 924 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                   { yylhs.value.as < std::shared_ptr<lingodb::ast::TableRef> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableRef> > ();}
#line 9733 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 98: // table_ref: joined_table opt_alias_clause
#line 926 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
      { yylhs.value.as < std::shared_ptr<lingodb::ast::TableRef> > () = yystack_[1].value.as < std::shared_ptr<lingodb::ast::TableRef> > (); }
#line 9739 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 99: // table_ref: select_with_parens opt_alias_clause
#line 928 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        //TODO
        auto subquery = mkNode<lingodb::ast::SubqueryRef>(yylhs.location, std::static_pointer_cast<lingodb::ast::SelectNode>(yystack_[1].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ()));
        subquery->alias = yystack_[0].value.as < std::pair<std::string, std::vector<std::string>> > ().first;
        subquery->columnNames = yystack_[0].value.as < std::pair<std::string, std::vector<std::string>> > ().second;
        yylhs.value.as < std::shared_ptr<lingodb::ast::TableRef> > () = subquery;
    }
#line 9751 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 100: // set_quantifier: ALL
#line 942 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < bool > () = true;
    }
#line 9759 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 102: // set_quantifier: %empty
#line 947 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < bool > () = false;
    }
#line 9767 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 103: // group_clause: GROUP_P BY set_quantifier group_by_list
#line 974 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto node = mkNode<lingodb::ast::GroupByNode>(yylhs.location);
        node->groupByExpressions = yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::GroupByNode> > () = node;
        //TODO Support set_quantifier
    }
#line 9778 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 104: // group_clause: GROUP_P BY set_quantifier rollup_clause
#line 982 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto node = mkNode<lingodb::ast::GroupByNode>(yylhs.location);
        node->groupByExpressions = yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
        node->rollup = true;
        yylhs.value.as < std::shared_ptr<lingodb::ast::GroupByNode> > () = node;
    }
#line 9789 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 106: // group_clause_with_alias: GROUP_P BY set_quantifier group_by_list_with_alias
#line 992 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto node = mkNode<lingodb::ast::GroupByNode>(yylhs.location);
        node->groupByExpressions = yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::GroupByNode> > () = node;
        //TODO Support set_quantifier
    }
#line 9800 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 107: // group_clause_with_alias: GROUP_P BY set_quantifier rollup_clause
#line 999 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto node = mkNode<lingodb::ast::GroupByNode>(yylhs.location);
        node->groupByExpressions = yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
        node->rollup = true;
        yylhs.value.as < std::shared_ptr<lingodb::ast::GroupByNode> > () = node;
    }
#line 9811 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 109: // group_by_list: group_by_item
#line 1011 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkListShared<lingodb::ast::ParsedExpression>();
        list.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = list;
    }
#line 9821 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 110: // group_by_list: group_by_list "," group_by_item
#line 1017 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ().emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
    }
#line 9830 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 111: // group_by_list_with_alias: group_by_item_with_alias
#line 1024 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkListShared<lingodb::ast::ParsedExpression>();
        list.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = list;
    }
#line 9840 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 112: // group_by_list_with_alias: group_by_list "," group_by_item_with_alias
#line 1030 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ().emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
    }
#line 9849 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 113: // rollup_clause: ROLLUP "(" expr_list ")"
#line 1037 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = yystack_[1].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
    }
#line 9857 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 114: // group_by_item: a_expr
#line 1042 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
           {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 9863 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 115: // group_by_item: empty_grouping_set
#line 1043 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                         {}
#line 9869 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 116: // group_by_item_with_alias: a_expr
#line 1048 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
           {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 9875 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 117: // group_by_item_with_alias: a_expr AS ColId
#line 1049 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                      {yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()->alias = yystack_[0].value.as < std::string > (); yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 9881 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 118: // group_by_item_with_alias: empty_grouping_set
#line 1050 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                         {}
#line 9887 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 120: // having_clause: HAVING a_expr
#line 1059 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                  {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 9893 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 122: // joined_table: "(" joined_table ")"
#line 1102 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                       {yylhs.value.as < std::shared_ptr<lingodb::ast::TableRef> > ()=yystack_[1].value.as < std::shared_ptr<lingodb::ast::TableRef> > ();}
#line 9899 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 123: // joined_table: table_ref CROSS JOIN table_ref
#line 1103 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
      { yylhs.value.as < std::shared_ptr<lingodb::ast::TableRef> > () = yystack_[3].value.as < std::shared_ptr<lingodb::ast::TableRef> > (); }
#line 9905 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 124: // joined_table: table_ref join_type JOIN table_ref join_qual
#line 1105 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto join = mkNode<lingodb::ast::JoinRef>(yylhs.location, yystack_[3].value.as < lingodb::ast::JoinType > (), lingodb::ast::JoinCondType::REGULAR);
        join->left = yystack_[4].value.as < std::shared_ptr<lingodb::ast::TableRef> > ();
        join->right = yystack_[1].value.as < std::shared_ptr<lingodb::ast::TableRef> > ();
        join->condition = yystack_[0].value.as < lingodb::ast::jointCondOrUsingCols > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::TableRef> > () = join;

    }
#line 9918 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 125: // joined_table: table_ref JOIN table_ref join_qual
#line 1114 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        //TODO find out correct JoinCondType
        auto join = mkNode<lingodb::ast::JoinRef>(yylhs.location, lingodb::ast::JoinType::INNER, lingodb::ast::JoinCondType::REGULAR);
        join->left = yystack_[3].value.as < std::shared_ptr<lingodb::ast::TableRef> > ();
        join->right = yystack_[1].value.as < std::shared_ptr<lingodb::ast::TableRef> > ();
        join->condition = yystack_[0].value.as < lingodb::ast::jointCondOrUsingCols > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::TableRef> > () = join;
    }
#line 9931 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 126: // joined_table: table_ref NATURAL join_type JOIN table_ref
#line 1122 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
      { yylhs.value.as < std::shared_ptr<lingodb::ast::TableRef> > () = yystack_[4].value.as < std::shared_ptr<lingodb::ast::TableRef> > (); }
#line 9937 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 127: // joined_table: table_ref NATURAL JOIN table_ref
#line 1123 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
      { yylhs.value.as < std::shared_ptr<lingodb::ast::TableRef> > () = yystack_[3].value.as < std::shared_ptr<lingodb::ast::TableRef> > (); }
#line 9943 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 128: // alias_clause: AS ColId "(" name_list ")"
#line 1128 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::pair<std::string, std::vector<std::string>> > () = std::make_pair(yystack_[3].value.as < std::string > (), yystack_[1].value.as < std::vector<std::string> > ());
    }
#line 9951 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 129: // alias_clause: AS ColId
#line 1132 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::pair<std::string, std::vector<std::string>> > () = std::make_pair(yystack_[0].value.as < std::string > (), std::vector<std::string>());
    }
#line 9959 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 130: // alias_clause: ColId "(" name_list ")"
#line 1136 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::pair<std::string, std::vector<std::string>> > () = std::make_pair(yystack_[3].value.as < std::string > (), yystack_[1].value.as < std::vector<std::string> > ());
    }
#line 9967 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 131: // alias_clause: ColId
#line 1140 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::pair<std::string, std::vector<std::string>> > () = std::make_pair(yystack_[0].value.as < std::string > (), std::vector<std::string>());
    }
#line 9975 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 134: // opt_nulls_order: %empty
#line 1150 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::OrderByNullType > () = lingodb::ast::OrderByNullType::ORDER_DEFAULT;
    }
#line 9983 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 135: // opt_alias_clause: alias_clause
#line 1156 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::pair<std::string, std::vector<std::string>> > () = yystack_[0].value.as < std::pair<std::string, std::vector<std::string>> > ();
    }
#line 9991 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 136: // opt_alias_clause: %empty
#line 1160 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::pair<std::string, std::vector<std::string>> > () = std::make_pair<std::string, std::vector<std::string>>("", std::vector<std::string>());
    }
#line 9999 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 137: // opt_asc_desc: ASC
#line 1172 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::OrderType > () = lingodb::ast::OrderType::ASCENDING;
    }
#line 10007 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 138: // opt_asc_desc: DESC
#line 1176 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::OrderType > () = lingodb::ast::OrderType::DESCENDING;
    }
#line 10015 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 139: // opt_asc_desc: %empty
#line 1179 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
             {
        yylhs.value.as < lingodb::ast::OrderType > () = lingodb::ast::OrderType::ASCENDING;
    }
#line 10023 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 141: // join_type: FULL OUTER_P
#line 1192 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::JoinType > () = lingodb::ast::JoinType::FULL;
    }
#line 10031 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 142: // join_type: LEFT OUTER_P
#line 1196 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::JoinType > () = lingodb::ast::JoinType::LEFT;
    }
#line 10039 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 143: // join_type: LEFT
#line 1200 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::JoinType > () = lingodb::ast::JoinType::LEFT;
    }
#line 10047 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 144: // join_type: RIGHT
#line 1204 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::JoinType > () = lingodb::ast::JoinType::RIGHT;
    }
#line 10055 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 145: // join_type: RIGHT OUTER_P
#line 1208 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::JoinType > () = lingodb::ast::JoinType::RIGHT;
    }
#line 10063 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 146: // join_type: INNER_P
#line 1212 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::JoinType > () = lingodb::ast::JoinType::INNER;
    }
#line 10071 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 147: // join_qual: USING "(" name_list ")"
#line 1231 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto name_list = yystack_[1].value.as < std::vector<std::string> > ();
        auto list = mkListShared<lingodb::ast::ColumnRefExpression>();
        for(auto& name : name_list) {
            list.emplace_back(mkNode<lingodb::ast::ColumnRefExpression>(yylhs.location,name));
        }
        yylhs.value.as < lingodb::ast::jointCondOrUsingCols > () = list;

    }
#line 10085 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 148: // join_qual: ON a_expr
#line 1240 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                {yylhs.value.as < lingodb::ast::jointCondOrUsingCols > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 10091 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 149: // relation_expr: qualified_name
#line 1244 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                   {yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > ();}
#line 10097 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 154: // opt_asymmetric: ASYMMETRIC
#line 1254 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
               {yylhs.value.as < bool > ()=true;}
#line 10103 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 155: // opt_asymmetric: %empty
#line 1255 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
             {yylhs.value.as < bool > ()=false;}
#line 10109 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 158: // opt_sort_clause: sort_clause
#line 1262 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                {yylhs.value.as < std::optional<std::shared_ptr<lingodb::ast::OrderByModifier>> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::OrderByModifier> > ();}
#line 10115 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 159: // opt_sort_clause: %empty
#line 1263 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
             {yylhs.value.as < std::optional<std::shared_ptr<lingodb::ast::OrderByModifier>> > () = std::nullopt;}
#line 10121 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 160: // sort_clause: ORDER BY sortby_list
#line 1267 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto n = mkNode<lingodb::ast::OrderByModifier>(yylhs.location);
        n->orderByElements = std::move(yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::OrderByElement>> > ());
        yylhs.value.as < std::shared_ptr<lingodb::ast::OrderByModifier> > () = n;
    }
#line 10131 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 161: // sortby_list: sortby
#line 1275 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkListShared<lingodb::ast::OrderByElement>();
        list.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::OrderByElement> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::OrderByElement>> > () = list;
    }
#line 10141 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 162: // sortby_list: sortby_list "," sortby
#line 1281 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::OrderByElement>> > ().emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::OrderByElement> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::OrderByElement>> > () = yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::OrderByElement>> > ();
    }
#line 10150 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 164: // sortby: a_expr opt_asc_desc opt_nulls_order
#line 1289 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto orderByElement = mkNode<lingodb::ast::OrderByElement>(yylhs.location, yystack_[1].value.as < lingodb::ast::OrderType > (), yystack_[0].value.as < lingodb::ast::OrderByNullType > ());
        orderByElement->expression = yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::OrderByElement> > () = orderByElement;
    }
#line 10160 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 165: // select_limit: limit_clause offset_clause
#line 1300 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[1].value.as < std::shared_ptr<lingodb::ast::LimitModifier> > ()->offset = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::LimitModifier> > () = yystack_[1].value.as < std::shared_ptr<lingodb::ast::LimitModifier> > ();
    }
#line 10169 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 166: // select_limit: offset_clause limit_clause
#line 1305 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[0].value.as < std::shared_ptr<lingodb::ast::LimitModifier> > ()->offset = yystack_[1].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::LimitModifier> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::LimitModifier> > ();
    }
#line 10178 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 167: // select_limit: limit_clause
#line 1309 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                   {yylhs.value.as < std::shared_ptr<lingodb::ast::LimitModifier> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::LimitModifier> > ();}
#line 10184 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 169: // opt_select_limit: select_limit
#line 1314 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {yylhs.value.as < std::optional<std::shared_ptr<lingodb::ast::ResultModifier>> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::LimitModifier> > ();}
#line 10190 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 170: // opt_select_limit: %empty
#line 1315 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
             {yylhs.value.as < std::optional<std::shared_ptr<lingodb::ast::ResultModifier>> > ()=std::nullopt;}
#line 10196 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 171: // limit_clause: LIMIT select_limit_value
#line 1319 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                             {yylhs.value.as < std::shared_ptr<lingodb::ast::LimitModifier> > () = mkNode<lingodb::ast::LimitModifier>(yylhs.location, yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());}
#line 10202 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 173: // offset_clause: OFFSET select_offset_value
#line 1325 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
    }
#line 10210 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 174: // select_limit_value: a_expr
#line 1331 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
           {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 10216 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 176: // select_offset_value: a_expr
#line 1336 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
           {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 10222 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 177: // values_clause: VALUES "(" expr_list ")"
#line 1346 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        //ExpressionListRef is a TableRef and therefore a TableProducer and therefore can be used stand alone
        auto exprListList = mkList<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>>();
        exprListList.emplace_back(yystack_[1].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ());
        auto exprListRef = mkNode<lingodb::ast::ExpressionListRef>(yylhs.location, exprListList);
        yylhs.value.as < std::shared_ptr<lingodb::ast::ExpressionListRef> > () = exprListRef;

    }
#line 10235 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 178: // values_clause: values_clause "," "(" expr_list ")"
#line 1355 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        std::static_pointer_cast<lingodb::ast::ExpressionListRef>(yystack_[4].value.as < std::shared_ptr<lingodb::ast::ExpressionListRef> > ())->values.emplace_back(yystack_[1].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ());
        yylhs.value.as < std::shared_ptr<lingodb::ast::ExpressionListRef> > () = yystack_[4].value.as < std::shared_ptr<lingodb::ast::ExpressionListRef> > ();
    }
#line 10244 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 179: // where_clause: WHERE a_expr
#line 1395 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 10250 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 181: // a_expr: c_expr
#line 1400 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
           { yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 10256 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 182: // a_expr: a_expr "+" a_expr
#line 1405 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::OperatorExpression>(yylhs.location, lingodb::ast::ExpressionType::OPERATOR_PLUS, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (),yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10264 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 183: // a_expr: a_expr TYPECAST Type
#line 1409 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
     yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::CastExpression>(yylhs.location, yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > (), yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10272 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 184: // a_expr: a_expr "-" a_expr
#line 1413 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::OperatorExpression>(yylhs.location, lingodb::ast::ExpressionType::OPERATOR_MINUS, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (),yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10280 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 185: // a_expr: a_expr "*" a_expr
#line 1417 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::OperatorExpression>(yylhs.location, lingodb::ast::ExpressionType::OPERATOR_TIMES, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (),yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10288 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 186: // a_expr: a_expr "/" a_expr
#line 1421 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::OperatorExpression>(yylhs.location, lingodb::ast::ExpressionType::OPERATOR_DIVIDE, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (),yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10296 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 187: // a_expr: a_expr "%" a_expr
#line 1425 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::OperatorExpression>(yylhs.location, lingodb::ast::ExpressionType::OPERATOR_MOD, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (),yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10304 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 188: // a_expr: a_expr "^" a_expr
#line 1428 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
      { yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (); }
#line 10310 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 189: // a_expr: a_expr "<" a_expr
#line 1430 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::ComparisonExpression>(yylhs.location, lingodb::ast::ExpressionType::COMPARE_LESSTHAN, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () );
    }
#line 10318 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 190: // a_expr: a_expr ">" a_expr
#line 1434 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::ComparisonExpression>(yylhs.location, lingodb::ast::ExpressionType::COMPARE_GREATERTHAN, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () );
    }
#line 10326 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 191: // a_expr: a_expr "=" a_expr
#line 1438 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::ComparisonExpression>(yylhs.location, lingodb::ast::ExpressionType::COMPARE_EQUAL, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () );
    }
#line 10334 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 192: // a_expr: a_expr "<=" a_expr
#line 1442 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::ComparisonExpression>(yylhs.location, lingodb::ast::ExpressionType::COMPARE_LESSTHANOREQUALTO, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () );
    }
#line 10342 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 193: // a_expr: a_expr ">=" a_expr
#line 1446 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::ComparisonExpression>(yylhs.location, lingodb::ast::ExpressionType::COMPARE_GREATERTHANOREQUALTO, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () );
    }
#line 10350 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 194: // a_expr: a_expr "<>" a_expr
#line 1450 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::ComparisonExpression>(yylhs.location, lingodb::ast::ExpressionType::COMPARE_NOTEQUAL, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () );
    }
#line 10358 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 195: // a_expr: and_a_expr
#line 1454 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
       yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ConjunctionExpression> > ();
    }
#line 10366 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 196: // a_expr: or_a_expr
#line 1458 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ConjunctionExpression> > ();
    }
#line 10374 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 197: // a_expr: NOT a_expr
#line 1462 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::OperatorExpression>(yylhs.location, lingodb::ast::ExpressionType::OPERATOR_NOT, yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10382 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 198: // a_expr: a_expr LIKE a_expr
#line 1466 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::ComparisonExpression>(yylhs.location, lingodb::ast::ExpressionType::COMPARE_LIKE, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10390 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 199: // a_expr: a_expr NOT LIKE a_expr
#line 1470 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::ComparisonExpression>(yylhs.location, lingodb::ast::ExpressionType::COMPARE_NOT_LIKE, yystack_[3].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10398 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 200: // a_expr: a_expr IN_P in_expr
#line 1474 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        /*
        * in_expr either returns a SubQuery or a list of expressions
        */
        if(std::holds_alternative<std::shared_ptr<lingodb::ast::SubqueryExpression>>(yystack_[0].value.as < std::variant<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>, std::shared_ptr<lingodb::ast::SubqueryExpression>> > ())) {
            auto subQuery = std::get<std::shared_ptr<lingodb::ast::SubqueryExpression>>(yystack_[0].value.as < std::variant<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>, std::shared_ptr<lingodb::ast::SubqueryExpression>> > ());
            subQuery->testExpr = yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
            yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = subQuery;

        } else {
            auto exprList = std::get<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>>(yystack_[0].value.as < std::variant<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>, std::shared_ptr<lingodb::ast::SubqueryExpression>> > ());
            auto node = mkNode<lingodb::ast::ComparisonExpression>(yylhs.location, lingodb::ast::ExpressionType::COMPARE_IN, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), exprList);
            yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = node;
        }
    }
#line 10418 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 201: // a_expr: a_expr NOT IN_P in_expr
#line 1490 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        /*
        * in_expr either returns a SubQuery or a list of expressions
        */
        if(std::holds_alternative<std::shared_ptr<lingodb::ast::SubqueryExpression>>(yystack_[0].value.as < std::variant<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>, std::shared_ptr<lingodb::ast::SubqueryExpression>> > ())) {
            auto subQuery = std::get<std::shared_ptr<lingodb::ast::SubqueryExpression>>(yystack_[0].value.as < std::variant<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>, std::shared_ptr<lingodb::ast::SubqueryExpression>> > ());
            subQuery->subQueryType = lingodb::ast::SubqueryType::NOT_ANY;
            subQuery->testExpr = yystack_[3].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
            yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = subQuery;

        } else {
            auto exprList = std::get<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>>(yystack_[0].value.as < std::variant<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>, std::shared_ptr<lingodb::ast::SubqueryExpression>> > ());
            auto node = mkNode<lingodb::ast::ComparisonExpression>(yylhs.location, lingodb::ast::ExpressionType::COMPARE_NOT_IN, yystack_[3].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), exprList);
            yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = node;
        }
    }
#line 10439 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 202: // a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr
#line 1507 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto node = mkNode<lingodb::ast::BetweenExpression>(yylhs.location, lingodb::ast::ExpressionType::COMPARE_BETWEEN, yystack_[5].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        node->asymmetric = yystack_[3].value.as < bool > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = node;
    }
#line 10449 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 203: // a_expr: a_expr NOT BETWEEN opt_asymmetric b_expr AND a_expr
#line 1513 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto node = mkNode<lingodb::ast::BetweenExpression>(yylhs.location, lingodb::ast::ExpressionType::COMPARE_NOT_BETWEEN, yystack_[6].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        node->asymmetric = yystack_[3].value.as < bool > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = node;
    }
#line 10459 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 204: // a_expr: a_expr IS NULL_P
#line 1519 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::OperatorExpression>(yylhs.location, lingodb::ast::ExpressionType::OPERATOR_IS_NULL, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10467 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 205: // a_expr: a_expr IS NOT NULL_P
#line 1523 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::OperatorExpression>(yylhs.location, lingodb::ast::ExpressionType::OPERATOR_IS_NOT_NULL, yystack_[3].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10475 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 206: // a_expr: a_expr qual_Op a_expr
#line 1527 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::OperatorExpression>(yylhs.location, yystack_[1].value.as < std::string > (), yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10483 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 207: // a_expr: qual_Op a_expr
#line 1531 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::OperatorExpression>(yylhs.location, yystack_[1].value.as < std::string > (), nullptr, yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10491 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 208: // a_expr: a_expr basicComparisonType sub_type select_with_parens
#line 1535 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
       auto subQueryExpression = mkNode<lingodb::ast::SubqueryExpression>(yylhs.location, yystack_[1].value.as < lingodb::ast::SubqueryType > (), std::static_pointer_cast<lingodb::ast::SelectNode>(yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ()));
       subQueryExpression->testExpr = yystack_[3].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
       subQueryExpression->comparisonType = yystack_[2].value.as < lingodb::ast::ExpressionType > ();
       yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = subQueryExpression;
    }
#line 10502 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 209: // and_a_expr: a_expr AND a_expr
#line 1544 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
       yylhs.value.as < std::shared_ptr<lingodb::ast::ConjunctionExpression> > () = mkNode<lingodb::ast::ConjunctionExpression>(yylhs.location, lingodb::ast::ExpressionType::CONJUNCTION_AND , yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10510 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 210: // or_a_expr: a_expr OR a_expr
#line 1550 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
       yylhs.value.as < std::shared_ptr<lingodb::ast::ConjunctionExpression> > () = mkNode<lingodb::ast::ConjunctionExpression>(yylhs.location, lingodb::ast::ExpressionType::CONJUNCTION_OR , yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10518 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 211: // b_expr: c_expr
#line 1556 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
           { yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 10524 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 212: // b_expr: b_expr "+" b_expr
#line 1558 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::OperatorExpression>(yylhs.location, lingodb::ast::ExpressionType::OPERATOR_PLUS, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (),yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10532 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 213: // b_expr: b_expr "-" b_expr
#line 1562 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::OperatorExpression>(yylhs.location, lingodb::ast::ExpressionType::OPERATOR_MINUS, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (),yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10540 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 214: // b_expr: b_expr "*" b_expr
#line 1566 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::OperatorExpression>(yylhs.location, lingodb::ast::ExpressionType::OPERATOR_TIMES, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (),yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10548 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 215: // b_expr: b_expr "/" b_expr
#line 1570 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::OperatorExpression>(yylhs.location, lingodb::ast::ExpressionType::OPERATOR_DIVIDE, yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (),yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 10556 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 216: // c_expr: columnref
#line 1579 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
              {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 10562 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 217: // c_expr: AexprConst
#line 1580 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 10568 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 218: // c_expr: "(" a_expr ")"
#line 1582 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                   {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[1].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 10574 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 219: // c_expr: case_expr
#line 1584 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
    }
#line 10582 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 220: // c_expr: func_expr
#line 1587 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > ();}
#line 10588 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 221: // c_expr: window_func_expr
#line 1588 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                       {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::WindowExpression> > ();}
#line 10594 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 222: // c_expr: cast_expr
#line 1589 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 10600 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 223: // c_expr: classic_select_and_pipe_sql_with_parens
#line 1591 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto subquery = mkNode<lingodb::ast::SubqueryExpression>(yylhs.location, lingodb::ast::SubqueryType::SCALAR, yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ());
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = subquery;
    }
#line 10609 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 224: // c_expr: EXISTS classic_select_and_pipe_sql_with_parens
#line 1597 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto subquery = mkNode<lingodb::ast::SubqueryExpression>(yylhs.location, lingodb::ast::SubqueryType::EXISTS, yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ());
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = subquery;
    }
#line 10618 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 225: // c_expr: NOT EXISTS classic_select_and_pipe_sql_with_parens
#line 1602 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto subquery = mkNode<lingodb::ast::SubqueryExpression>(yylhs.location, lingodb::ast::SubqueryType::NOT_EXISTS, yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ());
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = subquery;
    }
#line 10627 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 226: // basicComparisonType: "="
#line 1615 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::ExpressionType > () = lingodb::ast::ExpressionType::COMPARE_EQUAL;
    }
#line 10635 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 227: // basicComparisonType: "<>"
#line 1619 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::ExpressionType > () = lingodb::ast::ExpressionType::COMPARE_NOTEQUAL;
    }
#line 10643 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 228: // basicComparisonType: "<"
#line 1623 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::ExpressionType > () = lingodb::ast::ExpressionType::COMPARE_LESSTHAN;
    }
#line 10651 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 229: // basicComparisonType: ">"
#line 1627 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::ExpressionType > () = lingodb::ast::ExpressionType::COMPARE_GREATERTHAN;
    }
#line 10659 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 230: // basicComparisonType: "<="
#line 1631 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::ExpressionType > () = lingodb::ast::ExpressionType::COMPARE_LESSTHANOREQUALTO;
    }
#line 10667 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 231: // basicComparisonType: ">="
#line 1635 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::ExpressionType > () = lingodb::ast::ExpressionType::COMPARE_GREATERTHANOREQUALTO;
    }
#line 10675 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 232: // basicComparisonType: LIKE
#line 1639 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::ExpressionType > () = lingodb::ast::ExpressionType::COMPARE_LIKE;
    }
#line 10683 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 233: // basicComparisonType: NOT LIKE
#line 1643 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::ExpressionType > () = lingodb::ast::ExpressionType::COMPARE_NOT_LIKE;
    }
#line 10691 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 234: // in_expr: select_with_parens
#line 1650 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto subquery = mkNode<lingodb::ast::SubqueryExpression>(yylhs.location, lingodb::ast::SubqueryType::ANY, yystack_[0].value.as < std::shared_ptr<lingodb::ast::QueryNode> > ());
        yylhs.value.as < std::variant<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>, std::shared_ptr<lingodb::ast::SubqueryExpression>> > () = subquery;

    }
#line 10701 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 235: // in_expr: "(" expr_list ")"
#line 1656 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::variant<std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>>, std::shared_ptr<lingodb::ast::SubqueryExpression>> > () = yystack_[1].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
    }
#line 10709 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 236: // case_expr: CASE case_arg when_clause_list case_default END_P
#line 1662 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto caseExpr = mkNode<lingodb::ast::CaseExpression>(yylhs.location, yystack_[3].value.as < std::optional<std::shared_ptr<lingodb::ast::ParsedExpression>> > (), yystack_[2].value.as < std::vector<lingodb::ast::CaseExpression::CaseCheck> > (), yystack_[1].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = caseExpr;
    }
#line 10718 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 237: // when_clause_list: when_clause
#line 1669 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkList<lingodb::ast::CaseExpression::CaseCheck>();
        list.emplace_back(yystack_[0].value.as < lingodb::ast::CaseExpression::CaseCheck > ());
        yylhs.value.as < std::vector<lingodb::ast::CaseExpression::CaseCheck> > () = list;

    }
#line 10729 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 238: // when_clause_list: when_clause_list when_clause
#line 1676 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[1].value.as < std::vector<lingodb::ast::CaseExpression::CaseCheck> > ().emplace_back(yystack_[0].value.as < lingodb::ast::CaseExpression::CaseCheck > ());
        yylhs.value.as < std::vector<lingodb::ast::CaseExpression::CaseCheck> > () = yystack_[1].value.as < std::vector<lingodb::ast::CaseExpression::CaseCheck> > ();
    }
#line 10738 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 239: // when_clause: WHEN a_expr THEN a_expr
#line 1684 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto whenCheck = lingodb::ast::CaseExpression::CaseCheck(yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > (),yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < lingodb::ast::CaseExpression::CaseCheck > () = whenCheck;
    }
#line 10747 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 240: // case_default: ELSE a_expr
#line 1692 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
    }
#line 10755 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 242: // case_arg: a_expr
#line 1700 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::optional<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
    }
#line 10763 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 243: // case_arg: %empty
#line 1703 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
             {yylhs.value.as < std::optional<std::shared_ptr<lingodb::ast::ParsedExpression>> > ()=std::nullopt;}
#line 10769 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 244: // columnref_list: columnref
#line 1708 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkListShared<lingodb::ast::ParsedExpression>();
        list.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = list;
    }
#line 10779 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 245: // columnref_list: columnref_list "," columnref
#line 1714 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ().emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
    }
#line 10788 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 246: // columnref: ColId
#line 1721 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
          {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::ColumnRefExpression>(yylhs.location, yystack_[0].value.as < std::string > ());}
#line 10794 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 247: // columnref: ColId indirection
#line 1722 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                        {
        auto in = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
        if(in->exprClass == lingodb::ast::ExpressionClass::COLUMN_REF) {
            auto columnref = std::static_pointer_cast<lingodb::ast::ColumnRefExpression>(in);
            auto newColumnRef = mkNode<lingodb::ast::ColumnRefExpression>(yylhs.location, yystack_[1].value.as < std::string > ());
            newColumnRef->columnNames.insert(newColumnRef->columnNames.end(), columnref->columnNames.begin(), columnref->columnNames.end() );
            yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = newColumnRef;


        } else if(in->exprClass == lingodb::ast::ExpressionClass::STAR) {
            auto star = std::static_pointer_cast<lingodb::ast::StarExpression>(in);
            star->relationName = yystack_[1].value.as < std::string > ();
            yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = star;
        }

    }
#line 10815 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 248: // func_application: func_name "(" ")"
#line 1741 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        std::string catalog("");
        std::string schema("");
        std::string functionName = yystack_[2].value.as < std::string > ();
        bool isOperator = false;
        bool distinct = false;
        bool exportState = false;
        auto funcExpr = mkNode<lingodb::ast::FunctionExpression>(yylhs.location, catalog, schema, functionName, isOperator, distinct, exportState);
        yylhs.value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > () = funcExpr;
    }
#line 10830 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 249: // func_application: func_name "(" func_arg_list opt_sort_clause ")"
#line 1752 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        std::string catalog("");
        std::string schema("");
        std::string functionName = yystack_[4].value.as < std::string > ();
        bool isOperator = false;
        bool distinct = false;
        bool exportState = false;
        auto funcExpr = mkNode<lingodb::ast::FunctionExpression>(yylhs.location, catalog, schema, functionName, isOperator, distinct, exportState);

        funcExpr->arguments = yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();

        yylhs.value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > () = funcExpr;
    }
#line 10848 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 253: // func_application: func_name "(" DISTINCT func_arg_list opt_alias_clause ")"
#line 1769 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        std::string catalog("");
        std::string schema("");
        std::string functionName = yystack_[5].value.as < std::string > ();
        bool isOperator = false;
        bool distinct = true;
        bool exportState = false;
        auto funcExpr = mkNode<lingodb::ast::FunctionExpression>(yylhs.location, catalog, schema, functionName, isOperator, distinct, exportState);

        funcExpr->arguments = yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();

        yylhs.value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > () = funcExpr;
    }
#line 10866 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 254: // func_application: func_name "(" "*" ")"
#line 1783 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        std::string catalog("");
        std::string schema("");
        std::string functionName = yystack_[3].value.as < std::string > ();
        bool isOperator = false;
        bool distinct = false;
        bool exportState = false;
        auto funcExpr = mkNode<lingodb::ast::FunctionExpression>(yylhs.location, catalog, schema, functionName, isOperator, distinct, exportState);


        auto l = mkListShared<lingodb::ast::ParsedExpression>();
        funcExpr->star = true;
        funcExpr->arguments = l;
        yylhs.value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > () = funcExpr;
    }
#line 10886 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 255: // func_expr: func_application
#line 1803 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        //TODO within_group_clause filter_clause over_clause
        yylhs.value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > ();
    }
#line 10895 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 256: // func_expr: func_expr_common_subexpr
#line 1810 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > ();
    }
#line 10903 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 257: // window_func_expr: func_application over_clause
#line 1816 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[0].value.as < std::shared_ptr<lingodb::ast::WindowExpression> > ()->functionExpression = yystack_[1].value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::WindowExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::WindowExpression> > ();

    }
#line 10913 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 258: // func_arg_list_opt: func_arg_list
#line 1825 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
    }
#line 10921 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 259: // func_arg_list_opt: %empty
#line 1829 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        //TODO
    }
#line 10929 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 260: // func_arg_list: func_arg_expr
#line 1836 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkListShared<lingodb::ast::ParsedExpression>();
        list.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = list;
    }
#line 10939 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 261: // func_arg_list: func_arg_list "," func_arg_expr
#line 1842 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ().emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ()= yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
    }
#line 10948 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 262: // expr_list: a_expr
#line 1849 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkListShared<lingodb::ast::ParsedExpression>();
        list.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = list;
    }
#line 10958 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 263: // expr_list: expr_list "," a_expr
#line 1855 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ().emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
    }
#line 10967 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 264: // expr_list_with_alias: a_expr opt_alias_clause
#line 1862 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkListShared<lingodb::ast::ParsedExpression>();
        yystack_[1].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()->alias = yystack_[0].value.as < std::pair<std::string, std::vector<std::string>> > ().first;
        list.emplace_back(yystack_[1].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = list;
    }
#line 10978 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 265: // expr_list_with_alias: expr_list "," a_expr opt_alias_clause
#line 1869 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[1].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()->alias = yystack_[0].value.as < std::pair<std::string, std::vector<std::string>> > ().first;
        yystack_[3].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ().emplace_back(yystack_[1].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = yystack_[3].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
    }
#line 10988 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 266: // func_arg_expr: a_expr
#line 1877 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
           {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 10994 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 269: // func_expr_common_subexpr: EXTRACT "(" extract_list ")"
#line 1888 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto function  = mkNode<lingodb::ast::FunctionExpression>(yylhs.location, "", "", "EXTRACT", false, false, false);
        function->arguments = yystack_[1].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();

        yylhs.value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > () = function;
    }
#line 11005 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 270: // func_expr_common_subexpr: SUBSTRING "(" substr_list ")"
#line 1895 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto function = mkNode<lingodb::ast::FunctionExpression>(yylhs.location, "", "", "SUBSTRING", false, false, false);
        function->arguments = yystack_[1].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > () = function;
    }
#line 11015 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 271: // func_expr_common_subexpr: SUBSTRING "(" func_arg_list_opt ")"
#line 1901 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto function = mkNode<lingodb::ast::FunctionExpression>(yylhs.location, "", "", "SUBSTRING", false, false, false);
        function->arguments = yystack_[1].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > () = function;
    }
#line 11025 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 272: // cast_expr: CAST "(" a_expr AS Typename ")"
#line 1910 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = mkNode<lingodb::ast::CastExpression>(yylhs.location, yystack_[1].value.as < lingodb::ast::LogicalTypeWithMods > (), yystack_[3].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 11033 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 273: // extract_list: extract_arg FROM a_expr
#line 1917 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkListShared<lingodb::ast::ParsedExpression>();
        list.emplace_back(yystack_[2].value.as < std::shared_ptr<ast::ConstantExpression> > ());
        list.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = list;
    }
#line 11044 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 274: // extract_arg: YEAR_P
#line 1926 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto constant = mkNode<lingodb::ast::ConstantExpression>(yylhs.location);
        constant->value = std::make_shared<lingodb::ast::StringValue>("year");
        yylhs.value.as < std::shared_ptr<ast::ConstantExpression> > () = constant;
    }
#line 11054 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 275: // extract_arg: MONTH_P
#line 1932 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto constant = mkNode<lingodb::ast::ConstantExpression>(yylhs.location);
        constant->value = std::make_shared<lingodb::ast::StringValue>("month");
        yylhs.value.as < std::shared_ptr<ast::ConstantExpression> > () = constant;
    }
#line 11064 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 276: // extract_arg: DAY_P
#line 1938 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto constant = mkNode<lingodb::ast::ConstantExpression>(yylhs.location);
        constant->value = std::make_shared<lingodb::ast::StringValue>("day");
        yylhs.value.as < std::shared_ptr<ast::ConstantExpression> > () = constant;
    }
#line 11074 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 277: // extract_arg: MINUTE_P
#line 1944 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto constant = mkNode<lingodb::ast::ConstantExpression>(yylhs.location);
        constant->value = std::make_shared<lingodb::ast::StringValue>("minute");
        yylhs.value.as < std::shared_ptr<ast::ConstantExpression> > () = constant;
    }
#line 11084 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 278: // substr_list: a_expr FROM a_expr FOR a_expr
#line 1953 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkListShared<lingodb::ast::ParsedExpression>();
        list.emplace_back(yystack_[4].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        list.emplace_back(yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        list.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = list;

    }
#line 11097 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 279: // substr_list: a_expr FOR a_expr FROM a_expr
#line 1962 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {

    }
#line 11105 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 280: // substr_list: a_expr FROM a_expr
#line 1966 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {

    }
#line 11113 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 281: // substr_list: a_expr FOR a_expr
#line 1970 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {

    }
#line 11121 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 282: // over_clause: OVER window_specification
#line 1977 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::WindowExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::WindowExpression> > ();
    }
#line 11129 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 285: // window_specification: "(" opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ")"
#line 1986 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto windowExpression = mkNode<lingodb::ast::WindowExpression>(yylhs.location);
        windowExpression->partitions = yystack_[3].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
        windowExpression->order = yystack_[2].value.as < std::optional<std::shared_ptr<lingodb::ast::OrderByModifier>> > ();
        windowExpression->windowFrame = yystack_[1].value.as < std::shared_ptr<lingodb::ast::WindowFrame> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::WindowExpression> > () = windowExpression;


    }
#line 11143 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 286: // indirection: indirection_el
#line 2000 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                   { yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 11149 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 287: // indirection: indirection indirection_el
#line 2001 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                 {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[1].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 11155 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 288: // indirection_el: "." attr_name
#line 2004 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                  {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=mkNode<lingodb::ast::ColumnRefExpression>(yylhs.location, yystack_[0].value.as < std::string > ());}
#line 11161 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 289: // indirection_el: "." "*"
#line 2005 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
               { yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=mkNode<lingodb::ast::StarExpression>(yylhs.location, "");}
#line 11167 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 291: // opt_target_list: target_list
#line 2017 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto node = mkNode<lingodb::ast::TargetList>(yylhs.location);
        node->targets = std::move(yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ());
        yylhs.value.as < std::shared_ptr<lingodb::ast::TargetList> > () = node;
    }
#line 11177 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 293: // target_list: target_el
#line 2025 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
              { auto list = mkListShared<lingodb::ast::ParsedExpression>(); list.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()); yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ()=list;}
#line 11183 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 294: // target_list: target_list "," target_el
#line 2026 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                        { yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ().emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()); yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ()=yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();}
#line 11189 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 295: // target_el: a_expr AS ColLabel
#line 2029 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                       {  yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()->alias = yystack_[0].value.as < std::string > (); yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[2].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 11195 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 296: // target_el: a_expr BareColLabel
#line 2030 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          {yystack_[1].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()->alias = yystack_[0].value.as < std::string > (); yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[1].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 11201 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 297: // target_el: a_expr
#line 2031 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
             { yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 11207 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 298: // target_el: "*"
#line 2032 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
           {  yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () =mkNode<lingodb::ast::StarExpression>(yylhs.location,"");  }
#line 11213 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 299: // opt_existing_window_name: ColId
#line 2047 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                        {  }
#line 11219 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 300: // opt_existing_window_name: %empty
#line 2048 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                                        {  }
#line 11225 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 301: // opt_partition_clause: PARTITION BY expr_list
#line 2052 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                        { yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ()=yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > (); }
#line 11231 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 302: // opt_partition_clause: %empty
#line 2053 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                    { yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > () = mkListShared<lingodb::ast::ParsedExpression>(); }
#line 11237 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 304: // opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause
#line 2062 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[1].value.as < std::shared_ptr<lingodb::ast::WindowFrame> > ()->windowMode = lingodb::ast::WindowMode::RANGE;
        yylhs.value.as < std::shared_ptr<lingodb::ast::WindowFrame> > () = yystack_[1].value.as < std::shared_ptr<lingodb::ast::WindowFrame> > ();
    }
#line 11246 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 305: // opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause
#line 2067 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[1].value.as < std::shared_ptr<lingodb::ast::WindowFrame> > ()->windowMode = lingodb::ast::WindowMode::ROWS;
        yylhs.value.as < std::shared_ptr<lingodb::ast::WindowFrame> > () = yystack_[1].value.as < std::shared_ptr<lingodb::ast::WindowFrame> > ();
    }
#line 11255 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 306: // opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause
#line 2072 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[1].value.as < std::shared_ptr<lingodb::ast::WindowFrame> > ()->windowMode = lingodb::ast::WindowMode::GROUPS;
        yylhs.value.as < std::shared_ptr<lingodb::ast::WindowFrame> > () = yystack_[1].value.as < std::shared_ptr<lingodb::ast::WindowFrame> > ();
    }
#line 11264 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 307: // opt_frame_clause: %empty
#line 2077 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {

    }
#line 11272 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 308: // frame_extent: frame_bound
#line 2084 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::WindowFrame> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::WindowFrame> > ();
    }
#line 11280 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 309: // frame_extent: BETWEEN frame_bound AND frame_bound
#line 2088 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[2].value.as < std::shared_ptr<lingodb::ast::WindowFrame> > ()->end = yystack_[0].value.as < std::shared_ptr<lingodb::ast::WindowFrame> > ()->start;
        yystack_[2].value.as < std::shared_ptr<lingodb::ast::WindowFrame> > ()->endExpr = yystack_[0].value.as < std::shared_ptr<lingodb::ast::WindowFrame> > ()->startExpr;
        yylhs.value.as < std::shared_ptr<lingodb::ast::WindowFrame> > () = yystack_[2].value.as < std::shared_ptr<lingodb::ast::WindowFrame> > ();

    }
#line 11291 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 310: // frame_bound: UNBOUNDED PRECEDING
#line 2098 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::WindowFrame> > () = mkNode<lingodb::ast::WindowFrame>(yylhs.location, lingodb::ast::WindowFrameType::UNBOUNDED_PRECEDING );
    }
#line 11299 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 311: // frame_bound: UNBOUNDED FOLLOWING
#line 2102 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::WindowFrame> > () = mkNode<lingodb::ast::WindowFrame>(yylhs.location, lingodb::ast::WindowFrameType::UNBOUNDED_FOLLOWING );
    }
#line 11307 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 312: // frame_bound: CURRENT_P ROW
#line 2106 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::WindowFrame> > () = mkNode<lingodb::ast::WindowFrame>(yylhs.location, lingodb::ast::WindowFrameType::CURRENT_ROW );
    }
#line 11315 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 313: // frame_bound: a_expr PRECEDING
#line 2110 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::WindowFrame> > () = mkNode<lingodb::ast::WindowFrame>(yylhs.location, lingodb::ast::WindowFrameType::EXPR_PRECEDING, yystack_[1].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () );
    }
#line 11323 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 314: // frame_bound: a_expr FOLLOWING
#line 2114 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::WindowFrame> > () = mkNode<lingodb::ast::WindowFrame>(yylhs.location, lingodb::ast::WindowFrameType::EXPR_FOLLOWING, yystack_[1].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
    }
#line 11331 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 317: // any_operator: all_Op
#line 2125 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > ();
    }
#line 11339 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 318: // qual_Op: all_Op
#line 2132 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
           {yylhs.value.as < std::string > ()=yystack_[0].value.as < std::string > ();}
#line 11345 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 321: // sub_type: ANY
#line 2154 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::SubqueryType > () = lingodb::ast::SubqueryType::ANY;
    }
#line 11353 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 322: // sub_type: ALL
#line 2158 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::SubqueryType > () = lingodb::ast::SubqueryType::ALL;
    }
#line 11361 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 323: // sub_type: SOME
#line 2162 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::SubqueryType > () = lingodb::ast::SubqueryType::ANY;
    }
#line 11369 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 324: // all_Op: Op
#line 2168 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
       {yylhs.value.as < std::string > ()=yystack_[0].value.as < std::string > ();}
#line 11375 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 325: // ColId: "identifier"
#line 2201 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
               {yylhs.value.as < std::string > ()=yystack_[0].value.as < std::string > ();}
#line 11381 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 326: // ColId: unreserved_keyword
#line 2202 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                         {yylhs.value.as < std::string > ()=yystack_[0].value.as < std::string > ();}
#line 11387 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 327: // ColId: col_name_keyword
#line 2203 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                       {yylhs.value.as < std::string > ()=yystack_[0].value.as < std::string > ();}
#line 11393 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 328: // type_function_name: "identifier"
#line 2208 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
               {yylhs.value.as < std::string > ()=yystack_[0].value.as < std::string > ();}
#line 11399 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 329: // type_function_name: unreserved_keyword
#line 2209 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                         {yylhs.value.as < std::string > ()=yystack_[0].value.as < std::string > ();}
#line 11405 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 330: // type_function_name: type_func_name_keyword
#line 2210 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
      { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11411 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 331: // type_function_name: DATE_P
#line 2211 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
             {yylhs.value.as < std::string > ()="date";}
#line 11417 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 332: // type_func_name_keyword: AUTHORIZATION
#line 2214 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11423 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 333: // type_func_name_keyword: BINARY
#line 2215 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11429 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 334: // type_func_name_keyword: COLLATION
#line 2216 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11435 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 335: // type_func_name_keyword: CONCURRENTLY
#line 2217 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11441 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 336: // type_func_name_keyword: CROSS
#line 2218 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11447 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 337: // type_func_name_keyword: CURRENT_SCHEMA
#line 2219 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11453 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 338: // type_func_name_keyword: FREEZE
#line 2220 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11459 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 339: // type_func_name_keyword: FULL
#line 2221 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11465 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 340: // type_func_name_keyword: ILIKE
#line 2222 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11471 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 341: // type_func_name_keyword: INNER_P
#line 2223 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11477 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 342: // type_func_name_keyword: IS
#line 2224 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11483 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 343: // type_func_name_keyword: ISNULL
#line 2225 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11489 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 344: // type_func_name_keyword: JOIN
#line 2226 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11495 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 345: // type_func_name_keyword: LEFT
#line 2227 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11501 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 346: // type_func_name_keyword: LIKE
#line 2228 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11507 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 347: // type_func_name_keyword: NATURAL
#line 2229 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11513 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 348: // type_func_name_keyword: NOTNULL
#line 2230 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11519 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 349: // type_func_name_keyword: OUTER_P
#line 2231 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11525 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 350: // type_func_name_keyword: OVERLAPS
#line 2232 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11531 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 351: // type_func_name_keyword: RIGHT
#line 2233 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11537 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 352: // type_func_name_keyword: SIMILAR
#line 2234 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11543 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 353: // type_func_name_keyword: TABLESAMPLE
#line 2235 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11549 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 354: // type_func_name_keyword: VERBOSE
#line 2236 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11555 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 355: // ColLabel: "identifier"
#line 2244 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                                                { yylhs.value.as < std::string > ()=yystack_[0].value.as < std::string > (); }
#line 11561 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 356: // ColLabel: unreserved_keyword
#line 2245 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                                { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > ();}
#line 11567 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 357: // ColLabel: col_name_keyword
#line 2246 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                                        { yylhs.value.as < std::string > ()=yystack_[0].value.as < std::string > (); }
#line 11573 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 358: // ColLabel: reserved_keyword
#line 2248 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                                        { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11579 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 359: // BareColLabel: "identifier"
#line 2254 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                                                        { yylhs.value.as < std::string > ()=yystack_[0].value.as < std::string > (); }
#line 11585 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 360: // reserved_keyword: ALL
#line 2270 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11591 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 361: // reserved_keyword: ANALYSE
#line 2271 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11597 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 362: // reserved_keyword: ANALYZE
#line 2272 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11603 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 363: // reserved_keyword: AND
#line 2273 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11609 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 364: // reserved_keyword: ANY
#line 2274 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11615 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 365: // reserved_keyword: ARRAY
#line 2275 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11621 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 366: // reserved_keyword: AS
#line 2276 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11627 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 367: // reserved_keyword: ASC
#line 2277 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11633 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 368: // reserved_keyword: ASYMMETRIC
#line 2278 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11639 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 369: // reserved_keyword: BOTH
#line 2279 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11645 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 370: // reserved_keyword: CASE
#line 2280 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11651 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 371: // reserved_keyword: CAST
#line 2281 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11657 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 372: // reserved_keyword: CHECK
#line 2282 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11663 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 373: // reserved_keyword: COLLATE
#line 2283 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11669 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 374: // reserved_keyword: COLUMN
#line 2284 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11675 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 375: // reserved_keyword: CONSTRAINT
#line 2285 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11681 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 376: // reserved_keyword: CREATE
#line 2286 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11687 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 377: // reserved_keyword: CURRENT_CATALOG
#line 2287 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11693 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 378: // reserved_keyword: CURRENT_DATE
#line 2288 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11699 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 379: // reserved_keyword: CURRENT_ROLE
#line 2289 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11705 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 380: // reserved_keyword: CURRENT_TIME
#line 2290 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11711 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 381: // reserved_keyword: CURRENT_TIMESTAMP
#line 2291 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11717 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 382: // reserved_keyword: CURRENT_USER
#line 2292 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11723 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 383: // reserved_keyword: DEFAULT
#line 2293 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11729 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 384: // reserved_keyword: DEFERRABLE
#line 2294 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11735 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 385: // reserved_keyword: DESC
#line 2295 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11741 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 386: // reserved_keyword: DISTINCT
#line 2296 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11747 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 387: // reserved_keyword: DO
#line 2297 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11753 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 388: // reserved_keyword: ELSE
#line 2298 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11759 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 389: // reserved_keyword: END_P
#line 2299 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11765 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 390: // reserved_keyword: EXCEPT
#line 2300 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11771 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 391: // reserved_keyword: FALSE_P
#line 2301 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11777 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 392: // reserved_keyword: FETCH
#line 2302 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11783 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 393: // reserved_keyword: FOR
#line 2303 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11789 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 394: // reserved_keyword: FOREIGN
#line 2304 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11795 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 395: // reserved_keyword: FROM
#line 2305 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11801 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 396: // reserved_keyword: GRANT
#line 2306 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11807 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 397: // reserved_keyword: GROUP_P
#line 2307 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11813 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 398: // reserved_keyword: HAVING
#line 2308 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11819 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 399: // reserved_keyword: IN_P
#line 2309 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11825 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 400: // reserved_keyword: INITIALLY
#line 2310 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11831 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 401: // reserved_keyword: INTERSECT
#line 2311 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11837 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 402: // reserved_keyword: INTO
#line 2312 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11843 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 403: // reserved_keyword: LATERAL_P
#line 2313 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11849 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 404: // reserved_keyword: LEADING
#line 2314 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11855 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 405: // reserved_keyword: LIMIT
#line 2315 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11861 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 406: // reserved_keyword: LOCALTIME
#line 2316 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11867 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 407: // reserved_keyword: LOCALTIMESTAMP
#line 2317 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11873 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 408: // reserved_keyword: NOT
#line 2318 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11879 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 409: // reserved_keyword: NULL_P
#line 2319 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11885 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 410: // reserved_keyword: OFFSET
#line 2320 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11891 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 411: // reserved_keyword: ON
#line 2321 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11897 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 412: // reserved_keyword: ONLY
#line 2322 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11903 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 413: // reserved_keyword: OR
#line 2323 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11909 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 414: // reserved_keyword: ORDER
#line 2324 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11915 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 415: // reserved_keyword: PLACING
#line 2325 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11921 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 416: // reserved_keyword: PRIMARY
#line 2326 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11927 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 417: // reserved_keyword: REFERENCES
#line 2327 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11933 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 418: // reserved_keyword: RETURNING
#line 2328 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11939 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 419: // reserved_keyword: SELECT
#line 2329 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11945 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 420: // reserved_keyword: SESSION_USER
#line 2330 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11951 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 421: // reserved_keyword: SOME
#line 2331 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11957 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 422: // reserved_keyword: SYMMETRIC
#line 2332 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11963 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 423: // reserved_keyword: SYSTEM_USER
#line 2333 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11969 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 424: // reserved_keyword: TABLE
#line 2334 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11975 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 425: // reserved_keyword: THEN
#line 2335 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11981 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 426: // reserved_keyword: TO
#line 2336 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11987 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 427: // reserved_keyword: TRAILING
#line 2337 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11993 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 428: // reserved_keyword: TRUE_P
#line 2338 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 11999 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 429: // reserved_keyword: UNION
#line 2339 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12005 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 430: // reserved_keyword: UNIQUE
#line 2340 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12011 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 431: // reserved_keyword: USER
#line 2341 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12017 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 432: // reserved_keyword: USING
#line 2342 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12023 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 433: // reserved_keyword: VARIADIC
#line 2343 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12029 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 434: // reserved_keyword: WHEN
#line 2344 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12035 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 435: // reserved_keyword: WHERE
#line 2345 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12041 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 436: // reserved_keyword: WINDOW
#line 2346 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12047 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 437: // reserved_keyword: WITH
#line 2347 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12053 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 438: // unreserved_keyword: ABORT_P
#line 2350 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12059 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 439: // unreserved_keyword: ABSENT
#line 2351 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12065 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 440: // unreserved_keyword: ABSOLUTE_P
#line 2352 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12071 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 441: // unreserved_keyword: ACCESS
#line 2353 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12077 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 442: // unreserved_keyword: ACTION
#line 2354 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12083 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 443: // unreserved_keyword: ADD_P
#line 2355 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12089 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 444: // unreserved_keyword: ADMIN
#line 2356 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12095 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 445: // unreserved_keyword: AFTER
#line 2357 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12101 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 446: // unreserved_keyword: AGGREGATE
#line 2358 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12107 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 447: // unreserved_keyword: ALSO
#line 2359 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12113 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 448: // unreserved_keyword: ALTER
#line 2360 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12119 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 449: // unreserved_keyword: ALWAYS
#line 2361 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12125 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 450: // unreserved_keyword: ASENSITIVE
#line 2362 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12131 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 451: // unreserved_keyword: ASSERTION
#line 2363 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12137 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 452: // unreserved_keyword: ASSIGNMENT
#line 2364 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12143 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 453: // unreserved_keyword: AT
#line 2365 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12149 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 454: // unreserved_keyword: ATOMIC
#line 2366 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12155 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 455: // unreserved_keyword: ATTACH
#line 2367 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12161 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 456: // unreserved_keyword: ATTRIBUTE
#line 2368 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12167 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 457: // unreserved_keyword: BACKWARD
#line 2369 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12173 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 458: // unreserved_keyword: BEFORE
#line 2370 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12179 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 459: // unreserved_keyword: BEGIN_P
#line 2371 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12185 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 460: // unreserved_keyword: BREADTH
#line 2372 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12191 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 461: // unreserved_keyword: BY
#line 2373 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12197 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 462: // unreserved_keyword: CACHE
#line 2374 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12203 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 463: // unreserved_keyword: CALL
#line 2375 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12209 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 464: // unreserved_keyword: CALLED
#line 2376 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12215 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 465: // unreserved_keyword: CASCADE
#line 2377 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12221 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 466: // unreserved_keyword: CASCADED
#line 2378 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12227 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 467: // unreserved_keyword: CATALOG_P
#line 2379 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12233 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 468: // unreserved_keyword: CHAIN
#line 2380 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12239 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 469: // unreserved_keyword: CHARACTERISTICS
#line 2381 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12245 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 470: // unreserved_keyword: CHECKPOINT
#line 2382 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12251 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 471: // unreserved_keyword: CLASS
#line 2383 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12257 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 472: // unreserved_keyword: CLOSE
#line 2384 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12263 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 473: // unreserved_keyword: CLUSTER
#line 2385 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12269 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 474: // unreserved_keyword: COLUMNS
#line 2386 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12275 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 475: // unreserved_keyword: COMMENT
#line 2387 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12281 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 476: // unreserved_keyword: COMMENTS
#line 2388 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12287 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 477: // unreserved_keyword: COMMIT
#line 2389 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12293 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 478: // unreserved_keyword: COMMITTED
#line 2390 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12299 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 479: // unreserved_keyword: COMPRESSION
#line 2391 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12305 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 480: // unreserved_keyword: CONDITIONAL
#line 2392 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12311 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 481: // unreserved_keyword: CONFIGURATION
#line 2393 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12317 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 482: // unreserved_keyword: CONFLICT
#line 2394 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12323 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 483: // unreserved_keyword: CONNECTION
#line 2395 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12329 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 484: // unreserved_keyword: CONSTRAINTS
#line 2396 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12335 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 485: // unreserved_keyword: CONTENT_P
#line 2397 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12341 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 486: // unreserved_keyword: CONTINUE_P
#line 2398 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12347 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 487: // unreserved_keyword: CONVERSION_P
#line 2399 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12353 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 488: // unreserved_keyword: COPY
#line 2400 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12359 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 489: // unreserved_keyword: COST
#line 2401 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12365 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 490: // unreserved_keyword: CSV
#line 2402 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12371 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 491: // unreserved_keyword: CUBE
#line 2403 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12377 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 492: // unreserved_keyword: CURRENT_P
#line 2404 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12383 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 493: // unreserved_keyword: CURSOR
#line 2405 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12389 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 494: // unreserved_keyword: CYCLE
#line 2406 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12395 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 495: // unreserved_keyword: DATA_P
#line 2407 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12401 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 496: // unreserved_keyword: DATABASE
#line 2408 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12407 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 497: // unreserved_keyword: DAY_P
#line 2409 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12413 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 498: // unreserved_keyword: DEALLOCATE
#line 2410 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12419 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 499: // unreserved_keyword: DECLARE
#line 2411 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12425 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 500: // unreserved_keyword: DEFAULTS
#line 2412 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12431 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 501: // unreserved_keyword: DEFERRED
#line 2413 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12437 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 502: // unreserved_keyword: DEFINER
#line 2414 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12443 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 503: // unreserved_keyword: DELETE_P
#line 2415 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12449 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 504: // unreserved_keyword: DELIMITER
#line 2416 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12455 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 505: // unreserved_keyword: DELIMITERS
#line 2417 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12461 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 506: // unreserved_keyword: DEPENDS
#line 2418 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12467 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 507: // unreserved_keyword: DEPTH
#line 2419 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12473 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 508: // unreserved_keyword: DETACH
#line 2420 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12479 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 509: // unreserved_keyword: DICTIONARY
#line 2421 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12485 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 510: // unreserved_keyword: DISABLE_P
#line 2422 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12491 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 511: // unreserved_keyword: DISCARD
#line 2423 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12497 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 512: // unreserved_keyword: DOCUMENT_P
#line 2424 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12503 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 513: // unreserved_keyword: DOMAIN_P
#line 2425 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12509 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 514: // unreserved_keyword: DOUBLE_P
#line 2426 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12515 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 515: // unreserved_keyword: DROP
#line 2427 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12521 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 516: // unreserved_keyword: EACH
#line 2428 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12527 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 517: // unreserved_keyword: EMPTY_P
#line 2429 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12533 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 518: // unreserved_keyword: ENABLE_P
#line 2430 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12539 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 519: // unreserved_keyword: ENCODING
#line 2431 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12545 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 520: // unreserved_keyword: ENCRYPTED
#line 2432 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12551 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 521: // unreserved_keyword: ENFORCED
#line 2433 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12557 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 522: // unreserved_keyword: ENUM_P
#line 2434 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12563 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 523: // unreserved_keyword: ERROR_P
#line 2435 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12569 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 524: // unreserved_keyword: ESCAPE
#line 2436 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12575 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 525: // unreserved_keyword: EVENT
#line 2437 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12581 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 526: // unreserved_keyword: EXCLUDE
#line 2438 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12587 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 527: // unreserved_keyword: EXCLUDING
#line 2439 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12593 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 528: // unreserved_keyword: EXCLUSIVE
#line 2440 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12599 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 529: // unreserved_keyword: EXECUTE
#line 2441 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12605 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 530: // unreserved_keyword: EXPLAIN
#line 2442 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12611 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 531: // unreserved_keyword: EXPRESSION
#line 2443 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12617 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 532: // unreserved_keyword: EXTENSION
#line 2444 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12623 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 533: // unreserved_keyword: EXTERNAL
#line 2445 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12629 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 534: // unreserved_keyword: FAMILY
#line 2446 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12635 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 535: // unreserved_keyword: FILTER
#line 2447 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12641 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 536: // unreserved_keyword: FINALIZE
#line 2448 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12647 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 537: // unreserved_keyword: FIRST_P
#line 2449 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12653 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 538: // unreserved_keyword: FOLLOWING
#line 2450 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12659 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 539: // unreserved_keyword: FORCE
#line 2451 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12665 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 540: // unreserved_keyword: FORMAT
#line 2452 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12671 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 541: // unreserved_keyword: FORWARD
#line 2453 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12677 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 542: // unreserved_keyword: FUNCTION
#line 2454 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12683 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 543: // unreserved_keyword: FUNCTIONS
#line 2455 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12689 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 544: // unreserved_keyword: GENERATED
#line 2456 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12695 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 545: // unreserved_keyword: GLOBAL
#line 2457 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12701 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 546: // unreserved_keyword: GRANTED
#line 2458 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12707 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 547: // unreserved_keyword: GROUPS
#line 2459 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12713 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 548: // unreserved_keyword: HANDLER
#line 2460 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12719 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 549: // unreserved_keyword: HEADER_P
#line 2461 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12725 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 550: // unreserved_keyword: HOLD
#line 2462 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12731 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 551: // unreserved_keyword: HOUR_P
#line 2463 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12737 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 552: // unreserved_keyword: IDENTITY_P
#line 2464 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12743 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 553: // unreserved_keyword: IF_P
#line 2465 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12749 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 554: // unreserved_keyword: IMMEDIATE
#line 2466 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12755 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 555: // unreserved_keyword: IMMUTABLE
#line 2467 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12761 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 556: // unreserved_keyword: IMPLICIT_P
#line 2468 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12767 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 557: // unreserved_keyword: IMPORT_P
#line 2469 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12773 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 558: // unreserved_keyword: INCLUDE
#line 2470 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12779 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 559: // unreserved_keyword: INCLUDING
#line 2471 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12785 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 560: // unreserved_keyword: INCREMENT
#line 2472 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12791 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 561: // unreserved_keyword: INDENT
#line 2473 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12797 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 562: // unreserved_keyword: INDEX
#line 2474 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12803 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 563: // unreserved_keyword: INDEXES
#line 2475 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12809 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 564: // unreserved_keyword: INHERIT
#line 2476 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12815 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 565: // unreserved_keyword: INHERITS
#line 2477 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12821 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 566: // unreserved_keyword: INLINE_P
#line 2478 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12827 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 567: // unreserved_keyword: INPUT_P
#line 2479 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12833 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 568: // unreserved_keyword: INSENSITIVE
#line 2480 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12839 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 569: // unreserved_keyword: INSERT
#line 2481 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12845 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 570: // unreserved_keyword: INSTEAD
#line 2482 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12851 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 571: // unreserved_keyword: INVOKER
#line 2483 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12857 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 572: // unreserved_keyword: ISOLATION
#line 2484 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12863 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 573: // unreserved_keyword: KEEP
#line 2485 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12869 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 574: // unreserved_keyword: KEY
#line 2486 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12875 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 575: // unreserved_keyword: KEYS
#line 2487 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12881 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 576: // unreserved_keyword: LABEL
#line 2488 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12887 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 577: // unreserved_keyword: LANGUAGE
#line 2489 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12893 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 578: // unreserved_keyword: LARGE_P
#line 2490 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12899 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 579: // unreserved_keyword: LAST_P
#line 2491 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12905 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 580: // unreserved_keyword: LEAKPROOF
#line 2492 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12911 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 581: // unreserved_keyword: LEVEL
#line 2493 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12917 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 582: // unreserved_keyword: LISTEN
#line 2494 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12923 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 583: // unreserved_keyword: LOAD
#line 2495 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12929 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 584: // unreserved_keyword: LOCAL
#line 2496 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12935 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 585: // unreserved_keyword: LOCATION
#line 2497 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12941 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 586: // unreserved_keyword: LOCK_P
#line 2498 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12947 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 587: // unreserved_keyword: LOCKED
#line 2499 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12953 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 588: // unreserved_keyword: LOGGED
#line 2500 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12959 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 589: // unreserved_keyword: MAPPING
#line 2501 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12965 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 590: // unreserved_keyword: MATCH
#line 2502 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12971 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 591: // unreserved_keyword: MATCHED
#line 2503 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12977 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 592: // unreserved_keyword: MATERIALIZED
#line 2504 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12983 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 593: // unreserved_keyword: MAXVALUE
#line 2505 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12989 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 594: // unreserved_keyword: MERGE
#line 2506 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 12995 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 595: // unreserved_keyword: METHOD
#line 2507 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13001 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 596: // unreserved_keyword: MINUTE_P
#line 2508 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13007 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 597: // unreserved_keyword: MINVALUE
#line 2509 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13013 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 598: // unreserved_keyword: MODE
#line 2510 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13019 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 599: // unreserved_keyword: MONTH_P
#line 2511 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13025 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 600: // unreserved_keyword: MOVE
#line 2512 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13031 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 601: // unreserved_keyword: NAME_P
#line 2513 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13037 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 602: // unreserved_keyword: NAMES
#line 2514 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13043 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 603: // unreserved_keyword: NESTED
#line 2515 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13049 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 604: // unreserved_keyword: NEW
#line 2516 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13055 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 605: // unreserved_keyword: NEXT
#line 2517 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13061 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 606: // unreserved_keyword: NFC
#line 2518 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13067 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 607: // unreserved_keyword: NFD
#line 2519 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13073 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 608: // unreserved_keyword: NFKC
#line 2520 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13079 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 609: // unreserved_keyword: NFKD
#line 2521 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13085 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 610: // unreserved_keyword: NO
#line 2522 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13091 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 611: // unreserved_keyword: NORMALIZED
#line 2523 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13097 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 612: // unreserved_keyword: NOTHING
#line 2524 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13103 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 613: // unreserved_keyword: NOTIFY
#line 2525 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13109 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 614: // unreserved_keyword: NOWAIT
#line 2526 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13115 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 615: // unreserved_keyword: NULLS_P
#line 2527 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13121 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 616: // unreserved_keyword: OBJECT_P
#line 2528 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13127 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 617: // unreserved_keyword: OBJECTS_P
#line 2529 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13133 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 618: // unreserved_keyword: OF
#line 2530 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13139 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 619: // unreserved_keyword: OFF
#line 2531 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13145 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 620: // unreserved_keyword: OIDS
#line 2532 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13151 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 621: // unreserved_keyword: OLD
#line 2533 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13157 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 622: // unreserved_keyword: OMIT
#line 2534 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13163 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 623: // unreserved_keyword: OPERATOR
#line 2535 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13169 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 624: // unreserved_keyword: OPTION
#line 2536 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13175 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 625: // unreserved_keyword: OPTIONS
#line 2537 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13181 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 626: // unreserved_keyword: ORDINALITY
#line 2538 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13187 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 627: // unreserved_keyword: OTHERS
#line 2539 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13193 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 628: // unreserved_keyword: OVER
#line 2540 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13199 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 629: // unreserved_keyword: OVERRIDING
#line 2541 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13205 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 630: // unreserved_keyword: OWNED
#line 2542 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13211 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 631: // unreserved_keyword: OWNER
#line 2543 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13217 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 632: // unreserved_keyword: PARALLEL
#line 2544 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13223 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 633: // unreserved_keyword: PARAMETER
#line 2545 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13229 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 634: // unreserved_keyword: PARSER
#line 2546 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13235 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 635: // unreserved_keyword: PARTIAL
#line 2547 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13241 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 636: // unreserved_keyword: PARTITION
#line 2548 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13247 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 637: // unreserved_keyword: PASSING
#line 2549 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13253 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 638: // unreserved_keyword: PASSWORD
#line 2550 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13259 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 639: // unreserved_keyword: PATH
#line 2551 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13265 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 640: // unreserved_keyword: PERIOD
#line 2552 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13271 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 641: // unreserved_keyword: PLAN
#line 2553 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13277 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 642: // unreserved_keyword: PLANS
#line 2554 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13283 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 643: // unreserved_keyword: POLICY
#line 2555 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13289 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 644: // unreserved_keyword: PRECEDING
#line 2556 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13295 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 645: // unreserved_keyword: PREPARE
#line 2557 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13301 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 646: // unreserved_keyword: PREPARED
#line 2558 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13307 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 647: // unreserved_keyword: PRESERVE
#line 2559 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13313 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 648: // unreserved_keyword: PRIOR
#line 2560 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13319 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 649: // unreserved_keyword: PRIVILEGES
#line 2561 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13325 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 650: // unreserved_keyword: PROCEDURAL
#line 2562 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13331 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 651: // unreserved_keyword: PROCEDURE
#line 2563 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13337 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 652: // unreserved_keyword: PROCEDURES
#line 2564 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13343 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 653: // unreserved_keyword: PROGRAM
#line 2565 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13349 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 654: // unreserved_keyword: PUBLICATION
#line 2566 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13355 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 656: // unreserved_keyword: QUOTES
#line 2568 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13361 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 657: // unreserved_keyword: RANGE
#line 2569 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13367 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 658: // unreserved_keyword: READ
#line 2570 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13373 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 659: // unreserved_keyword: REASSIGN
#line 2571 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13379 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 660: // unreserved_keyword: RECURSIVE
#line 2572 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13385 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 661: // unreserved_keyword: REF_P
#line 2573 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13391 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 662: // unreserved_keyword: REFERENCING
#line 2574 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13397 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 663: // unreserved_keyword: REFRESH
#line 2575 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13403 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 664: // unreserved_keyword: REINDEX
#line 2576 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13409 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 665: // unreserved_keyword: RELATIVE_P
#line 2577 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13415 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 666: // unreserved_keyword: RELEASE
#line 2578 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13421 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 667: // unreserved_keyword: RENAME
#line 2579 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13427 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 668: // unreserved_keyword: REPEATABLE
#line 2580 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13433 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 669: // unreserved_keyword: REPLACE
#line 2581 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13439 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 670: // unreserved_keyword: REPLICA
#line 2582 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13445 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 671: // unreserved_keyword: RESET
#line 2583 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13451 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 672: // unreserved_keyword: RESTART
#line 2584 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13457 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 673: // unreserved_keyword: RESTRICT
#line 2585 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13463 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 674: // unreserved_keyword: RETURN
#line 2586 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13469 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 675: // unreserved_keyword: RETURNS
#line 2587 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13475 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 676: // unreserved_keyword: REVOKE
#line 2588 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13481 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 677: // unreserved_keyword: ROLE
#line 2589 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13487 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 678: // unreserved_keyword: ROLLBACK
#line 2590 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13493 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 679: // unreserved_keyword: ROLLUP
#line 2591 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13499 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 680: // unreserved_keyword: ROUTINE
#line 2592 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13505 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 681: // unreserved_keyword: ROUTINES
#line 2593 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13511 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 682: // unreserved_keyword: ROWS
#line 2594 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13517 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 683: // unreserved_keyword: RULE
#line 2595 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13523 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 684: // unreserved_keyword: SAVEPOINT
#line 2596 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13529 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 685: // unreserved_keyword: SCALAR
#line 2597 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13535 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 686: // unreserved_keyword: SCHEMA
#line 2598 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13541 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 687: // unreserved_keyword: SCHEMAS
#line 2599 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13547 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 688: // unreserved_keyword: SCROLL
#line 2600 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13553 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 689: // unreserved_keyword: SEARCH
#line 2601 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13559 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 690: // unreserved_keyword: SECOND_P
#line 2602 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13565 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 691: // unreserved_keyword: SECURITY
#line 2603 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13571 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 692: // unreserved_keyword: SEQUENCE
#line 2604 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13577 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 693: // unreserved_keyword: SEQUENCES
#line 2605 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13583 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 694: // unreserved_keyword: SERIALIZABLE
#line 2606 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13589 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 695: // unreserved_keyword: SERVER
#line 2607 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13595 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 696: // unreserved_keyword: SESSION
#line 2608 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13601 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 697: // unreserved_keyword: SET
#line 2609 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13607 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 698: // unreserved_keyword: SETS
#line 2610 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13613 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 699: // unreserved_keyword: SHARE
#line 2611 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13619 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 700: // unreserved_keyword: SHOW
#line 2612 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13625 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 701: // unreserved_keyword: SIMPLE
#line 2613 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13631 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 702: // unreserved_keyword: SKIP
#line 2614 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13637 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 703: // unreserved_keyword: SNAPSHOT
#line 2615 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13643 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 704: // unreserved_keyword: SOURCE
#line 2616 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13649 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 705: // unreserved_keyword: SQL_P
#line 2617 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13655 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 706: // unreserved_keyword: STABLE
#line 2618 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13661 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 707: // unreserved_keyword: STANDALONE_P
#line 2619 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13667 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 708: // unreserved_keyword: START
#line 2620 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13673 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 709: // unreserved_keyword: STATEMENT
#line 2621 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13679 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 710: // unreserved_keyword: STATISTICS
#line 2622 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13685 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 711: // unreserved_keyword: STDIN
#line 2623 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13691 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 712: // unreserved_keyword: STDOUT
#line 2624 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13697 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 713: // unreserved_keyword: STORAGE
#line 2625 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13703 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 714: // unreserved_keyword: STORED
#line 2626 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13709 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 715: // unreserved_keyword: STRICT_P
#line 2627 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13715 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 716: // unreserved_keyword: STRING_P
#line 2628 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13721 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 717: // unreserved_keyword: STRIP_P
#line 2629 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13727 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 718: // unreserved_keyword: SUBSCRIPTION
#line 2630 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13733 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 719: // unreserved_keyword: SUPPORT
#line 2631 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13739 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 720: // unreserved_keyword: SYSID
#line 2632 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13745 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 721: // unreserved_keyword: SYSTEM_P
#line 2633 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13751 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 722: // unreserved_keyword: TABLES
#line 2634 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13757 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 723: // unreserved_keyword: TABLESPACE
#line 2635 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13763 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 724: // unreserved_keyword: TARGET
#line 2636 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13769 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 725: // unreserved_keyword: TEMP
#line 2637 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13775 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 726: // unreserved_keyword: TEMPLATE
#line 2638 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13781 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 727: // unreserved_keyword: TEMPORARY
#line 2639 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13787 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 728: // unreserved_keyword: TEXT_P
#line 2640 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13793 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 729: // unreserved_keyword: TIES
#line 2641 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13799 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 730: // unreserved_keyword: TRANSACTION
#line 2642 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13805 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 731: // unreserved_keyword: TRANSFORM
#line 2643 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13811 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 732: // unreserved_keyword: TRIGGER
#line 2644 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13817 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 733: // unreserved_keyword: TRUNCATE
#line 2645 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13823 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 734: // unreserved_keyword: TRUSTED
#line 2646 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13829 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 735: // unreserved_keyword: TYPE_P
#line 2647 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13835 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 736: // unreserved_keyword: TYPES_P
#line 2648 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13841 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 737: // unreserved_keyword: UESCAPE
#line 2649 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13847 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 738: // unreserved_keyword: UNBOUNDED
#line 2650 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13853 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 739: // unreserved_keyword: UNCOMMITTED
#line 2651 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13859 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 740: // unreserved_keyword: UNCONDITIONAL
#line 2652 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13865 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 741: // unreserved_keyword: UNENCRYPTED
#line 2653 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13871 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 742: // unreserved_keyword: UNKNOWN
#line 2654 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13877 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 743: // unreserved_keyword: UNLISTEN
#line 2655 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13883 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 744: // unreserved_keyword: UNLOGGED
#line 2656 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13889 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 745: // unreserved_keyword: UNTIL
#line 2657 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13895 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 746: // unreserved_keyword: UPDATE
#line 2658 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13901 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 747: // unreserved_keyword: VACUUM
#line 2659 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13907 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 748: // unreserved_keyword: VALID
#line 2660 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13913 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 749: // unreserved_keyword: VALIDATE
#line 2661 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13919 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 750: // unreserved_keyword: VALIDATOR
#line 2662 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13925 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 751: // unreserved_keyword: VALUE_P
#line 2663 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13931 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 752: // unreserved_keyword: VARYING
#line 2664 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13937 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 753: // unreserved_keyword: VERSION_P
#line 2665 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13943 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 754: // unreserved_keyword: VIEW
#line 2666 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13949 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 755: // unreserved_keyword: VIEWS
#line 2667 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13955 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 756: // unreserved_keyword: VIRTUAL
#line 2668 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13961 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 757: // unreserved_keyword: VOLATILE
#line 2669 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13967 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 758: // unreserved_keyword: WHITESPACE_P
#line 2670 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13973 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 759: // unreserved_keyword: WITHIN
#line 2671 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13979 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 760: // unreserved_keyword: WITHOUT
#line 2672 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13985 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 761: // unreserved_keyword: WORK
#line 2673 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13991 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 762: // unreserved_keyword: WRAPPER
#line 2674 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 13997 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 763: // unreserved_keyword: WRITE
#line 2675 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14003 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 764: // unreserved_keyword: XML_P
#line 2676 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14009 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 765: // unreserved_keyword: YEAR_P
#line 2677 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14015 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 766: // unreserved_keyword: YES_P
#line 2678 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14021 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 767: // unreserved_keyword: ZONE
#line 2679 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14027 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 768: // col_name_keyword: BETWEEN
#line 2692 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14033 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 769: // col_name_keyword: BIGINT
#line 2693 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14039 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 770: // col_name_keyword: BIT
#line 2694 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14045 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 771: // col_name_keyword: BOOLEAN_P
#line 2695 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14051 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 772: // col_name_keyword: CHAR_P
#line 2696 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14057 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 773: // col_name_keyword: CHARACTER
#line 2697 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14063 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 774: // col_name_keyword: COALESCE
#line 2698 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14069 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 775: // col_name_keyword: DEC
#line 2699 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14075 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 776: // col_name_keyword: DECIMAL_P
#line 2700 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14081 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 777: // col_name_keyword: EXISTS
#line 2701 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14087 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 778: // col_name_keyword: EXTRACT
#line 2702 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14093 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 779: // col_name_keyword: FLOAT_P
#line 2703 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14099 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 780: // col_name_keyword: GREATEST
#line 2704 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14105 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 781: // col_name_keyword: GROUPING
#line 2705 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14111 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 782: // col_name_keyword: INOUT
#line 2706 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14117 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 783: // col_name_keyword: INT_P
#line 2707 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14123 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 784: // col_name_keyword: INTEGER
#line 2708 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14129 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 785: // col_name_keyword: INTERVAL
#line 2709 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14135 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 786: // col_name_keyword: JSON
#line 2710 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14141 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 787: // col_name_keyword: JSON_ARRAY
#line 2711 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14147 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 788: // col_name_keyword: JSON_ARRAYAGG
#line 2712 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14153 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 789: // col_name_keyword: JSON_EXISTS
#line 2713 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14159 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 790: // col_name_keyword: JSON_OBJECT
#line 2714 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14165 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 791: // col_name_keyword: JSON_OBJECTAGG
#line 2715 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14171 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 792: // col_name_keyword: JSON_QUERY
#line 2716 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14177 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 793: // col_name_keyword: JSON_SCALAR
#line 2717 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14183 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 794: // col_name_keyword: JSON_SERIALIZE
#line 2718 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14189 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 795: // col_name_keyword: JSON_TABLE
#line 2719 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14195 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 796: // col_name_keyword: JSON_VALUE
#line 2720 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14201 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 797: // col_name_keyword: LEAST
#line 2721 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14207 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 798: // col_name_keyword: MERGE_ACTION
#line 2722 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14213 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 799: // col_name_keyword: NATIONAL
#line 2723 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14219 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 800: // col_name_keyword: NCHAR
#line 2724 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14225 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 801: // col_name_keyword: NONE
#line 2725 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14231 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 802: // col_name_keyword: NORMALIZE
#line 2726 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14237 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 803: // col_name_keyword: NULLIF
#line 2727 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14243 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 804: // col_name_keyword: NUMERIC
#line 2728 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14249 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 805: // col_name_keyword: OUT_P
#line 2729 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14255 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 806: // col_name_keyword: OVERLAY
#line 2730 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14261 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 807: // col_name_keyword: POSITION
#line 2731 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14267 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 808: // col_name_keyword: PRECISION
#line 2732 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14273 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 809: // col_name_keyword: REAL
#line 2733 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14279 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 810: // col_name_keyword: ROW
#line 2734 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14285 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 811: // col_name_keyword: SETOF
#line 2735 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14291 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 812: // col_name_keyword: SMALLINT
#line 2736 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14297 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 813: // col_name_keyword: SUBSTRING
#line 2737 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14303 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 814: // col_name_keyword: TIME
#line 2738 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14309 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 815: // col_name_keyword: TIMESTAMP
#line 2739 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14315 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 816: // col_name_keyword: TREAT
#line 2740 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14321 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 817: // col_name_keyword: TRIM
#line 2741 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14327 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 818: // col_name_keyword: VALUES
#line 2742 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14333 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 819: // col_name_keyword: VARCHAR
#line 2743 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14339 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 820: // col_name_keyword: XMLATTRIBUTES
#line 2744 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14345 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 821: // col_name_keyword: XMLCONCAT
#line 2745 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14351 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 822: // col_name_keyword: XMLELEMENT
#line 2746 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14357 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 823: // col_name_keyword: XMLEXISTS
#line 2747 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14363 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 824: // col_name_keyword: XMLFOREST
#line 2748 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14369 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 825: // col_name_keyword: XMLNAMESPACES
#line 2749 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14375 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 826: // col_name_keyword: XMLPARSE
#line 2750 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14381 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 827: // col_name_keyword: XMLPI
#line 2751 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14387 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 828: // col_name_keyword: XMLROOT
#line 2752 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14393 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 829: // col_name_keyword: XMLSERIALIZE
#line 2753 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14399 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 830: // col_name_keyword: XMLTABLE
#line 2754 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                          { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14405 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 831: // qualified_name: ColId
#line 2792 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
          { yylhs.value.as < std::string > ()=yystack_[0].value.as < std::string > ();}
#line 14411 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 832: // qualified_name: ColId indirection
#line 2793 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
      { yylhs.value.as < std::string > () = yystack_[1].value.as < std::string > (); }
#line 14417 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 833: // opt_name_list: "(" name_list ")"
#line 2797 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::vector<std::string> > () = yystack_[1].value.as < std::vector<std::string> > ();
    }
#line 14425 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 834: // opt_name_list: %empty
#line 2801 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::vector<std::string> > () = std::vector<std::string>{};
    }
#line 14433 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 835: // name_list: name
#line 2807 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
         { auto t = mkList<std::string>(); t.emplace_back(yystack_[0].value.as < std::string > ()); yylhs.value.as < std::vector<std::string> > ()=t;}
#line 14439 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 836: // name_list: name_list "," name
#line 2808 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                                 {yystack_[2].value.as < std::vector<std::string> > ().emplace_back(yystack_[0].value.as < std::string > ()); yylhs.value.as < std::vector<std::string> > ()=yystack_[2].value.as < std::vector<std::string> > ();}
#line 14445 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 837: // name: ColId
#line 2810 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
            {yylhs.value.as < std::string > ()=yystack_[0].value.as < std::string > ();}
#line 14451 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 838: // attr_name: ColLabel
#line 2811 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                    {yylhs.value.as < std::string > ()=yystack_[0].value.as < std::string > ();}
#line 14457 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 839: // func_name: type_function_name
#line 2822 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    { yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > (); }
#line 14463 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 840: // func_name: ColId indirection
#line 2823 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
      { yylhs.value.as < std::string > () = yystack_[1].value.as < std::string > (); }
#line 14469 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 842: // CreateStmt: CREATE OptTemp TABLE qualified_name "(" OptTableElementList ")"
#line 2841 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {   
        auto createTableInfo = std::make_shared<lingodb::ast::CreateTableInfo>("", "", yystack_[5].value.as < bool > ());
        createTableInfo->tableName = yystack_[3].value.as < std::string > ();
        createTableInfo->tableElements = yystack_[1].value.as < std::vector<std::shared_ptr<lingodb::ast::TableElement>> > ();



        auto createTable = mkNode<lingodb::ast::CreateNode>(yylhs.location, createTableInfo);

        yylhs.value.as < std::shared_ptr<lingodb::ast::CreateNode> > () = createTable;
    }
#line 14485 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 843: // OptTemp: TEMP
#line 2857 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
         {yylhs.value.as < bool > ()=true;}
#line 14491 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 844: // OptTemp: TEMPORARY
#line 2858 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                {yylhs.value.as < bool > ()=true;}
#line 14497 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 845: // OptTemp: %empty
#line 2859 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
             {yylhs.value.as < bool > ()=false;}
#line 14503 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 846: // OptTableElementList: TableElementList
#line 2864 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::TableElement>> > () = yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::TableElement>> > ();
    }
#line 14511 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 847: // OptTableElementList: %empty
#line 2868 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::TableElement>> > () = std::vector<std::shared_ptr<lingodb::ast::TableElement>>();
    }
#line 14519 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 848: // TableElementList: TableElement
#line 2875 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkListShared<lingodb::ast::TableElement>();
        list.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableElement> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::TableElement>> > () = list;
    }
#line 14529 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 849: // TableElementList: TableElementList "," TableElement
#line 2881 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::TableElement>> > ().emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableElement> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::TableElement>> > () = yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::TableElement>> > ();
    }
#line 14538 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 850: // TableElement: columnElement
#line 2889 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                  {yylhs.value.as < std::shared_ptr<lingodb::ast::TableElement> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableElement> > ();}
#line 14544 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 851: // TableElement: TableConstraint
#line 2890 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                      {yylhs.value.as < std::shared_ptr<lingodb::ast::TableElement> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableElement> > ();}
#line 14550 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 852: // TableConstraint: ConstraintElem
#line 2896 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::TableElement> > () = mkNode<lingodb::ast::TableConstraintElement>(yylhs.location, yystack_[0].value.as < std::shared_ptr<lingodb::ast::Constraint> > ());
    }
#line 14558 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 853: // columnElement: ColId Type opt_column_storage opt_column_compression create_generic_options ColQualList
#line 2903 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto columnDef = mkNode<lingodb::ast::ColumnElement>(yylhs.location, yystack_[5].value.as < std::string > (), yystack_[4].value.as < lingodb::ast::LogicalTypeWithMods > ());
        columnDef->constraints = yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::Constraint>> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::TableElement> > () = columnDef;
    }
#line 14568 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 855: // ColQualList: ColQualList ColConstraint
#line 2916 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[1].value.as < std::vector<std::shared_ptr<lingodb::ast::Constraint>> > ().emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::Constraint> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::Constraint>> > () = yystack_[1].value.as < std::vector<std::shared_ptr<lingodb::ast::Constraint>> > ();
    }
#line 14577 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 856: // ColQualList: %empty
#line 2920 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
             {yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::Constraint>> > () = std::vector<std::shared_ptr<lingodb::ast::Constraint>>();}
#line 14583 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 857: // ColConstraint: ColConstraintElem
#line 2924 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                       {yylhs.value.as < std::shared_ptr<lingodb::ast::Constraint> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::Constraint> > ();}
#line 14589 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 858: // ColConstraintElem: NOT NULL_P
#line 2947 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::Constraint> > () = mkNode<lingodb::ast::Constraint>(yylhs.location, lingodb::ast::ConstraintType::NOT_NULL);
    }
#line 14597 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 859: // ColConstraintElem: NULL_P
#line 2951 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::Constraint> > () = mkNode<lingodb::ast::Constraint>(yylhs.location, lingodb::ast::ConstraintType::NULLABLE);
    }
#line 14605 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 860: // ColConstraintElem: PRIMARY KEY
#line 2955 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::Constraint> > () = mkNode<lingodb::ast::UniqueConstraint>(yylhs.location, std::vector<std::string>(), true);
    }
#line 14613 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 861: // ConstraintElem: PRIMARY KEY "(" name_list opt_without_overlaps ")"
#line 2962 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::Constraint> > () = mkNode<lingodb::ast::UniqueConstraint>(yylhs.location, yystack_[2].value.as < std::vector<std::string> > (), true);
    }
#line 14621 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 862: // opt_without_overlaps: WITHOUT OVERLAPS
#line 2969 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        //TODO
        error(yylhs.location, "WITHOUT OVERLAPS is not supported yet!");
    }
#line 14630 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 866: // Type: SimpleType
#line 2995 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();
    }
#line 14638 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 867: // SimpleType: Numeric_with_opt_lenghth
#line 3001 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                             {yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();}
#line 14644 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 868: // SimpleType: Character
#line 3004 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();
    }
#line 14652 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 869: // SimpleType: ConstDatetime
#line 3008 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();
    }
#line 14660 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 870: // SimpleType: ConstInterval
#line 3012 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();
    }
#line 14668 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 871: // opt_type_modifiers: "(" type_modifiers ")"
#line 3019 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::Value>> > () = yystack_[1].value.as < std::vector<std::shared_ptr<lingodb::ast::Value>> > ();
    }
#line 14676 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 872: // opt_type_modifiers: %empty
#line 3023 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::Value>> > () = std::vector<std::shared_ptr<lingodb::ast::Value>>();
    }
#line 14684 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 873: // type_modifiers: type_modifier
#line 3030 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkListShared<lingodb::ast::Value>();
        list.emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::Value> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::Value>> > () = list;
    }
#line 14694 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 874: // type_modifiers: type_modifiers "," type_modifier
#line 3036 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::Value>> > ().emplace_back(yystack_[0].value.as < std::shared_ptr<lingodb::ast::Value> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::Value>> > () = yystack_[2].value.as < std::vector<std::shared_ptr<lingodb::ast::Value>> > ();
    }
#line 14703 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 875: // type_modifier: ICONST
#line 3043 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto value = std::make_shared<lingodb::ast::UnsignedIntValue>(yystack_[0].value.as < int > ());

        yylhs.value.as < std::shared_ptr<lingodb::ast::Value> > () = value;
    }
#line 14713 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 876: // ConstTypename: Numeric
#line 3062 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
            {yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();}
#line 14719 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 877: // ConstTypename: ConstCharacter
#line 3063 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                     {yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();}
#line 14725 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 878: // ConstTypename: ConstDatetime
#line 3064 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                    {yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();}
#line 14731 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 879: // NumericOnly: Fconst
#line 3068 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
           {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 14737 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 880: // NumericOnly: SignedIconst
#line 3069 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                   {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 14743 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 881: // Numeric_with_opt_lenghth: Numeric
#line 3073 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();
    }
#line 14751 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 882: // Numeric_with_opt_lenghth: Numeric "(" type_modifier ")"
#line 3077 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[3].value.as < lingodb::ast::LogicalTypeWithMods > ().typeModifiers.emplace_back(yystack_[1].value.as < std::shared_ptr<lingodb::ast::Value> > ());
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = yystack_[3].value.as < lingodb::ast::LogicalTypeWithMods > ();
    }
#line 14760 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 883: // Numeric: INT_P
#line 3085 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::INT);
    }
#line 14768 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 884: // Numeric: INTEGER
#line 3089 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::INT);
    }
#line 14776 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 885: // Numeric: SMALLINT
#line 3093 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::INT);
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > ().typeModifiers.emplace_back(std::make_shared<lingodb::ast::UnsignedIntValue>(2));
    }
#line 14785 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 886: // Numeric: BIGINT
#line 3098 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::INT);
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > ().typeModifiers.emplace_back(std::make_shared<lingodb::ast::UnsignedIntValue>(8));
    }
#line 14794 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 888: // Numeric: FLOAT_P
#line 3104 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto type = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::FLOAT);
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = type;
    }
#line 14803 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 889: // Numeric: DOUBLE_P
#line 3109 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto type = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::FLOAT);
        auto value = std::make_shared<lingodb::ast::UnsignedIntValue>(4);
        type.typeModifiers.emplace_back(value);
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = type;
    }
#line 14814 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 890: // Numeric: DECIMAL_P opt_type_modifiers
#line 3116 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        lingodb::ast::LogicalTypeWithMods type{catalog::LogicalTypeId::DECIMAL};
        type.typeModifiers = yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::Value>> > ();
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = type;
        
    }
#line 14825 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 892: // Numeric: NUMERIC opt_type_modifiers
#line 3124 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        lingodb::ast::LogicalTypeWithMods type{catalog::LogicalTypeId::DECIMAL};
        type.typeModifiers = yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::Value>> > ();
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = type;
    }
#line 14835 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 893: // Numeric: BOOLEAN_P
#line 3130 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::BOOLEAN);
    }
#line 14843 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 894: // Character: CharacterWithLength
#line 3137 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () =yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();
    }
#line 14851 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 895: // Character: CharacterWithoutLength
#line 3141 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () =yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();
    }
#line 14859 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 896: // ConstCharacter: CharacterWithLength
#line 3147 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        /* Length was not specified so allow to be unrestricted.
        * This handles problems with fixed-length (bpchar) strings
        * which in column definitions must default to a length
        * of one, but should not be constrained if the length
        * was not specified.
        */
        yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ().typeModifiers.clear();
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () =yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();
    }
#line 14874 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 897: // ConstCharacter: CharacterWithoutLength
#line 3158 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () =yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();
    }
#line 14882 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 898: // CharacterWithLength: character "(" type_modifier ")"
#line 3164 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        //Change Iconst rule to unsigned long and use it here
        yystack_[3].value.as < lingodb::ast::LogicalTypeWithMods > ().typeModifiers.emplace_back(yystack_[1].value.as < std::shared_ptr<lingodb::ast::Value> > ());
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = yystack_[3].value.as < lingodb::ast::LogicalTypeWithMods > ();
    }
#line 14892 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 899: // CharacterWithoutLength: character
#line 3172 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();
    }
#line 14900 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 900: // character: CHARACTER opt_varying
#line 3179 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        if(yystack_[0].value.as < bool > ()) {
            yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::STRING);
        } else {
            yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::CHAR);
        }
    }
#line 14912 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 901: // character: VARCHAR
#line 3187 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::STRING);
    }
#line 14920 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 902: // character: CHAR_P
#line 3191 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::CHAR);
    }
#line 14928 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 903: // character: TEXT_P
#line 3195 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::STRING);
    }
#line 14936 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 904: // character: STRING_P
#line 3199 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::STRING);
    }
#line 14944 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 905: // opt_varying: VARYING
#line 3205 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < bool > () = true;
    }
#line 14952 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 906: // opt_varying: %empty
#line 3209 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < bool > () = false;
    }
#line 14960 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 907: // ConstDatetime: TIMESTAMP
#line 3216 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::TIMESTAMP);
    }
#line 14968 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 908: // ConstDatetime: DATE_P
#line 3221 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::DATE);
    }
#line 14976 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 909: // InsertStmt: INSERT INTO insert_target insert_rest
#line 3237 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[0].value.as < std::shared_ptr<lingodb::ast::InsertNode> > ()->tableName = yystack_[1].value.as < std::string > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::InsertNode> > () = yystack_[0].value.as < std::shared_ptr<lingodb::ast::InsertNode> > ();
    
    }
#line 14986 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 910: // insert_target: qualified_name
#line 3253 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > ();
    }
#line 14994 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 911: // insert_rest: SelectStmt
#line 3263 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::InsertNode> > () = mkNode<lingodb::ast::InsertNode>(yylhs.location, "", "", yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ());
    }
#line 15002 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 912: // insert_rest: "(" insert_column_list ")" SelectStmt
#line 3267 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto insertNode = mkNode<lingodb::ast::InsertNode>(yylhs.location, "", "", yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ());
        insertNode->columns = yystack_[2].value.as < std::vector<std::string> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::InsertNode> > () = insertNode;
    }
#line 15012 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 913: // insert_column_list: insert_column_item
#line 3277 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkList<std::string>();
        list.emplace_back(yystack_[0].value.as < std::string > ());
        yylhs.value.as < std::vector<std::string> > () = list;
    }
#line 15022 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 914: // insert_column_list: insert_column_list "," insert_column_item
#line 3283 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[2].value.as < std::vector<std::string> > ().emplace_back(yystack_[0].value.as < std::string > ());
        yylhs.value.as < std::vector<std::string> > () = yystack_[2].value.as < std::vector<std::string> > ();
    }
#line 15031 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 915: // insert_column_item: ColId
#line 3291 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::string > () = yystack_[0].value.as < std::string > ();
    }
#line 15039 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 916: // AexprConst: SignedIconst
#line 3302 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 15045 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 917: // AexprConst: Fconst
#line 3303 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
             { yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 15051 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 918: // AexprConst: Sconst
#line 3304 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
             {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 15057 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 919: // AexprConst: Bconst
#line 3305 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
             {yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();}
#line 15063 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 920: // AexprConst: func_name Sconst
#line 3306 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                       {
        //TODO move logic to analyzer?
        if(yystack_[1].value.as < std::string > () == "date") {
            auto dateExpr = mkNode<lingodb::ast::CastExpression>(yylhs.location, catalog::LogicalTypeId::DATE, yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
            
            yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = dateExpr;
        } else {
            error(yylhs.location, "Unknown function for constant: " + yystack_[1].value.as < std::string > ());
        }
    }
#line 15078 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 921: // AexprConst: ConstInterval Sconst opt_interval
#line 3317 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto intervalWithTypeMods = yystack_[2].value.as < lingodb::ast::LogicalTypeWithMods > ();
        if(yystack_[0].value.as < std::optional<std::string> > ().has_value()) {
            auto v = std::make_shared<lingodb::ast::StringValue>(yystack_[0].value.as < std::optional<std::string> > ().value());
            intervalWithTypeMods.typeModifiers.emplace_back(v);
        }
        auto interval = mkNode<lingodb::ast::CastExpression>(yylhs.location, intervalWithTypeMods, yystack_[1].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = interval;
    }
#line 15092 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 922: // AexprConst: ConstTypename Sconst
#line 3327 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto dateExpr = mkNode<lingodb::ast::CastExpression>(yylhs.location, yystack_[1].value.as < lingodb::ast::LogicalTypeWithMods > (), yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > () = dateExpr;
    }
#line 15101 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 923: // AexprConst: NULL_P
#line 3331 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
             {
        auto t = mkNode<lingodb::ast::ConstantExpression>(yylhs.location); t->value=std::make_shared<lingodb::ast::NullValue>(); yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=t; 

    }
#line 15110 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 924: // Iconst: ICONST
#line 3339 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                { auto t = mkNode<lingodb::ast::ConstantExpression>(yylhs.location); t->value=std::make_shared<lingodb::ast::IntValue>(yystack_[0].value.as < int > ()); yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=t;  }
#line 15116 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 925: // SignedIconst: "+" Iconst
#line 3343 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
    
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
    }
#line 15125 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 926: // SignedIconst: "-" Iconst
#line 3348 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        std::static_pointer_cast<lingodb::ast::IntValue>(std::static_pointer_cast<lingodb::ast::ConstantExpression>(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ())->value)->iVal = -std::static_pointer_cast<lingodb::ast::IntValue>(std::static_pointer_cast<lingodb::ast::ConstantExpression>(yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ())->value)->iVal;
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
       
    }
#line 15135 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 927: // SignedIconst: Iconst
#line 3354 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ();
    }
#line 15143 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 928: // Fconst: FCONST
#line 3359 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
            {auto t = mkNode<lingodb::ast::ConstantExpression>(yylhs.location); t->value=std::make_shared<lingodb::ast::FloatValue>(yystack_[0].value.as < std::string > ()); yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=t; }
#line 15149 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 930: // Fconst: "-" FCONST
#line 3361 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                   {error(yylhs.location, "Negative float constants are not supported yet!");}
#line 15155 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 931: // Sconst: STRING_VALUE
#line 3363 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
                 { auto t = mkNode<lingodb::ast::ConstantExpression>(yylhs.location); t->value=std::make_shared<lingodb::ast::StringValue>(yystack_[0].value.as < std::string > ()); yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=t; }
#line 15161 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 932: // Bconst: TRUE_P
#line 3367 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto t = mkNode<lingodb::ast::ConstantExpression>(yylhs.location);
        t->value=std::make_shared<lingodb::ast::BoolValue>(true);
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=t;
     }
#line 15171 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 933: // Bconst: FALSE_P
#line 3373 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto t = mkNode<lingodb::ast::ConstantExpression>(yylhs.location);
        t->value=std::make_shared<lingodb::ast::BoolValue>(false);
        yylhs.value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()=t;
    }
#line 15181 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 935: // ConstInterval: INTERVAL
#line 3381 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto t = lingodb::ast::LogicalTypeWithMods(catalog::LogicalTypeId::INTERVAL);
        yylhs.value.as < lingodb::ast::LogicalTypeWithMods > () = t;
    }
#line 15190 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 936: // opt_interval: DAY_P
#line 3389 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
     {
        yylhs.value.as < std::optional<std::string> > () = "days";
     }
#line 15198 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 937: // opt_interval: YEAR_P
#line 3393 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
     {
        yylhs.value.as < std::optional<std::string> > () = "years";
     }
#line 15206 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 938: // opt_interval: MONTH_P
#line 3397 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
     {
        yylhs.value.as < std::optional<std::string> > () = "months";
     }
#line 15214 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 940: // Typename: SimpleType
#line 3404 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
               {yylhs.value.as < lingodb::ast::LogicalTypeWithMods > ()=yystack_[0].value.as < lingodb::ast::LogicalTypeWithMods > ();}
#line 15220 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 941: // pipe_operator: where_clause
#line 3413 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::PipeOperator> > () = mkNode<lingodb::ast::PipeOperator>(yylhs.location, lingodb::ast::PipeOperatorType::WHERE, yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ());
        
    }
#line 15229 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 942: // pipe_operator: SELECT opt_target_list
#line 3418 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
       yylhs.value.as < std::shared_ptr<lingodb::ast::PipeOperator> > () = mkNode<lingodb::ast::PipeOperator>(yylhs.location, lingodb::ast::PipeOperatorType::SELECT, yystack_[0].value.as < std::shared_ptr<lingodb::ast::TargetList> > ());
    }
#line 15237 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 943: // pipe_operator: sort_clause
#line 3422 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::PipeOperator> > () = mkNode<lingodb::ast::PipeOperator>(yylhs.location, lingodb::ast::PipeOperatorType::RESULT_MODIFIER, yystack_[0].value.as < std::shared_ptr<lingodb::ast::OrderByModifier> > ());
    }
#line 15245 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 944: // pipe_operator: limit_clause
#line 3426 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yylhs.value.as < std::shared_ptr<lingodb::ast::PipeOperator> > () = mkNode<lingodb::ast::PipeOperator>(yylhs.location, lingodb::ast::PipeOperatorType::RESULT_MODIFIER, yystack_[0].value.as < std::shared_ptr<lingodb::ast::LimitModifier> > ());   
    }
#line 15253 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 945: // pipe_operator: join_type JOIN table_ref join_qual
#line 3430 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto joinType = yystack_[3].value.as < lingodb::ast::JoinType > ();
        auto joinRef = mkNode<lingodb::ast::JoinRef>(yylhs.location, joinType, lingodb::ast::JoinCondType::REGULAR );
        joinRef->right = yystack_[1].value.as < std::shared_ptr<lingodb::ast::TableRef> > ();
        joinRef->condition = yystack_[0].value.as < lingodb::ast::jointCondOrUsingCols > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::PipeOperator> > () = mkNode<lingodb::ast::PipeOperator>(yylhs.location, lingodb::ast::PipeOperatorType::JOIN, joinRef);
    }
#line 15265 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 946: // pipe_operator: JOIN table_ref join_qual
#line 3438 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto joinRef = mkNode<lingodb::ast::JoinRef>(yylhs.location, lingodb::ast::JoinType::INNER, lingodb::ast::JoinCondType::REGULAR );
        joinRef->right = yystack_[1].value.as < std::shared_ptr<lingodb::ast::TableRef> > ();
        joinRef->condition = yystack_[0].value.as < lingodb::ast::jointCondOrUsingCols > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::PipeOperator> > () = mkNode<lingodb::ast::PipeOperator>(yylhs.location,lingodb::ast::PipeOperatorType::JOIN, joinRef);
    }
#line 15276 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 947: // pipe_operator: AGGREGATE agg_expr
#line 3445 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
         yylhs.value.as < std::shared_ptr<lingodb::ast::PipeOperator> > () = mkNode<lingodb::ast::PipeOperator>(yylhs.location, lingodb::ast::PipeOperatorType::AGGREGATE, yystack_[0].value.as < std::shared_ptr<lingodb::ast::AggregationNode> > ());
    }
#line 15284 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 948: // pipe_operator: EXTEND expr_list_with_alias
#line 3449 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto extendNode = mkNode<lingodb::ast::ExtendNode>(yylhs.location, false);
        extendNode->extensions = yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::PipeOperator> > () = mkNode<lingodb::ast::PipeOperator>(yylhs.location, lingodb::ast::PipeOperatorType::EXTEND, extendNode);
    }
#line 15294 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 949: // pipe_operator: UNION set_quantifier pipe_or_select_clause
#line 3455 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto setOpNode = mkNode<lingodb::ast::SetOperationNode>(yylhs.location, lingodb::ast::SetOperationType::UNION, nullptr, yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ());
        setOpNode->setOpAll = yystack_[1].value.as < bool > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::PipeOperator> > () = mkNode<lingodb::ast::PipeOperator>(yylhs.location, lingodb::ast::PipeOperatorType::SET_OPERATION, setOpNode);
    }
#line 15304 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 950: // pipe_operator: INTERSECT set_quantifier pipe_or_select_clause
#line 3461 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto setOpNode = mkNode<lingodb::ast::SetOperationNode>(yylhs.location, lingodb::ast::SetOperationType::INTERSECT, nullptr, yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ());
        setOpNode->setOpAll = yystack_[1].value.as < bool > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::PipeOperator> > () = mkNode<lingodb::ast::PipeOperator>(yylhs.location, lingodb::ast::PipeOperatorType::SET_OPERATION, setOpNode);
    }
#line 15314 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 951: // pipe_operator: EXCEPT set_quantifier pipe_or_select_clause
#line 3467 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto setOpNode = mkNode<lingodb::ast::SetOperationNode>(yylhs.location, lingodb::ast::SetOperationType::EXCEPT, nullptr, yystack_[0].value.as < std::shared_ptr<lingodb::ast::TableProducer> > ());
        setOpNode->setOpAll = yystack_[1].value.as < bool > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::PipeOperator> > () = mkNode<lingodb::ast::PipeOperator>(yylhs.location, lingodb::ast::PipeOperatorType::SET_OPERATION, setOpNode);
    }
#line 15324 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 952: // pipe_operator: DROP columnref_list
#line 3473 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto node = mkNode<lingodb::ast::TargetList>(yylhs.location);
        node->targets = std::move(yystack_[0].value.as < std::vector<std::shared_ptr<lingodb::ast::ParsedExpression>> > ());
        yylhs.value.as < std::shared_ptr<lingodb::ast::PipeOperator> > () = mkNode<lingodb::ast::PipeOperator>(yylhs.location, lingodb::ast::PipeOperatorType::DROP, node);
    }
#line 15334 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 953: // pipe_operator: SET set_list
#line 3479 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {

        yylhs.value.as < std::shared_ptr<lingodb::ast::PipeOperator> > () = mkNode<lingodb::ast::PipeOperator>(yylhs.location, lingodb::ast::PipeOperatorType::SET, yystack_[0].value.as < std::shared_ptr<lingodb::ast::SetColumnExpression> > ());
    }
#line 15343 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 954: // agg_expr: func_expr_list group_clause_with_alias
#line 3490 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto aggNode = mkNode<lingodb::ast::AggregationNode>(yylhs.location);
        aggNode->groupByNode = yystack_[0].value.as < std::shared_ptr<lingodb::ast::GroupByNode> > ();
        aggNode->aggregations = yystack_[1].value.as < std::vector<std::shared_ptr<lingodb::ast::FunctionExpression>> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::AggregationNode> > () = aggNode;
      
        
    }
#line 15356 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 955: // agg_expr: group_clause
#line 3499 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto aggNode = mkNode<lingodb::ast::AggregationNode>(yylhs.location);
        aggNode->groupByNode = yystack_[0].value.as < std::shared_ptr<lingodb::ast::GroupByNode> > ();
        yylhs.value.as < std::shared_ptr<lingodb::ast::AggregationNode> > () = aggNode;
      
        
    }
#line 15368 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 956: // func_expr_list: func_expr opt_alias_clause
#line 3510 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto list = mkListShared<lingodb::ast::FunctionExpression>();
        yystack_[1].value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > ()->alias=yystack_[0].value.as < std::pair<std::string, std::vector<std::string>> > ().first;
        list.emplace_back(yystack_[1].value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > ());
        
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::FunctionExpression>> > () = list;
    }
#line 15380 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 957: // func_expr_list: func_expr_list "," func_expr opt_alias_clause
#line 3518 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        yystack_[3].value.as < std::vector<std::shared_ptr<lingodb::ast::FunctionExpression>> > ().emplace_back(yystack_[1].value.as < std::shared_ptr<lingodb::ast::FunctionExpression> > ());
        yylhs.value.as < std::vector<std::shared_ptr<lingodb::ast::FunctionExpression>> > () = yystack_[3].value.as < std::vector<std::shared_ptr<lingodb::ast::FunctionExpression>> > ();
    }
#line 15389 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 958: // set_list: ColId "=" a_expr
#line 3526 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto columnRef = mkNode<lingodb::ast::ColumnRefExpression>(yylhs.location, yystack_[2].value.as < std::string > ());
        auto setNode = mkNode<lingodb::ast::SetColumnExpression>(yylhs.location, std::vector<std::pair<std::shared_ptr<lingodb::ast::ColumnRefExpression>, std::shared_ptr<lingodb::ast::ParsedExpression>>>{std::pair(columnRef, yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ())});
        yylhs.value.as < std::shared_ptr<lingodb::ast::SetColumnExpression> > () = setNode;
    }
#line 15399 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;

  case 959: // set_list: set_list "," ColId "=" a_expr
#line 3532 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
    {
        auto columnRef = mkNode<lingodb::ast::ColumnRefExpression>(yylhs.location, yystack_[2].value.as < std::string > ());
        yystack_[4].value.as < std::shared_ptr<lingodb::ast::SetColumnExpression> > ()->sets.emplace_back(std::pair(columnRef, yystack_[0].value.as < std::shared_ptr<lingodb::ast::ParsedExpression> > ()));
        yylhs.value.as < std::shared_ptr<lingodb::ast::SetColumnExpression> > () = yystack_[4].value.as < std::shared_ptr<lingodb::ast::SetColumnExpression> > ();
    }
#line 15409 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"
    break;


#line 15413 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"

            default:
              break;
            }
        }
#if YY_EXCEPTIONS
      catch (const syntax_error& yyexc)
        {
          YYCDEBUG << "Caught exception: " << yyexc.what() << '\n';
          error (yyexc);
          YYERROR;
        }
#endif // YY_EXCEPTIONS
      YY_SYMBOL_PRINT ("-> $$ =", yylhs);
      yypop_ (yylen);
      yylen = 0;

      // Shift the result of the reduction.
      yypush_ (YY_NULLPTR, YY_MOVE (yylhs));
    }
    goto yynewstate;


  /*--------------------------------------.
  | yyerrlab -- here on detecting error.  |
  `--------------------------------------*/
  yyerrlab:
    // If not already recovering from an error, report this error.
    if (!yyerrstatus_)
      {
        ++yynerrs_;
        context yyctx (*this, yyla);
        std::string msg = yysyntax_error_ (yyctx);
        error (yyla.location, YY_MOVE (msg));
      }


    yyerror_range[1].location = yyla.location;
    if (yyerrstatus_ == 3)
      {
        /* If just tried and failed to reuse lookahead token after an
           error, discard it.  */

        // Return failure if at end of input.
        if (yyla.kind () == symbol_kind::S_YYEOF)
          YYABORT;
        else if (!yyla.empty ())
          {
            yy_destroy_ ("Error: discarding", yyla);
            yyla.clear ();
          }
      }

    // Else will try to reuse lookahead token after shifting the error token.
    goto yyerrlab1;


  /*---------------------------------------------------.
  | yyerrorlab -- error raised explicitly by YYERROR.  |
  `---------------------------------------------------*/
  yyerrorlab:
    /* Pacify compilers when the user code never invokes YYERROR and
       the label yyerrorlab therefore never appears in user code.  */
    if (false)
      YYERROR;

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYERROR.  */
    yypop_ (yylen);
    yylen = 0;
    YY_STACK_PRINT ();
    goto yyerrlab1;


  /*-------------------------------------------------------------.
  | yyerrlab1 -- common code for both syntax error and YYERROR.  |
  `-------------------------------------------------------------*/
  yyerrlab1:
    yyerrstatus_ = 3;   // Each real token shifted decrements this.
    // Pop stack until we find a state that shifts the error token.
    for (;;)
      {
        yyn = yypact_[+yystack_[0].state];
        if (!yy_pact_value_is_default_ (yyn))
          {
            yyn += symbol_kind::S_YYerror;
            if (0 <= yyn && yyn <= yylast_
                && yycheck_[yyn] == symbol_kind::S_YYerror)
              {
                yyn = yytable_[yyn];
                if (0 < yyn)
                  break;
              }
          }

        // Pop the current state because it cannot handle the error token.
        if (yystack_.size () == 1)
          YYABORT;

        yyerror_range[1].location = yystack_[0].location;
        yy_destroy_ ("Error: popping", yystack_[0]);
        yypop_ ();
        YY_STACK_PRINT ();
      }
    {
      stack_symbol_type error_token;

      yyerror_range[2].location = yyla.location;
      YYLLOC_DEFAULT (error_token.location, yyerror_range, 2);

      // Shift the error token.
      yy_lac_discard_ ("error recovery");
      error_token.state = state_type (yyn);
      yypush_ ("Shifting", YY_MOVE (error_token));
    }
    goto yynewstate;


  /*-------------------------------------.
  | yyacceptlab -- YYACCEPT comes here.  |
  `-------------------------------------*/
  yyacceptlab:
    yyresult = 0;
    goto yyreturn;


  /*-----------------------------------.
  | yyabortlab -- YYABORT comes here.  |
  `-----------------------------------*/
  yyabortlab:
    yyresult = 1;
    goto yyreturn;


  /*-----------------------------------------------------.
  | yyreturn -- parsing is finished, return the result.  |
  `-----------------------------------------------------*/
  yyreturn:
    if (!yyla.empty ())
      yy_destroy_ ("Cleanup: discarding lookahead", yyla);

    /* Do not reclaim the symbols of the rule whose action triggered
       this YYABORT or YYACCEPT.  */
    yypop_ (yylen);
    YY_STACK_PRINT ();
    while (1 < yystack_.size ())
      {
        yy_destroy_ ("Cleanup: popping", yystack_[0]);
        yypop_ ();
      }

    return yyresult;
  }
#if YY_EXCEPTIONS
    catch (...)
      {
        YYCDEBUG << "Exception caught: cleaning lookahead and stack\n";
        // Do not try to display the values of the reclaimed symbols,
        // as their printers might throw an exception.
        if (!yyla.empty ())
          yy_destroy_ (YY_NULLPTR, yyla);

        while (1 < yystack_.size ())
          {
            yy_destroy_ (YY_NULLPTR, yystack_[0]);
            yypop_ ();
          }
        throw;
      }
#endif // YY_EXCEPTIONS
  }

  void
  parser::error (const syntax_error& yyexc)
  {
    error (yyexc.location, yyexc.what ());
  }

  const char *
  parser::symbol_name (symbol_kind_type yysymbol)
  {
    static const char *const yy_sname[] =
    {
    "end of file", "error", "invalid token", "ICONST", "integer_value",
  "FCONST", "IDENT", "identifier", "STRING_VALUE", "bit_string",
  "hex_string", "nat_string", "(", ")", "[", "]", ".", "%", ",", ";", "+",
  "/", "*", "-", "=", "<>", "<=", "<", ">=", ">", "^", "'", "|>", "UIDENT",
  "SCONST", "USCONST", "BCONST", "XCONST", "Op", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "ABORT_P", "ABSENT", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC",
  "ASENSITIVE", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "ATOMIC", "AT",
  "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P",
  "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BREADTH",
  "BY", "CACHE", "CALL", "CALLED", "CASCADE", "CASCADED", "CASE", "CAST",
  "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK",
  "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE",
  "COLLATION", "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT",
  "COMMITTED", "COMPRESSION", "CONCURRENTLY", "CONDITIONAL",
  "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
  "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE",
  "CROSS", "CSV", "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE",
  "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP",
  "CURRENT_USER", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P",
  "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS",
  "DATE_P", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER",
  "DELIMITERS", "DEPENDS", "DEPTH", "DESC", "DETACH", "DICTIONARY",
  "DISABLE_P", "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P",
  "DOUBLE_P", "DROP", "EACH", "ELSE", "EMPTY_P", "ENABLE_P", "ENCODING",
  "ENCRYPTED", "END_P", "ENFORCED", "ENUM_P", "ERROR_P", "ESCAPE", "EVENT",
  "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS",
  "EXPLAIN", "EXPRESSION", "EXTENSION", "EXTERNAL", "EXTRACT", "FALSE_P",
  "FAMILY", "FETCH", "FILTER", "FINALIZE", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORMAT", "FORWARD", "FREEZE",
  "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOBAL", "GRANT",
  "GRANTED", "GREATEST", "GROUP_P", "GROUPING", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "IDENTITY_P", "IF_P", "ILIKE",
  "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE",
  "INCLUDING", "INCREMENT", "INDENT", "INDEX", "INDEXES", "INHERIT",
  "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P",
  "INSENSITIVE", "INSERT", "INSTEAD", "INT_P", "INTEGER", "INTERSECT",
  "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN",
  "JSON", "JSON_ARRAY", "JSON_ARRAYAGG", "JSON_EXISTS", "JSON_OBJECT",
  "JSON_OBJECTAGG", "JSON_QUERY", "JSON_SCALAR", "JSON_SERIALIZE",
  "JSON_TABLE", "JSON_VALUE", "KEEP", "KEY", "KEYS", "LABEL", "LANGUAGE",
  "LARGE_P", "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEAST",
  "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCALTIME",
  "LOCALTIMESTAMP", "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MAPPING",
  "MATCH", "MATCHED", "MATERIALIZED", "MAXVALUE", "MERGE", "MERGE_ACTION",
  "METHOD", "MINUTE_P", "MINVALUE", "MODE", "MONTH_P", "MOVE", "NAME_P",
  "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NESTED", "NEW", "NEXT", "NFC",
  "NFD", "NFKC", "NFKD", "NO", "NONE", "NORMALIZE", "NORMALIZED", "NOT",
  "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P",
  "NUMERIC", "OBJECT_P", "OBJECTS_P", "OF", "OFF", "OFFSET", "OIDS", "OLD",
  "OMIT", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER",
  "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P", "OVER", "OVERLAPS",
  "OVERLAY", "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARAMETER",
  "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PATH",
  "PERIOD", "PLACING", "PLAN", "PLANS", "POLICY", "POSITION", "PRECEDING",
  "PRECISION", "PRESERVE", "PREPARE", "PREPARED", "PRIMARY", "PRIOR",
  "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROCEDURES", "PROGRAM",
  "PUBLICATION", "QUOTES", "EXTEND", "RANGE", "READ", "REAL", "REASSIGN",
  "RECURSIVE", "REF_P", "REFERENCES", "REFERENCING", "REFRESH", "REINDEX",
  "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA",
  "RESET", "RESTART", "RESTRICT", "RETURN", "RETURNING", "RETURNS",
  "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROUTINE", "ROUTINES",
  "ROW", "ROWS", "RULE", "SAVEPOINT", "SCALAR", "SCHEMA", "SCHEMAS",
  "SCROLL", "SEARCH", "SECOND_P", "SECURITY", "SELECT", "SEQUENCE",
  "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SESSION_USER", "SET",
  "SETS", "SETOF", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SOURCE", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRING_P", "STRIP_P", "SUBSCRIPTION",
  "SUBSTRING", "SUPPORT", "SYMMETRIC", "SYSID", "SYSTEM_P", "SYSTEM_USER",
  "TABLE", "TABLES", "TABLESAMPLE", "TABLESPACE", "TARGET", "TEMP",
  "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIES", "TIME", "TIMESTAMP",
  "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM",
  "TRUE_P", "TRUNCATE", "TRUSTED", "TYPE_P", "TYPES_P", "UESCAPE",
  "UNBOUNDED", "UNCONDITIONAL", "UNCOMMITTED", "UNENCRYPTED", "UNION",
  "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER",
  "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW",
  "VIEWS", "VIRTUAL", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P",
  "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE",
  "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS",
  "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT",
  "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YES_P", "ZONE", "FORMAT_LA",
  "NOT_LA", "NULLS_LA", "WITH_LA", "WITHOUT_LA", "AND_PRIORITY",
  "OR_PRIORITY", "QUAL_OP", "UMINUS", "ROLLUP_PRIORITY", "$accept",
  "parse_toplevel", "stmtmulti", "toplevel_stmt", "stmt", "SelectStmt",
  "PipeSQLStmt", "classic_select_and_pipe_sql_with_parens",
  "select_with_parens", "pipe_sql_with_parens", "select_no_parens",
  "pipe_sql_no_parens", "pipe_start", "pipe_or_select_clause",
  "select_clause", "PreparableStmt", "CopyStmt", "copy_from",
  "copy_file_name", "copy_options", "copy_opt_list", "copy_opt_item",
  "copy_delimiter", "VariableSetStmt", "set_rest", "generic_set",
  "set_rest_more", "var_name", "var_list", "var_value",
  "opt_boolean_or_string", "NonReservedWord_or_Sconst", "NonReservedWord",
  "simple_select", "with_clause", "distinct_clause", "cte_list",
  "into_clause", "window_clause", "common_table_expr", "opt_materialized",
  "opt_from_clause", "from_clause", "from_list", "table_ref",
  "set_quantifier", "group_clause", "group_clause_with_alias",
  "group_by_list", "group_by_list_with_alias", "rollup_clause",
  "group_by_item", "group_by_item_with_alias", "empty_grouping_set",
  "having_clause", "joined_table", "alias_clause", "opt_nulls_order",
  "opt_alias_clause", "opt_asc_desc", "join_type", "join_qual",
  "relation_expr", "extended_relation_expr", "opt_asymmetric",
  "opt_all_clause", "opt_sort_clause", "sort_clause", "sortby_list",
  "sortby", "select_limit", "opt_select_limit", "limit_clause",
  "offset_clause", "select_limit_value", "select_offset_value",
  "values_clause", "where_clause", "a_expr", "and_a_expr", "or_a_expr",
  "b_expr", "c_expr", "basicComparisonType", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref_list", "columnref", "func_application", "func_expr",
  "window_func_expr", "func_arg_list_opt", "func_arg_list", "expr_list",
  "expr_list_with_alias", "func_arg_expr", "func_expr_common_subexpr",
  "cast_expr", "extract_list", "extract_arg", "substr_list", "over_clause",
  "window_specification", "indirection", "indirection_el",
  "opt_target_list", "target_list", "target_el",
  "opt_existing_window_name", "opt_partition_clause", "opt_frame_clause",
  "frame_extent", "frame_bound", "opt_window_exclusion_clause",
  "any_operator", "qual_Op", "qual_all_Op", "sub_type", "all_Op", "ColId",
  "type_function_name", "type_func_name_keyword", "ColLabel",
  "BareColLabel", "reserved_keyword", "unreserved_keyword",
  "col_name_keyword", "qualified_name", "opt_name_list", "name_list",
  "name", "attr_name", "func_name", "param_name", "CreateStmt", "OptTemp",
  "OptTableElementList", "TableElementList", "TableElement",
  "TableConstraint", "columnElement", "create_generic_options",
  "ColQualList", "ColConstraint", "ColConstraintElem", "ConstraintElem",
  "opt_without_overlaps", "opt_column_compression", "opt_column_storage",
  "Type", "SimpleType", "opt_type_modifiers", "type_modifiers",
  "type_modifier", "ConstTypename", "NumericOnly",
  "Numeric_with_opt_lenghth", "Numeric", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "InsertStmt", "insert_target",
  "insert_rest", "insert_column_list", "insert_column_item", "AexprConst",
  "Iconst", "SignedIconst", "Fconst", "Sconst", "Bconst", "ConstInterval",
  "opt_interval", "Typename", "pipe_operator", "agg_expr",
  "func_expr_list", "set_list", YY_NULLPTR
    };
    return yy_sname[yysymbol];
  }



  // parser::context.
  parser::context::context (const parser& yyparser, const symbol_type& yyla)
    : yyparser_ (yyparser)
    , yyla_ (yyla)
  {}

  int
  parser::context::expected_tokens (symbol_kind_type yyarg[], int yyargn) const
  {
    // Actual number of expected tokens
    int yycount = 0;

#if YYDEBUG
    // Execute LAC once. We don't care if it is successful, we
    // only do it for the sake of debugging output.
    if (!yyparser_.yy_lac_established_)
      yyparser_.yy_lac_check_ (yyla_.kind ());
#endif

    for (int yyx = 0; yyx < YYNTOKENS; ++yyx)
      {
        symbol_kind_type yysym = YY_CAST (symbol_kind_type, yyx);
        if (yysym != symbol_kind::S_YYerror
            && yysym != symbol_kind::S_YYUNDEF
            && yyparser_.yy_lac_check_ (yysym))
          {
            if (!yyarg)
              ++yycount;
            else if (yycount == yyargn)
              return 0;
            else
              yyarg[yycount++] = yysym;
          }
      }
    if (yyarg && yycount == 0 && 0 < yyargn)
      yyarg[0] = symbol_kind::S_YYEMPTY;
    return yycount;
  }




  bool
  parser::yy_lac_check_ (symbol_kind_type yytoken) const
  {
    // Logically, the yylac_stack's lifetime is confined to this function.
    // Clear it, to get rid of potential left-overs from previous call.
    yylac_stack_.clear ();
    // Reduce until we encounter a shift and thereby accept the token.
#if YYDEBUG
    YYCDEBUG << "LAC: checking lookahead " << symbol_name (yytoken) << ':';
#endif
    std::ptrdiff_t lac_top = 0;
    while (true)
      {
        state_type top_state = (yylac_stack_.empty ()
                                ? yystack_[lac_top].state
                                : yylac_stack_.back ());
        int yyrule = yypact_[+top_state];
        if (yy_pact_value_is_default_ (yyrule)
            || (yyrule += yytoken) < 0 || yylast_ < yyrule
            || yycheck_[yyrule] != yytoken)
          {
            // Use the default action.
            yyrule = yydefact_[+top_state];
            if (yyrule == 0)
              {
                YYCDEBUG << " Err\n";
                return false;
              }
          }
        else
          {
            // Use the action from yytable.
            yyrule = yytable_[yyrule];
            if (yy_table_value_is_error_ (yyrule))
              {
                YYCDEBUG << " Err\n";
                return false;
              }
            if (0 < yyrule)
              {
                YYCDEBUG << " S" << yyrule << '\n';
                return true;
              }
            yyrule = -yyrule;
          }
        // By now we know we have to simulate a reduce.
        YYCDEBUG << " R" << yyrule - 1;
        // Pop the corresponding number of values from the stack.
        {
          std::ptrdiff_t yylen = yyr2_[yyrule];
          // First pop from the LAC stack as many tokens as possible.
          std::ptrdiff_t lac_size = std::ptrdiff_t (yylac_stack_.size ());
          if (yylen < lac_size)
            {
              yylac_stack_.resize (std::size_t (lac_size - yylen));
              yylen = 0;
            }
          else if (lac_size)
            {
              yylac_stack_.clear ();
              yylen -= lac_size;
            }
          // Only afterwards look at the main stack.
          // We simulate popping elements by incrementing lac_top.
          lac_top += yylen;
        }
        // Keep top_state in sync with the updated stack.
        top_state = (yylac_stack_.empty ()
                     ? yystack_[lac_top].state
                     : yylac_stack_.back ());
        // Push the resulting state of the reduction.
        state_type state = yy_lr_goto_state_ (top_state, yyr1_[yyrule]);
        YYCDEBUG << " G" << int (state);
        yylac_stack_.push_back (state);
      }
  }

  // Establish the initial context if no initial context currently exists.
  bool
  parser::yy_lac_establish_ (symbol_kind_type yytoken)
  {
    /* Establish the initial context for the current lookahead if no initial
       context is currently established.

       We define a context as a snapshot of the parser stacks.  We define
       the initial context for a lookahead as the context in which the
       parser initially examines that lookahead in order to select a
       syntactic action.  Thus, if the lookahead eventually proves
       syntactically unacceptable (possibly in a later context reached via a
       series of reductions), the initial context can be used to determine
       the exact set of tokens that would be syntactically acceptable in the
       lookahead's place.  Moreover, it is the context after which any
       further semantic actions would be erroneous because they would be
       determined by a syntactically unacceptable token.

       yy_lac_establish_ should be invoked when a reduction is about to be
       performed in an inconsistent state (which, for the purposes of LAC,
       includes consistent states that don't know they're consistent because
       their default reductions have been disabled).

       For parse.lac=full, the implementation of yy_lac_establish_ is as
       follows.  If no initial context is currently established for the
       current lookahead, then check if that lookahead can eventually be
       shifted if syntactic actions continue from the current context.  */
    if (yy_lac_established_)
      return true;
    else
      {
#if YYDEBUG
        YYCDEBUG << "LAC: initial context established for "
                 << symbol_name (yytoken) << '\n';
#endif
        yy_lac_established_ = true;
        return yy_lac_check_ (yytoken);
      }
  }

  // Discard any previous initial lookahead context.
  void
  parser::yy_lac_discard_ (const char* event)
  {
   /* Discard any previous initial lookahead context because of Event,
      which may be a lookahead change or an invalidation of the currently
      established initial context for the current lookahead.

      The most common example of a lookahead change is a shift.  An example
      of both cases is syntax error recovery.  That is, a syntax error
      occurs when the lookahead is syntactically erroneous for the
      currently established initial context, so error recovery manipulates
      the parser stacks to try to find a new initial context in which the
      current lookahead is syntactically acceptable.  If it fails to find
      such a context, it discards the lookahead.  */
    if (yy_lac_established_)
      {
        YYCDEBUG << "LAC: initial context discarded due to "
                 << event << '\n';
        yy_lac_established_ = false;
      }
  }


  int
  parser::yy_syntax_error_arguments_ (const context& yyctx,
                                                 symbol_kind_type yyarg[], int yyargn) const
  {
    /* There are many possibilities here to consider:
       - If this state is a consistent state with a default action, then
         the only way this function was invoked is if the default action
         is an error action.  In that case, don't check for expected
         tokens because there are none.
       - The only way there can be no lookahead present (in yyla) is
         if this state is a consistent state with a default action.
         Thus, detecting the absence of a lookahead is sufficient to
         determine that there is no unexpected or expected token to
         report.  In that case, just report a simple "syntax error".
       - Don't assume there isn't a lookahead just because this state is
         a consistent state with a default action.  There might have
         been a previous inconsistent state, consistent state with a
         non-default action, or user semantic action that manipulated
         yyla.  (However, yyla is currently not documented for users.)
         In the first two cases, it might appear that the current syntax
         error should have been detected in the previous state when
         yy_lac_check was invoked.  However, at that time, there might
         have been a different syntax error that discarded a different
         initial context during error recovery, leaving behind the
         current lookahead.
    */

    if (!yyctx.lookahead ().empty ())
      {
        if (yyarg)
          yyarg[0] = yyctx.token ();
        int yyn = yyctx.expected_tokens (yyarg ? yyarg + 1 : yyarg, yyargn - 1);
        return yyn + 1;
      }
    return 0;
  }

  // Generate an error message.
  std::string
  parser::yysyntax_error_ (const context& yyctx) const
  {
    // Its maximum.
    enum { YYARGS_MAX = 5 };
    // Arguments of yyformat.
    symbol_kind_type yyarg[YYARGS_MAX];
    int yycount = yy_syntax_error_arguments_ (yyctx, yyarg, YYARGS_MAX);

    char const* yyformat = YY_NULLPTR;
    switch (yycount)
      {
#define YYCASE_(N, S)                         \
        case N:                               \
          yyformat = S;                       \
        break
      default: // Avoid compiler warnings.
        YYCASE_ (0, YY_("syntax error"));
        YYCASE_ (1, YY_("syntax error, unexpected %s"));
        YYCASE_ (2, YY_("syntax error, unexpected %s, expecting %s"));
        YYCASE_ (3, YY_("syntax error, unexpected %s, expecting %s or %s"));
        YYCASE_ (4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
        YYCASE_ (5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
#undef YYCASE_
      }

    std::string yyres;
    // Argument number.
    std::ptrdiff_t yyi = 0;
    for (char const* yyp = yyformat; *yyp; ++yyp)
      if (yyp[0] == '%' && yyp[1] == 's' && yyi < yycount)
        {
          yyres += symbol_name (yyarg[yyi++]);
          ++yyp;
        }
      else
        yyres += *yyp;
    return yyres;
  }


  const short parser::yypact_ninf_ = -1082;

  const short parser::yytable_ninf_ = -936;

  const short
  parser::yypact_[] =
  {
      18,    10, 18602,  -209, 14957,   -96,    58, 19109,   155, 18602,
   18602,   174,   139, -1082, -1082, -1082,   166,   197, -1082, -1082,
   -1082,  -114, -1082, -1082,   233,    49, -1082,   200, -1082, -1082,
     166,   202,   225,   243,   290, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,   279,
   -1082, -1082,   109, -1082, -1082,  -140, 10202, 16550, 17057,   336,
     -50, 17057, 17057, -1082,   333, 18602, -1082, -1082,  3786,  3786,
   18602, 18602, -1082, -1082, -1082,    12, -1082,  5391,   354, -1082,
   -1082,   365,   354, -1082,    18,     6,    75,    75,   296,    75,
    -158,  -134,    31, -1082,  -114, -1082,   377, -1082, -1082, -1082,
   -1082,  5391, 11264,   279, -1082, -1082,   393, 18602,   155, 14426,
     -50, 15488, 18602, -1082, 18602, -1082, -1082,   387, 14957,   150,
      60, -1082, 14957,    61,  -109,    62,   151, -1082, -1082, -1082,
   -1082,    57, -1082, -1082,   144, -1082,  2181,   379, -1082,   391,
   -1082, -1082,   403, -1082,   404,  5391,   401,   223,    25, -1082,
   -1082, -1082, -1082,   406,   335, -1082, -1082,   405,   407, -1082,
     408, -1082, -1082, -1082, -1082,   412,   413,   414, -1082, -1082,
   -1082, -1082, -1082, -1082,  5926, -1082, -1082,   335, -1082, -1082,
     419, -1082, -1082,   420, -1082,   417, -1082, -1082,   423, -1082,
     358, -1082, -1082, -1082, -1082, 20654, -1082, -1082, -1082, -1082,
   -1082,    70, -1082, -1082, -1082, -1082,   444, -1082,  5391, -1082,
     279, -1082, -1082,   161,   371,   455, -1082, -1082, -1082, -1082,
     452, -1082, -1082, -1082, -1082, -1082, -1082, -1082,   455,   266,
     444, -1082, -1082, 18602,  9671,  9671, 20960,   158, 18602, 18602,
     409, -1082, 12326, 18602,    75,    75, 14957,  4321,  5391,  3786,
   18602,    75,  5391,   220, -1082, -1082, -1082, -1082, -1082, -1082,
      49,    49,  5391,    49,  5391, -1082, -1082,   141,   201,  -158,
   -1082,  5391, 20717, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082,   463, 20123,   468,   470, 18602,   -50, 14957, -1082,   -74,
   -1082, 14957,   234, -1082, 14957, 10733, -1082, -1082,    22,   152,
   20678, -1082, -1082, -1082, -1082, 20960,   -20,  5391, -1082, -1082,
     491, -1082, -1082,   -91,   405,  1391, -1082,  5391, -1082,  5391,
    5391,  5391,  5391,  5391,  5391,  5391,  5391,  5391,  5391,  5391,
    5391,   746,  5391, 11795,   431,   487,   -98,  5391,    21,  5391,
      19,  5391, -1082, 17588, -1082,  3786,   299,   284,   301,  3251,
   -1082, -1082,   491,   -76, 14957,    -8, -1082, -1082, -1082, -1082,
   -1082,   486, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082,   486, -1082,  5391, -1082,   235, -1082, -1082,
   -1082,   433, -1082, -1082, 17057,   279,   505, -1082,    86,   501,
   -1082,   279,    26,    26,   -74, -1082,   504, 20960, 13364,   508,
   -1082, -1082,   499,   514,    26, 20960, 14957,   291, -1082,   519,
   -1082,    59,   291, -1082, 20960, -1082, -1082, -1082,   253, -1082,
     390,   -26, 18095, -1082, -1082, 18602,   257, -1082,  5391,   532,
   -1082, -1082, 14957,   -74, -1082,   305, -1082, -1082,  5391,  -106,
   -1082, 20806, -1082,   308, -1082, -1082, -1082, -1082, -1082,   534,
     347, -1082, 20742,   540,   537, -1082,   544,   108,   179,   192,
     310,   192,   192,   310,   939,   939,   370,   939,   370,   939,
     521, -1082, -1082, -1082,    63, -1082,   552, -1082, -1082, -1082,
   -1082, -1082, -1082,   552, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082,   553, -1082, -1082, -1082, -1082, -1082,  1391,
   -1082, -1082,  8601,  2716, -1082, -1082,   244, -1082,  1038,   431,
     487,  5391,  1130, -1082, -1082, -1082,   558,   284, 19616, -1082,
   -1082, -1082,    -8, -1082,   560,  5391,  5391,  5391, 20960,    33,
     562, -1082, -1082, -1082, -1082,   336,   360,  9671, 20960, -1082,
   18602,   564,    75, -1082,   279, 12833,   495, -1082, 18602,   279,
     546, -1082, -1082,  -103, -1082, -1082, -1082,  5391,   122, -1082,
    5391,  5391, 18602, -1082,   -74,  5391, -1082, -1082,    29,    39,
   -1082,   455, -1082, -1082,   573,   574,   575, -1082,   319,   746,
     572,   568, -1082, -1082, -1082, -1082,   312, -1082, 20960, 18602,
   -1082, -1082,    31, 18602,   693,  5391, -1082,   416,   746, -1082,
     491, -1082,  5391,  5391,  5391, -1082,  5391, -1082,  5391,  5391,
     491,   410,   219, -1082,   324, -1082,  8601, -1082,  1038, -1082,
     236, -1082,   360, -1082,    48, 16019,   248,  4856,   576, -1082,
     378, -1082, -1082,    31,  6461, 17057,    75, -1082,     6, -1082,
   13895, 20960,   577, -1082, -1082,   584,    39, -1082,   -80, -1082,
   -1082, -1082, -1082, -1082,   585, -1082, -1082, 18095, -1082,   345,
   -1082, -1082,  5391, 20960, -1082, -1082,   587, -1082, 20960, 20848,
   20890, -1082, 21079, 20960,   589,   405,  8601,  8601,  8601,  8601,
    5391, -1082,   241,   522,   248,   378,   592,   593,   594,  5391,
   -1082,  5391, -1082, -1082,   595,  1646,   597,   596, -1082, -1082,
   -1082, 20960, -1082,  6461, -1082, -1082,  5391,   580, -1082, -1082,
   -1082, 18602, -1082, -1082, -1082, 20960, -1082,  5391,  5391, -1082,
   -1082,   170, -1082, -1082,   170,  1038,  5391,  5391,  -108, -1082,
   -1082, -1082, -1082,   248, 20960, -1082, -1082,  5391,  6996,   601,
   -1082, -1082, -1082,   602, 20781, 20960,   610, -1082,    11, -1082,
   20960, 20960,  1038,   607,  7531,  7531,  7531,   613, -1082,   617,
     356, -1082,  6996, 18602, -1082,   269,   618, -1082,  9136,   228,
     -92,  1231, -1082, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082,  -185,   582, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082,   322, -1082,   367, -1082, -1082,  8066, -1082,
   -1082, -1082
  };

  const short
  parser::yydefact_[] =
  {
       6,    28,     0,   845,     0,     0,   157,     0,     0,     0,
       0,     0,     2,     3,     5,     7,    10,    37,    16,    13,
      15,   159,    12,    11,    36,     0,    29,    79,     8,     9,
       0,    37,    16,     0,    15,   325,   655,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   454,   453,   455,   456,   457,   458,   459,   768,
     769,   770,   771,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   772,   773,   469,   470,   471,   472,   473,   774,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   775,   776,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   777,   530,
     531,   532,   533,   778,   534,   535,   536,   537,   779,   538,
     539,   540,   541,   542,   543,   544,   545,   546,   780,   781,
     547,   548,   549,   550,   551,   552,   553,   554,   555,   556,
     557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
     782,   567,   568,   569,   570,   783,   784,   785,   571,   572,
     786,   787,   788,   789,   790,   791,   792,   793,   794,   795,
     796,   573,   574,   575,   576,   577,   578,   579,   580,   797,
     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,   594,   798,   595,   596,   597,   598,   599,
     600,   601,   602,   799,   800,   603,   604,   605,   606,   607,
     608,   609,   610,   801,   802,   611,   612,   613,   614,   803,
     615,   804,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,   627,   805,   628,   806,   629,   630,   631,
     632,   633,   634,   635,   636,   637,   638,   639,   640,   641,
     642,   643,   807,   644,   808,   647,   645,   646,   648,   649,
     650,   651,   652,   653,   654,   656,   657,   658,   809,   659,
     660,   661,   662,   663,   664,   665,   666,   667,   668,   669,
     670,   671,   672,   673,   674,   675,   676,   677,   678,   679,
     680,   681,   810,   682,   683,   684,   685,   686,   687,   688,
     689,   690,   691,   692,   693,   694,   695,   696,   697,   698,
     811,   699,   700,   701,   702,   812,   703,   704,   705,   706,
     707,   708,   709,   710,   711,   712,   713,   714,   715,   716,
     717,   718,   813,   719,   720,   721,   722,   723,   724,   725,
     726,   727,   728,   729,   814,   815,   730,   731,   816,   732,
     817,   733,   734,   735,   736,   737,   738,   740,   739,   741,
     742,   743,   744,   745,   746,   747,   748,   749,   750,   751,
     818,   819,   752,   753,   754,   755,   756,   757,   758,   759,
     760,   761,   762,   763,   764,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   765,   766,   767,   831,
     326,   327,     0,   843,   844,     0,     0,     0,   136,    92,
      93,    96,   136,   150,   149,     0,   156,    82,     0,   292,
     584,   696,    51,    57,    54,     0,    58,     0,    80,    83,
     837,   834,    81,     1,     6,   180,   102,   102,     0,   102,
     170,    24,     0,    37,   159,    36,     0,    20,    22,    19,
      21,     0,     0,   832,   286,    40,     0,     0,   818,   136,
       0,    96,     0,   152,     0,   135,    99,   131,     0,     0,
     140,   146,     0,   143,     0,   144,     0,    98,    95,   151,
     910,     0,   924,   928,   325,   931,    28,     0,   298,     0,
     324,   332,   769,   333,   771,   243,     0,   772,   773,   334,
     335,   336,   337,   775,   776,   331,   514,   777,   778,   933,
     779,   338,   339,   340,   341,   783,   784,   785,   342,   343,
     344,   345,   346,   347,     0,   348,   923,   804,   349,   350,
     809,   351,   352,   812,   716,   813,   353,   728,   815,   932,
     819,   354,   223,    17,    18,   297,   195,   196,   181,   219,
     216,   255,   220,   221,   256,   222,    85,   293,     0,   318,
     246,   839,   330,   326,     0,     0,   876,   877,   896,   897,
     899,   878,   217,   927,   916,   917,   918,   919,     0,    91,
     291,    52,    53,     0,     0,     0,   262,     0,     0,     0,
       0,     4,   105,     0,   102,   102,     0,     0,     0,   292,
       0,   102,     0,     0,   943,   944,   941,    30,   100,   101,
       0,     0,     0,     0,     0,   169,    25,   167,   168,    26,
     158,     0,     0,   355,   289,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   838,   358,   356,   357,   288,   287,    41,
      44,     0,   122,     0,   129,     0,    94,     0,   141,     0,
     142,     0,     0,   145,     0,     0,   911,   909,    17,    18,
       0,   929,   925,   930,   926,   242,     0,     0,   905,   900,
       0,   890,   224,     0,   777,   197,   892,   259,   359,     0,
       0,     0,     0,     0,   226,   227,   230,   228,   231,   229,
       0,   934,     0,     0,   155,     0,     0,   232,     0,     0,
       0,     0,   296,     0,   257,     0,     0,   207,   247,     0,
     920,   922,     0,   939,     0,   180,    59,    70,    65,    66,
      64,    56,    60,    62,    67,    68,    73,    71,    72,    63,
     880,   879,    69,    55,   177,     0,    84,     0,   835,    88,
     331,     0,   955,   255,   136,     0,     0,   947,   108,   952,
     244,   246,    31,    31,     0,   175,   171,   174,   136,     0,
     948,   942,     0,   953,    31,   179,     0,    78,    77,   160,
     161,   139,    76,   173,   176,   165,   166,    27,     0,   290,
      50,    42,   847,    97,   153,     0,     0,   123,     0,     0,
     125,   127,     0,     0,   915,     0,   913,   218,     0,   241,
     237,     0,   875,     0,   873,   276,   277,   275,   274,     0,
       0,   224,   266,     0,   258,   260,     0,   839,     0,   187,
     182,   186,   185,   184,   191,   194,   192,   189,   193,   190,
     188,   886,   893,   902,   906,   891,   872,   908,   889,   888,
     883,   884,   935,   872,   887,   885,   904,   903,   907,   901,
     183,   866,   867,   881,   868,   894,   895,   869,   870,   209,
     295,   154,     0,     0,   234,   200,     0,   204,   198,   155,
       0,   233,   210,   322,   321,   323,     0,   206,   300,   282,
     283,   294,   180,   248,     0,     0,     0,     0,   266,   159,
       0,   936,   938,   937,   921,    90,   105,     0,   263,   833,
       0,     0,   102,   956,   840,     0,     0,   954,     0,   247,
       0,    34,   951,    35,    32,   950,   946,     0,   155,   264,
       0,     0,     0,   949,     0,     0,   137,   138,     0,   134,
     178,     0,    39,    47,     0,     0,     0,    43,     0,   934,
       0,   846,   848,   851,   850,   852,     0,   130,   148,     0,
     126,   124,     0,     0,     0,     0,   238,     0,   934,   871,
       0,   269,     0,     0,     0,   271,     0,   270,     0,     0,
       0,     0,     0,   211,     0,   205,     0,   201,   199,   208,
     302,   299,   105,   254,   159,   136,   159,     0,     0,   898,
     121,    61,   836,     0,     0,   136,   102,   245,   180,   172,
     136,   958,     0,   945,   162,     0,   134,   319,     0,   164,
      49,    45,    48,    46,     0,   865,   842,     0,   128,     0,
     912,   914,     0,   240,   236,   940,     0,   874,   273,   281,
     280,   261,   268,   267,     0,     0,     0,     0,     0,     0,
       0,   235,     0,     0,   159,   121,     0,     0,     0,     0,
     249,     0,    74,    38,     0,    28,   679,   103,   104,   109,
     115,   114,   957,     0,    33,   265,     0,     0,   163,   132,
     133,     0,   864,   849,   147,   239,   272,     0,     0,   882,
     225,   212,   215,   214,   213,   202,     0,     0,   303,    86,
     252,   253,   250,   159,   120,    87,   119,     0,     0,     0,
     106,   107,   111,   118,   116,   959,     0,   317,   863,   854,
     279,   278,   203,   301,     0,     0,     0,     0,    75,     0,
       0,   110,     0,     0,   320,     0,     0,   856,   768,   492,
     738,     0,   315,   308,   315,   315,   285,   251,   113,   112,
     117,   862,   861,   853,     0,   312,   311,   310,   314,   313,
     306,   304,   305,     0,   859,     0,   855,   857,     0,   858,
     860,   309
  };

  const short
  parser::yypgoto_[] =
  {
   -1082, -1082, -1082,   181, -1082,  -494,    34,  -525,    52,     9,
       1,    45, -1082,  -653,    15, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082, -1082,  -206, -1082, -1082, -1082,    36,  -348,
   -1082, -1082, -1082,     7, -1082, -1082,   642, -1082, -1082,    35,
   -1082, -1082,  -658,  -160,  -390,  -463,  -878, -1082,  -506, -1082,
    -503, -1065,  -561, -1033,  -482,   229,   -78,  -440,  -426, -1082,
    -462,  -738, -1082, -1082,  -302, -1082,  -443,   -10, -1082,  -357,
   -1082,    23,  -361,    28, -1082,  -347, -1082,  -708,   146, -1082,
   -1082,  -957,  -847, -1082,  -297, -1082, -1082,  -223, -1082, -1082,
   -1082,  -548,  -581,  -558, -1082, -1082,  -703,  -607, -1082,  -873,
   -1082, -1082, -1082, -1082, -1082, -1082, -1082,  -500,  -464,    50,
     232,  -128, -1082, -1082, -1082,  -947, -1081,  -901, -1082,   471,
   -1082, -1082,  -917,    16,  -707,  -560,  -112, -1082, -1082,    -2,
    -455,    46, -1082,  -721,     4, -1082,  -527, -1082, -1082, -1082,
   -1082, -1082,  -435, -1082, -1082, -1082, -1082, -1082, -1082, -1082,
   -1082, -1082, -1082,  -356,  -374,  -518, -1082,  -689, -1082, -1082,
   -1082,  -723, -1082, -1082,  -719,  -698, -1082, -1082,  -691, -1082,
   -1082, -1082, -1082,  -368, -1082,  -122,  -556,  -523,  -469, -1082,
    -690, -1082, -1082,  -412, -1082, -1082, -1082
  };

  const short
  parser::yydefgoto_[] =
  {
       0,    11,    12,    13,    14,    15,    30,   572,   573,   574,
      33,    34,  1011,  1012,    21,  1154,    22,   486,   740,   880,
     881,  1037,  1032,    23,   452,   453,   454,   455,   821,   822,
     823,   824,   825,    24,    25,   448,   458,   806,  1218,   459,
    1001,   815,    26,   439,   440,   640,   842,  1007,  1157,  1200,
    1158,  1159,  1202,  1160,  1152,   441,   495,  1109,   496,  1029,
     506,   890,   442,   443,   962,   449,   470,   650,   869,   870,
     645,   646,   635,   648,   856,   873,    27,   636,   988,   576,
     577,  1072,   578,   800,   965,   579,   899,   900,  1057,   766,
     849,   580,   581,   582,   583,   913,   914,   617,   860,   915,
     584,   585,   909,   910,   916,   804,   979,   483,   484,   609,
     610,   587,  1080,  1144,  1217,  1232,  1233,  1250,  1206,   588,
    1106,   976,   589,   590,   591,   592,   733,   802,   734,   593,
     431,   444,   620,   837,   838,   737,   594,   918,    28,   435,
    1040,  1041,  1042,  1043,  1044,  1227,  1243,  1256,  1257,  1045,
    1226,  1209,  1172,   950,   951,   771,   903,   904,   595,   829,
     952,   596,   954,   597,   598,   599,   600,   769,   601,    29,
     511,   757,   895,   896,   602,   603,   604,   605,   606,   607,
     608,   994,  1126,   637,   847,   848,   863
  };

  const short
  parser::yytable_[] =
  {
     430,    19,   430,   633,   641,   430,   643,   430,   430,    18,
      32,   471,   772,   461,   461,   507,   508,   756,   429,   738,
     429,   859,     1,   456,   886,   460,   460,   736,   613,  1000,
       1,   649,   475,  -906,    16,   477,   614,  -906,   472,   776,
     474,   843,   752,   472,   878,    20,   490,   905,   432,   499,
     -28,  1087,    17,    31,   826,   826,   438,   622,   830,   830,
    1055,   472,   991,   466,   844,   507,  1066,   520,   953,   755,
     917,   973,   955,   499,   466,   850,   779,   473,   974,   780,
     781,   782,   783,   784,   785,   786,   787,   788,   789,   790,
     808,   831,   831,   956,   500,   846,   969,   520,  1033,   791,
     957,   958,   917,  1246,  1005,  1214,   989,   996,   746,   647,
     446,  1107,   749,  1169,  1086,  1073,  1016,   792,  1090,  1142,
     627,  1026,  -768,   990,  1034,   810,   811,   638,   501,   500,
    1203,   467,  1253,  1221,   794,  -768,  -841,  1254,     2,   813,
       3,  -768,   467,   751,  -158,   832,   832,  1244,   982,  1035,
    -841,   445,  -328,   500,  -768,  1051,  -328,  1221,   464,   828,
     828,   852,   853,   501,  1046,   478,   503,   457,   864,  -329,
     623,   834,   644,  -329,   463,  -159,   835,  1261,   502,  1181,
    1182,  1183,  1184,   624,   -16,  1255,  -328,   501,   961,  1203,
    1170,  1137,  1138,  1131,  1014,  1014,  -158,   -14,   465,   -37,
    1015,   503,   502,  -329,  1145,   906,  1014,  1068,   907,   500,
     -14,  1023,     4,  1027,  1131,   477,   -14,   447,   476,   966,
       4,  1069,   790,   992,   967,   503,   468,  -159,     4,  1073,
     504,  -902,   791,   -23,   639,  -902,   854,   468,   478,  1136,
    1137,  1138,  1139,   501,   611,   612,   -23,   970,   999,   911,
    1207,   625,   -23,  1000,   504,   433,   479,   434,   626,     5,
     888,  1136,  1137,  1138,  1139,   -23,  1030,   -37,  1234,  1235,
    1047,   835,  1215,  1247,  1082,  1000,  1193,  1140,   917,   917,
     917,   503,  1084,  1085,   627,   795,  1103,   876,   647,  1073,
    1073,  1073,  1073,   481,   505,   482,  1036,  1006,   971,  1186,
     -37,   779,  1216,   480,   780,   781,   782,   783,   796,  -840,
     786,   485,   788,  -840,   790,   481,   953,   482,  1052,   487,
     955,  1059,   520,  1053,   791,  1118,  1060,   779,  1119,   505,
    1000,   781,   782,  1251,  1252,   953,   797,  1141,   736,   955,
     790,   956,   835,  -872,   738,  1004,   468,   770,   957,   958,
     791,  1009,   -37,   505,   498,   509,  1074,   887,  1174,   917,
     956,   891,   -37,  1000,   893,  1105,  -901,   957,   958,  1238,
    -901,  1127,   618,   468,   835,   469,   798,   619,   642,   515,
     917,  1134,   512,   809,   761,   628,   469,   779,   468,   651,
     780,   781,   782,   783,   512,   762,   763,   764,   799,   745,
     790,   739,   747,   754,   748,   750,   753,   898,   520,   505,
     791,  -886,  -893,   767,  -891,   803,  -888,     1,  1003,   773,
    -883,  -884,  -935,   889,   843,   776,   629,  -887,  -885,   777,
       6,  -907,  1019,   630,   430,   430,   430,   826,     6,   430,
     430,   830,   917,   430,   908,     7,     6,  1095,   430,   430,
    1208,     6,   429,   429,   497,   634,   975,   497,   497,   993,
    1097,   429,   805,   515,   812,    19,   456,   456,   814,     6,
     839,   644,   866,    18,   831,   882,  1024,     6,   846,   627,
     735,   884,   885,   493,   615,   430,   892,   430,   489,   430,
     430,   510,   430,   898,   902,   631,   430,   961,    16,   963,
     430,     4,  1050,   429,   997,   497,   632,   497,   429,    20,
     744,   -37,    19,     8,   429,  1002,    17,   809,   429,  1008,
     632,     8,  1017,  1021,    31,   759,  1020,     9,   832,     8,
    1225,   768,  1022,   741,     8,     9,   467,  1025,   743,  1094,
     738,  1031,   828,     9,  1049,   738,  1088,  1061,     9,  1062,
     438,    10,     8,  1065,   438,  1066,  1028,  1067,  1120,    10,
       8,   791,  1110,    17,   770,  1070,  1075,    10,   758,   768,
     472,   841,    10,  1083,     9,  1089,  1093,  1096,  1098,  1108,
    1213,  1111,  1112,  1113,  1114,  1116,  1117,  1124,   468,  1150,
    1220,  1143,  1135,  1151,   575,   575,  1167,  1171,    10,  1153,
    1176,  1166,  1179,   616,  1187,  1190,  1191,  1192,  1195,  1197,
    1180,   430,   827,   827,  1198,  1241,   430,   430,   520,  1222,
    -115,   430,   461,  1224,   430,   835,  1236,   652,   430,   816,
    1237,  1242,  1260,  1163,   460,   460,   633,  1245,   845,   851,
    1258,  1146,   429,  1148,  1259,   621,   862,   475,   475,  1091,
     475,   833,   462,   836,   995,   867,   868,  1199,   872,  1147,
    1201,  1239,   760,  1189,   883,   491,  1168,  1076,  1104,  1162,
    1099,   765,   877,  1077,  1165,   875,  1056,   981,   438,   861,
     586,   960,  1173,  1115,  1125,  1121,  1164,     0,     0,     0,
       0,     0,   473,   473,     0,   473,     0,     0,     0,     0,
     775,  1188,     0,     0,     0,     0,     0,     0,     0,     0,
     779,     0,     0,   780,   781,   782,   783,   784,   785,   786,
     787,   788,   789,   790,     0,     0,     0,     0,     0,     0,
       0,   520,     0,   791,   807,     0,     0,     0,     0,     0,
     430,     0,     0,   430,     0,   430,     0,     0,     0,   430,
    1219,   792,   430,   430,     0,     0,     0,     0,   497,     0,
       0,   460,     0,   429,     0,     0,     0,   429,   794,     0,
     429,   894,     0,   857,   858,   575,     0,     0,   865,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   871,     0,
     874,   735,     0,     0,     0,     0,     0,   616,     0,   438,
       0,   430,     0,   438,     0,     0,   438,    31,     0,     0,
       0,     0,   430,     0,     0,     0,     0,     0,     0,   980,
       0,     0,   931,     0,     0,   932,     0,     0,     0,     0,
     429,     0,     0,     0,     0,     0,     0,     0,   933,   934,
       0,     0,   430,     0,     0,     0,     0,   964,     0,     0,
       0,     0,     0,  1010,  1010,     0,   430,     0,     0,     0,
     497,     0,     0,     0,   430,  1010,   438,  1013,  1013,     0,
       0,     0,     0,     0,   497,     0,     0,     0,     0,  1013,
     430,     0,   429,   430,     0,     0,   935,   936,     0,     0,
     430,   937,     0,     0,     0,     0,     0,     0,  1039,     0,
       0,   460,     0,     0,   473,   473,     0,     0,   429,   938,
       0,     0,     0,   901,     0,     0,   473,     0,   438,   795,
       0,     0,     0,   912,     0,   919,   920,   921,   922,   923,
     924,   925,   926,   927,   928,   929,   930,     0,   959,     0,
     939,     0,   796,   968,   438,   972,     0,   977,     0,     0,
       0,   575,     0,     0,     0,     0,   779,     0,     0,   780,
     781,   782,   783,  -936,  -936,   786,  -936,   788,  -936,   790,
     797,     0,     0,     0,     0,     0,   430,   520,     0,   791,
       0,   998,     0,     0,     0,     0,     0,     0,     0,   940,
     941,     0,   942,     0,  1081,   827,     0,     0,   430,     0,
       0,     0,     0,   471,  1092,     0,   430,     0,     0,     0,
     798,     0,     0,     0,   794,   758,   460,     0,     0,     0,
     430,   845,   964,     0,   851,     0,     0,     0,  1079,     0,
       0,     0,   799,     0,  1048,     0,     0,     0,  1102,     0,
       0,     0,     0,     0,  1054,     0,   801,   430,     0,     0,
       0,   430,     0,    19,     0,   779,     0,     0,   780,   781,
     782,   783,     0,     0,   786,   460,   788,     0,   790,   894,
       0,   943,     0,     0,     0,     0,   520,     0,   791,     0,
       0,     0,     0,   430,     0,     0,     0,   801,   634,     0,
       0,     0,     0,   430,    19,     0,     0,     0,   430,     0,
       0,   497,     0,     0,    17,     0,     0,     0,     0,   616,
       0,   497,     0,  -936,     0,   430,   497,  1078,     0,     0,
       0,     0,     0,   801,     0,     0,     0,     0,   944,     0,
       0,     0,     0,  1039,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    17,     0,   779,     0,     0,
     780,   781,   782,   783,   784,   785,   786,   787,   788,   789,
     790,  1122,     0,   874,   759,   795,  1100,  1101,   520,   430,
     791,   871,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   945,     0,     0,     0,     0,     0,   460,   792,     0,
       0,     0,     0,     0,     0,     0,   946,     0,     0,     0,
       0,  1123,     0,     0,     0,   794,     0,   758,  1128,  1129,
    1130,     0,     0,   947,  1132,  1133,   797,   948,     0,     0,
       0,   430,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   801,     0,     0,     0,     0,   801,     0,     0,  1240,
    1161,     0,     0,     0,     0,     0,   801,     0,   779,     0,
     949,   780,   781,   782,   783,   784,   785,   786,   787,   788,
     789,   790,     0,     0,  -936,     0,     0,     0,  1175,   520,
       0,   791,     0,     0,     0,     0,     0,     0,   801,     0,
       0,     0,     0,     0,     0,     0,  1185,     0,     0,   792,
       0,     0,     0,     0,     0,     0,     0,  1194,     0,     0,
       0,   760,     0,     0,     0,     0,   794,     0,     0,  1204,
       0,     0,  1205,     0,     0,  -936,     0,     0,     0,     0,
       0,     0,     0,  1210,  1211,     0,     0,     0,   801,   801,
       0,     0,  1212,   616,     0,     0,   801,     0,     0,     0,
       0,     0,   801,   616,  1161,   801,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   795,     0,     0,     0,
    1231,  1231,  1231,     0,     0,     0,     0,     0,  1204,     0,
       0,     0,   801,     0,  1231,     0,     0,     0,     0,   796,
       0,     0,     0,   801,     0,     0,     0,     0,     0,     0,
     801,   801,   801,   801,   801,   801,   801,   801,   801,   801,
     801,   801,     0,     0,  1231,     0,     0,   797,   779,     0,
       0,   780,   781,   782,   783,   784,   785,   786,   787,   788,
     789,   790,     0,     0,     0,     0,  1248,     0,     0,   520,
     801,   791,     0,     0,     0,     0,     0,     0,     0,   801,
       0,     0,     0,   801,     0,     0,     0,   798,   801,     0,
       0,     0,     0,     0,     0,     0,     0,   795,     0,   801,
       0,     0,     0,     0,     0,     0,   794,     0,     0,   801,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     796,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   797,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   801,
       0,     0,     0,     0,     0,   801,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   798,   801,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     799,   801,   801,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   801,     0,  1249,     0,     0,   801,
     801,   801,     0,   801,   801,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   795,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   801,     0,     0,     0,     0,     0,     0,     0,
     796,     0,     0,     0,     0,     0,   801,     0,     0,   512,
       0,   513,     0,   514,   515,     0,   801,     0,   516,  1196,
       0,     0,     0,     0,     0,   801,   517,     0,   797,   519,
       0,     0,     0,     0,     0,   801,   801,    36,     0,     0,
       0,   801,   801,   801,   520,     0,     0,     0,     0,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,    46,
      47,    48,   801,     0,     0,     0,     0,     0,   798,    49,
      50,    51,     0,    52,    53,    54,    55,   521,    56,    57,
      58,    59,   522,   523,    61,   524,     0,    63,    64,    65,
      66,    67,    68,    69,   525,   526,    70,    71,   527,   528,
      74,     0,    75,    76,    77,    78,    79,     0,   529,     0,
      80,    81,    82,    83,    84,    85,   530,    86,    87,    88,
      89,     0,    90,    91,    92,    93,    94,    95,     0,   531,
      96,    97,    98,     0,     0,     0,   532,     0,     0,     0,
      99,   100,   101,   102,   103,   104,   533,   534,   107,     0,
     108,   535,     0,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,     0,     0,   120,   121,   536,
     123,   124,     0,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,   134,   135,   136,   137,   537,   139,
     140,   141,   142,   538,   539,   144,     0,   145,   146,   147,
     540,   149,     0,   150,     0,   151,   152,   541,     4,   542,
     153,   154,   155,   156,     0,   157,   158,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   543,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   544,   180,   181,   182,   183,   184,   545,
     546,     0,   547,     0,   188,   548,   549,   189,   550,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,     0,     0,   208,
     209,   551,   210,   552,     0,   211,   212,   213,     0,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     553,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   554,   246,   247,   555,   248,   556,   249,
     250,   557,   252,   253,   254,   255,     0,   256,   257,   258,
       0,     0,   259,   260,   261,     0,     0,   262,   263,   264,
     558,   265,   559,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,     0,   296,   297,   560,   299,
     300,   301,     0,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,   316,   561,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     6,   333,   334,   335,
     336,   337,     0,   338,   339,   340,   341,   342,   562,   343,
     344,   563,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   564,   360,   361,   565,
     363,     0,   364,   365,     0,     0,   366,   566,   367,   368,
     369,   370,   371,   567,     0,   373,   374,   568,     0,     0,
     376,   377,   378,   379,   380,   569,   381,   382,   383,   384,
     385,   386,   387,   388,   389,     0,     0,   390,   391,   392,
     393,   394,     0,     0,   395,   396,   397,   398,   399,   488,
     570,     0,   402,   571,   403,   404,   405,   406,   407,     0,
       0,   408,     0,     9,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   512,     0,   513,    10,   514,   515,
       0,     0,     0,   516,     0,     0,     0,     0,     0,     0,
       0,   517,     0,     0,   519,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,   520,
       0,     0,     0,     0,    37,    38,    39,    40,    41,    42,
      43,    44,    45,     0,    46,    47,    48,     0,     0,     0,
       0,     0,     0,     0,    49,    50,    51,     0,    52,    53,
      54,    55,   521,    56,    57,    58,    59,   522,   523,    61,
     524,     0,    63,    64,    65,    66,    67,    68,    69,   525,
     526,    70,    71,   527,   528,    74,     0,    75,    76,    77,
      78,    79,     0,   529,     0,    80,    81,    82,    83,    84,
      85,   530,    86,    87,    88,    89,     0,    90,    91,    92,
      93,    94,    95,     0,   531,    96,    97,    98,     0,     0,
       0,   532,     0,     0,     0,    99,   100,   101,   102,   103,
     104,   533,   534,   107,     0,   108,   535,     0,   109,   110,
     111,   112,   113,   114,   115,     0,   116,   117,   118,   119,
       0,     0,   120,   121,   536,   123,   124,     0,   125,   126,
     127,   128,     0,   129,   130,   131,   132,   133,     0,   134,
     135,   136,   137,   537,   139,   140,   141,   142,   538,   539,
     144,     0,   145,   146,   147,   540,   149,     0,   150,     0,
     151,   152,   541,     4,   542,   153,   154,   155,   156,     0,
     157,   158,     0,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   543,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   544,   180,
     181,   182,   183,   184,   545,   546,     0,   547,     0,   188,
     548,   549,   189,   550,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,     0,     0,   208,   209,   551,   210,   552,     0,
     211,   212,   213,     0,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   553,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   554,   246,
     247,   555,   248,   556,   249,   250,   557,   252,   253,   254,
     255,     0,   256,   257,   258,     0,     0,   259,   260,   261,
       0,     0,   262,   263,   264,   558,   265,   559,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,   291,   292,   293,   294,   295,
       0,   296,   297,   560,   299,   300,   301,     0,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,   315,   316,   561,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     6,   333,   334,   335,   336,   337,     0,   338,   339,
     340,   341,   342,   562,   343,   344,   563,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   564,   360,   361,   565,   363,     0,   364,   365,     0,
       0,   366,   566,   367,   368,   369,   370,   371,   567,     0,
     373,   374,   568,     0,     0,   376,   377,   378,   379,   380,
     569,   381,   382,   383,   384,   385,   386,   387,   388,   389,
       0,     0,   390,   391,   392,   393,   394,     0,     0,   395,
     396,   397,   398,   399,   488,   570,     0,   402,   571,   403,
     404,   405,   406,   407,     0,     0,   408,     0,     9,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   512,
       0,   513,    10,   514,   515,     0,     0,     0,   516,     0,
       0,     0,     0,     0,     0,     0,   517,     0,     0,   519,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,   520,     0,     0,     0,     0,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,    46,
      47,    48,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    51,     0,    52,    53,    54,    55,   521,    56,    57,
      58,    59,   522,   523,    61,   524,     0,    63,    64,    65,
      66,    67,    68,    69,   525,   526,    70,    71,   527,   528,
      74,     0,    75,    76,    77,    78,    79,     0,   529,     0,
      80,    81,    82,    83,    84,    85,   530,    86,    87,    88,
      89,     0,    90,    91,    92,    93,    94,    95,     0,   531,
      96,    97,    98,     0,     0,     0,   532,     0,     0,     0,
      99,   100,   101,   102,   103,   104,   533,   534,   107,     0,
     108,   535,     0,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,     0,     0,   120,   121,   536,
     123,   124,     0,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,   134,   135,   136,   137,   537,   139,
     140,   141,   142,   538,   539,   144,     0,   145,   146,   147,
     540,   149,     0,   150,     0,   151,   152,   541,     0,   542,
     153,   154,   155,   156,     0,   157,   158,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   543,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   544,   180,   181,   182,   183,   184,   545,
     546,     0,   547,     0,   188,   548,   549,   189,   550,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,     0,     0,   208,
     209,   551,   210,   552,     0,   211,   212,   213,     0,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     553,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   554,   246,   247,   555,   248,   556,   249,
     250,   557,   252,   253,   254,   255,     0,   256,   257,   258,
       0,     0,   259,   260,   261,     0,     0,   262,   263,   264,
     558,   265,   559,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,     0,   296,   297,   560,   299,
     300,   301,     0,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,   316,   561,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     6,   333,   334,   335,
     336,   337,     0,   338,   339,   340,   341,   342,   562,   343,
     344,   563,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   564,   360,   361,   565,
     363,     0,   364,   365,     0,     0,   366,   566,   367,   368,
     369,   370,   371,   567,     0,   373,   374,   568,     0,     0,
     376,   377,   378,   379,   380,   569,   381,   382,   383,   384,
     385,   386,   387,   388,   389,     0,     0,   390,   391,   392,
     393,   394,     0,     0,   395,   396,   397,   398,   399,   488,
     570,     0,   402,   571,   403,   404,   405,   406,   407,     0,
       0,   408,     0,     9,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   512,     0,   513,    10,   514,   515,
       0,     0,     0,   516,   983,     0,     0,     0,     0,     0,
       0,   517,     0,   984,   519,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,   520,
       0,     0,     0,     0,    37,    38,    39,    40,    41,    42,
      43,    44,    45,   985,    46,    47,    48,     0,     0,     0,
       0,     0,     0,     0,    49,    50,    51,     0,    52,    53,
      54,    55,   521,    56,    57,    58,    59,   522,   523,    61,
     524,     0,    63,    64,    65,    66,    67,    68,    69,   525,
     526,    70,    71,   527,   528,    74,     0,    75,    76,    77,
      78,    79,     0,   529,     0,    80,    81,    82,    83,    84,
      85,   530,    86,    87,    88,    89,     0,    90,    91,    92,
      93,    94,    95,     0,   531,    96,    97,    98,     0,     0,
       0,   532,     0,     0,     0,    99,   100,   101,   102,   103,
     104,   533,   534,   107,     0,   108,   535,     0,   109,   110,
     111,   112,   113,   114,   115,     0,   116,   117,   118,   119,
     986,     0,   120,   121,   536,   123,   124,     0,   125,   126,
     127,   128,     0,   129,   130,   131,   132,   133,     0,   134,
     135,   136,   137,   537,   139,   140,   141,   142,   538,   539,
     144,     0,   145,   146,   147,   540,   149,     0,   150,     0,
     151,   152,   541,     0,   542,   153,   154,   155,   156,     0,
     157,   158,     0,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   543,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   544,   180,
     181,   182,   183,   184,   545,   546,     0,   547,     0,   188,
     548,   549,   189,   550,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,     0,     0,   208,   209,   551,   210,   552,     0,
     211,   212,   213,     0,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   553,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   554,   246,
     247,   555,   248,   556,   249,   250,   557,   252,   253,   254,
     255,     0,   256,   257,   258,     0,     0,   259,   260,   261,
       0,     0,   262,   263,   264,   558,   265,   559,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,   291,   292,   293,   294,   295,
       0,   296,   297,   560,   299,   300,   301,     0,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,   315,   316,   561,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   333,   334,   335,   336,   337,     0,   338,   339,
     340,   341,   342,   562,   343,   344,   563,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   564,   360,   361,   565,   363,     0,   364,   365,     0,
       0,   366,   566,   367,   368,   369,   370,   371,   567,     0,
     373,   374,   568,     0,     0,   376,   377,   378,   379,   380,
     569,   381,   382,   383,   384,   385,   386,   387,   388,   389,
       0,     0,   390,   391,   392,   393,   394,     0,     0,   395,
     396,   397,   398,   399,   400,   570,   987,   402,   571,   403,
     404,   405,   406,   407,     0,     0,   408,     0,     0,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   512,
       0,   513,     0,   514,   515,     0,     0,     0,   516,     0,
       0,     0,     0,     0,     0,     0,   517,     0,   518,   519,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,   520,     0,     0,     0,     0,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,    46,
      47,    48,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    51,     0,    52,    53,    54,    55,   521,    56,    57,
      58,    59,   522,   523,    61,   524,     0,    63,    64,    65,
      66,    67,    68,    69,   525,   526,    70,    71,   527,   528,
      74,     0,    75,    76,    77,    78,    79,     0,   529,     0,
      80,    81,    82,    83,    84,    85,   530,    86,    87,    88,
      89,     0,    90,    91,    92,    93,    94,    95,     0,   531,
      96,    97,    98,     0,     0,     0,   532,     0,     0,     0,
      99,   100,   101,   102,   103,   104,   533,   534,   107,     0,
     108,   535,     0,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,     0,     0,   120,   121,   536,
     123,   124,     0,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,   134,   135,   136,   137,   537,   139,
     140,   141,   142,   538,   539,   144,     0,   145,   146,   147,
     540,   149,     0,   150,     0,   151,   152,   541,     0,   542,
     153,   154,   155,   156,     0,   157,   158,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   543,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   544,   180,   181,   182,   183,   184,   545,
     546,     0,   547,     0,   188,   548,   549,   189,   550,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,     0,     0,   208,
     209,   551,   210,   552,     0,   211,   212,   213,     0,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     553,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   554,   246,   247,   555,   248,   556,   249,
     250,   557,   252,   253,   254,   255,     0,   256,   257,   258,
       0,     0,   259,   260,   261,     0,     0,   262,   263,   264,
     558,   265,   559,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,     0,   296,   297,   560,   299,
     300,   301,     0,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,   316,   561,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   333,   334,   335,
     336,   337,     0,   338,   339,   340,   341,   342,   562,   343,
     344,   563,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   564,   360,   361,   565,
     363,     0,   364,   365,     0,     0,   366,   566,   367,   368,
     369,   370,   371,   567,     0,   373,   374,   568,     0,     0,
     376,   377,   378,   379,   380,   569,   381,   382,   383,   384,
     385,   386,   387,   388,   389,     0,     0,   390,   391,   392,
     393,   394,     0,     0,   395,   396,   397,   398,   399,   400,
     570,     0,   402,   571,   403,   404,   405,   406,   407,     0,
       0,   408,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   512,     0,   513,     0,   514,   515,
       0,     0,     0,   516,     0,     0,     0,     0,     0,     0,
       0,   517,     0,     0,   519,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,   520,
       0,     0,     0,     0,    37,    38,    39,    40,    41,    42,
      43,    44,    45,   855,    46,    47,    48,     0,     0,     0,
       0,     0,     0,     0,    49,    50,    51,     0,    52,    53,
      54,    55,   521,    56,    57,    58,    59,   522,   523,    61,
     524,     0,    63,    64,    65,    66,    67,    68,    69,   525,
     526,    70,    71,   527,   528,    74,     0,    75,    76,    77,
      78,    79,     0,   529,     0,    80,    81,    82,    83,    84,
      85,   530,    86,    87,    88,    89,     0,    90,    91,    92,
      93,    94,    95,     0,   531,    96,    97,    98,     0,     0,
       0,   532,     0,     0,     0,    99,   100,   101,   102,   103,
     104,   533,   534,   107,     0,   108,   535,     0,   109,   110,
     111,   112,   113,   114,   115,     0,   116,   117,   118,   119,
       0,     0,   120,   121,   536,   123,   124,     0,   125,   126,
     127,   128,     0,   129,   130,   131,   132,   133,     0,   134,
     135,   136,   137,   537,   139,   140,   141,   142,   538,   539,
     144,     0,   145,   146,   147,   540,   149,     0,   150,     0,
     151,   152,   541,     0,   542,   153,   154,   155,   156,     0,
     157,   158,     0,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   543,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   544,   180,
     181,   182,   183,   184,   545,   546,     0,   547,     0,   188,
     548,   549,   189,   550,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,     0,     0,   208,   209,   551,   210,   552,     0,
     211,   212,   213,     0,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   553,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   554,   246,
     247,   555,   248,   556,   249,   250,   557,   252,   253,   254,
     255,     0,   256,   257,   258,     0,     0,   259,   260,   261,
       0,     0,   262,   263,   264,   558,   265,   559,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,   291,   292,   293,   294,   295,
       0,   296,   297,   560,   299,   300,   301,     0,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,   315,   316,   561,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   333,   334,   335,   336,   337,     0,   338,   339,
     340,   341,   342,   562,   343,   344,   563,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   564,   360,   361,   565,   363,     0,   364,   365,     0,
       0,   366,   566,   367,   368,   369,   370,   371,   567,     0,
     373,   374,   568,     0,     0,   376,   377,   378,   379,   380,
     569,   381,   382,   383,   384,   385,   386,   387,   388,   389,
       0,     0,   390,   391,   392,   393,   394,     0,     0,   395,
     396,   397,   398,   399,   400,   570,     0,   402,   571,   403,
     404,   405,   406,   407,     0,     0,   408,     0,     0,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   512,
       0,   513,     0,   514,   515,     0,     0,     0,   516,     0,
       0,     0,     0,     0,     0,     0,   517,     0,     0,   519,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,   520,     0,     0,     0,     0,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,    46,
      47,    48,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    51,     0,    52,    53,    54,    55,   521,    56,    57,
      58,    59,   522,   523,    61,   524,     0,    63,    64,    65,
      66,    67,    68,    69,   525,   526,    70,    71,   527,   528,
      74,     0,    75,    76,    77,    78,    79,     0,   529,     0,
      80,    81,    82,    83,    84,    85,   530,    86,    87,    88,
      89,     0,    90,    91,    92,    93,    94,    95,     0,   531,
      96,    97,    98,     0,     0,     0,   532,     0,     0,     0,
      99,   100,   101,   102,   103,   104,   533,   534,   107,     0,
     108,   535,     0,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,     0,     0,   120,   121,   536,
     123,   124,     0,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,   134,   135,   136,   137,   537,   139,
     140,   141,   142,   538,   539,   144,     0,   145,   146,   147,
     540,   149,     0,   150,     0,   151,   152,   541,     0,   542,
     153,   154,   155,   156,     0,   157,   158,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   543,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   544,   180,   181,   182,   183,   184,   545,
     546,     0,   547,     0,   188,   548,   549,   189,   550,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,     0,     0,   208,
     209,   551,   210,   552,     0,   211,   212,   213,     0,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     553,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   554,   246,   247,   555,   248,   556,   249,
     250,   557,   252,   253,   254,   255,     0,   256,   257,   258,
       0,     0,   259,   260,   261,     0,     0,   262,   263,   264,
     558,   265,   559,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,     0,   296,   297,   560,   299,
     300,   301,     0,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,   316,   561,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   333,   334,   335,
     336,   337,     0,   338,   339,   340,   341,   342,   562,   343,
     344,   563,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   564,   360,   361,   565,
     363,     0,   364,   365,     0,     0,   366,   566,   367,   368,
     369,   370,   371,   567,     0,   373,   374,   568,     0,     0,
     376,   377,   378,   379,   380,   569,   381,   382,   383,   384,
     385,   386,   387,   388,   389,     0,     0,   390,   391,   392,
     393,   394,     0,     0,   395,   396,   397,   398,   399,   400,
     570,  1149,   402,   571,   403,   404,   405,   406,   407,     0,
       0,   408,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   512,     0,   513,     0,   514,   515,
       0,     0,     0,   516,     0,     0,     0,     0,     0,     0,
       0,   517,     0,     0,   519,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,   520,
       0,     0,     0,     0,    37,    38,    39,    40,    41,    42,
      43,    44,    45,     0,    46,    47,    48,     0,     0,     0,
       0,     0,     0,     0,    49,    50,    51,     0,    52,    53,
      54,    55,   521,    56,    57,    58,    59,   522,   523,    61,
     524,     0,    63,    64,    65,    66,    67,    68,    69,   525,
     526,    70,    71,   527,   528,    74,     0,    75,    76,    77,
      78,    79,     0,   529,     0,    80,    81,    82,    83,    84,
      85,   530,    86,    87,    88,    89,     0,    90,    91,    92,
      93,    94,    95,     0,   531,    96,    97,    98,     0,     0,
       0,   532,     0,     0,     0,    99,   100,   101,   102,   103,
     104,   533,   534,   107,     0,   108,   535,     0,   109,   110,
     111,   112,   113,   114,   115,     0,   116,   117,   118,   119,
       0,     0,   120,   121,   536,   123,   124,     0,   125,   126,
     127,   128,     0,   129,   130,   131,   132,   133,     0,   134,
     135,   136,   137,   537,   139,   140,   141,   142,   538,   539,
     144,     0,   145,   146,   147,   540,   149,     0,   150,     0,
     151,   152,   541,     0,   542,   153,   154,   155,   156,     0,
     157,   158,     0,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   543,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   544,   180,
     181,   182,   183,   184,   545,   546,     0,   547,     0,   188,
     548,   549,   189,   550,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,     0,     0,   208,   209,   551,   210,   552,     0,
     211,   212,   213,     0,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   553,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   554,   246,
     247,   555,   248,   556,   249,   250,   557,   252,   253,   254,
     255,     0,   256,   257,   258,     0,     0,   259,   260,   261,
       0,     0,   262,   263,   264,   558,   265,   559,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,   291,   292,   293,   294,   295,
       0,   296,   297,   560,   299,   300,   301,     0,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,   315,   316,   561,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   333,   334,   335,   336,   337,     0,   338,   339,
     340,   341,   342,   562,   343,   344,   563,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   564,   360,   361,   565,   363,     0,   364,   365,     0,
       0,   366,   566,   367,   368,   369,   370,   371,   567,     0,
     373,   374,   568,     0,     0,   376,   377,   378,   379,   380,
     569,   381,   382,   383,   384,   385,   386,   387,   388,   389,
       0,     0,   390,   391,   392,   393,   394,     0,     0,   395,
     396,   397,   398,   399,   400,   570,     0,   402,   571,   403,
     404,   405,   406,   407,     0,     0,   408,     0,     0,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   512,
       0,   513,     0,   514,   515,     0,     0,     0,   516,     0,
       0,     0,     0,     0,     0,     0,   517,     0,     0,   519,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,   520,     0,     0,     0,     0,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,    46,
      47,    48,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    51,     0,    52,    53,    54,    55,   521,    56,    57,
      58,    59,   522,   523,    61,   524,     0,    63,    64,    65,
      66,    67,    68,    69,   525,   526,    70,    71,   527,   528,
      74,     0,    75,    76,    77,    78,    79,     0,   529,     0,
      80,    81,    82,    83,    84,    85,   530,    86,    87,    88,
      89,     0,    90,    91,    92,    93,    94,    95,     0,   531,
      96,    97,    98,     0,     0,     0,   532,     0,     0,     0,
      99,   100,   101,   102,   103,   104,   533,   534,   107,     0,
     108,   535,     0,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,     0,     0,   120,   121,   536,
     123,   124,     0,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,   134,   135,   136,   137,   774,   139,
     140,   141,   142,   538,   539,   144,     0,   145,   146,   147,
     540,   149,     0,   150,     0,   151,   152,   541,     0,   542,
     153,   154,   155,   156,     0,   157,   158,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   543,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   544,   180,   181,   182,   183,   184,   545,
     546,     0,   547,     0,   188,   548,   549,   189,   550,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,     0,     0,   208,
     209,   551,   210,   552,     0,   211,   212,   213,     0,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     553,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   554,   246,   247,   555,   248,   556,   249,
     250,   557,   252,   253,   254,   255,     0,   256,   257,   258,
       0,     0,   259,   260,   261,     0,     0,   262,   263,   264,
     558,   265,   559,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,     0,   296,   297,   560,   299,
     300,   301,     0,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,   316,   561,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   333,   334,   335,
     336,   337,     0,   338,   339,   340,   341,   342,   562,   343,
     344,   563,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   564,   360,   361,   565,
     363,     0,   364,   365,     0,     0,   366,   566,   367,   368,
     369,   370,   371,   567,     0,   373,   374,   568,     0,     0,
     376,   377,   378,   379,   380,   569,   381,   382,   383,   384,
     385,   386,   387,   388,   389,     0,     0,   390,   391,   392,
     393,   394,     0,     0,   395,   396,   397,   398,   399,   400,
     570,     0,   402,   571,   403,   404,   405,   406,   407,     0,
       0,   408,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   512,     0,   513,     0,   514,   515,
       0,     0,     0,  1155,     0,     0,     0,     0,     0,     0,
       0,   517,     0,     0,   519,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,   520,
       0,     0,     0,     0,    37,    38,    39,    40,    41,    42,
      43,    44,    45,     0,    46,    47,    48,     0,     0,     0,
       0,     0,     0,     0,    49,    50,    51,     0,    52,    53,
      54,    55,   521,    56,    57,    58,    59,   522,   523,    61,
     524,     0,    63,    64,    65,    66,    67,    68,    69,   525,
     526,    70,    71,   527,   528,    74,     0,    75,    76,    77,
      78,    79,     0,   529,     0,    80,    81,    82,    83,    84,
      85,   530,    86,    87,    88,    89,     0,    90,    91,    92,
      93,    94,    95,     0,   531,    96,    97,    98,     0,     0,
       0,   532,     0,     0,     0,    99,   100,   101,   102,   103,
     104,   533,   534,   107,     0,   108,   535,     0,   109,   110,
     111,   112,   113,   114,   115,     0,   116,   117,   118,   119,
       0,     0,   120,   121,   536,   123,   124,     0,   125,   126,
     127,   128,     0,   129,   130,   131,   132,   133,     0,   134,
     135,   136,   137,   537,   139,   140,   141,   142,   538,   539,
     144,     0,   145,   146,   147,   540,   149,     0,   150,     0,
     151,   152,   541,     0,   542,   153,   154,   155,   156,     0,
     157,   158,     0,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   543,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   544,   180,
     181,   182,   183,   184,   545,   546,     0,   547,     0,   188,
     548,   549,   189,   550,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,     0,     0,   208,   209,   551,   210,   552,     0,
     211,   212,   213,     0,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   553,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   554,   246,
     247,   555,   248,   556,   249,   250,   557,   252,   253,   254,
     255,     0,   256,   257,   258,     0,     0,   259,   260,   261,
       0,     0,   262,   263,   264,   558,   265,   559,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,   291,   292,   293,   294,   295,
       0,   296,   297,   560,   299,   300,   301,     0,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,   315,   316,   561,   317,   318,  1156,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   333,   334,   335,   336,   337,     0,   338,   339,
     340,   341,   342,   562,   343,   344,   563,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   564,   360,   361,   565,   363,     0,   364,   365,     0,
       0,   366,   566,   367,   368,   369,   370,   371,   567,     0,
     373,   374,   568,     0,     0,   376,   377,   378,   379,   380,
     569,   381,   382,   383,   384,   385,   386,   387,   388,   389,
       0,     0,   390,   391,   392,   393,   394,     0,     0,   395,
     396,   397,   398,   399,   400,   570,     0,   402,   571,   403,
     404,   405,   406,   407,     0,     0,   408,     0,     0,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   512,
       0,   513,     0,   514,   515,     0,     0,     0,  1155,     0,
       0,     0,     0,     0,     0,     0,   517,     0,     0,   519,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,   520,     0,     0,     0,     0,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,    46,
      47,    48,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    51,     0,    52,    53,    54,    55,   521,    56,    57,
      58,    59,   522,   523,    61,   524,     0,    63,    64,    65,
      66,    67,    68,    69,   525,   526,    70,    71,   527,   528,
      74,     0,    75,    76,    77,    78,    79,     0,   529,     0,
      80,    81,    82,    83,    84,    85,   530,    86,    87,    88,
      89,     0,    90,    91,    92,    93,    94,    95,     0,   531,
      96,    97,    98,     0,     0,     0,   532,     0,     0,     0,
      99,   100,   101,   102,   103,   104,   533,   534,   107,     0,
     108,   535,     0,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,     0,     0,   120,   121,   536,
     123,   124,     0,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,   134,   135,   136,   137,   537,   139,
     140,   141,   142,   538,   539,   144,     0,   145,   146,   147,
     540,   149,     0,   150,     0,   151,   152,   541,     0,   542,
     153,   154,   155,   156,     0,   157,   158,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   543,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   544,   180,   181,   182,   183,   184,   545,
     546,     0,   547,     0,   188,   548,   549,   189,   550,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,     0,     0,   208,
     209,   551,   210,   552,     0,   211,   212,   213,     0,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     553,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   554,   246,   247,   555,   248,   556,   249,
     250,   557,   252,   253,   254,   255,     0,   256,   257,   258,
       0,     0,   259,   260,   261,     0,     0,   262,   263,   264,
     558,   265,   559,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,     0,   296,   297,   560,   299,
     300,   301,     0,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,   316,   561,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   333,   334,   335,
     336,   337,     0,   338,   339,   340,   341,   342,   562,   343,
     344,   563,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   564,   360,   361,   565,
     363,     0,   364,   365,     0,     0,   366,   566,   367,   368,
     369,   370,   371,   567,     0,   373,   374,   568,     0,     0,
     376,   377,   378,   379,   380,   569,   381,   382,   383,   384,
     385,   386,   387,   388,   389,     0,     0,   390,   391,   392,
     393,   394,     0,     0,   395,   396,   397,   398,   399,   400,
     570,     0,   402,   571,   403,   404,   405,   406,   407,     0,
       0,   408,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   512,     0,   513,     0,   514,   515,
       0,     0,     0,   516,     0,     0,     0,     0,     0,     0,
       0,   517,     0,     0,   519,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,   520,
       0,     0,     0,     0,    37,    38,    39,    40,    41,    42,
      43,    44,    45,     0,    46,    47,    48,     0,     0,     0,
       0,     0,     0,     0,    49,    50,    51,     0,    52,    53,
      54,    55,   521,    56,    57,    58,  1228,   522,   523,    61,
     524,     0,    63,    64,    65,    66,    67,    68,    69,   525,
     526,    70,    71,   527,   528,    74,     0,    75,    76,    77,
      78,    79,     0,   529,     0,    80,    81,    82,    83,    84,
      85,   530,    86,    87,    88,    89,     0,    90,    91,    92,
      93,    94,    95,     0,   531,    96,    97,  1229,     0,     0,
       0,   532,     0,     0,     0,    99,   100,   101,   102,   103,
     104,   533,   534,   107,     0,   108,   535,     0,   109,   110,
     111,   112,   113,   114,   115,     0,   116,   117,   118,   119,
       0,     0,   120,   121,   536,   123,   124,     0,   125,   126,
     127,   128,     0,   129,   130,   131,   132,   133,     0,   134,
     135,   136,   137,   537,   139,   140,   141,   142,   538,   539,
     144,     0,   145,   146,   147,   540,   149,     0,   150,     0,
     151,   152,   541,     0,   542,   153,   154,   155,   156,     0,
     157,   158,     0,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   543,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   544,   180,
     181,   182,   183,   184,   545,   546,     0,   547,     0,   188,
     548,   549,   189,   550,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,     0,     0,   208,   209,   551,   210,   552,     0,
     211,   212,   213,     0,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   553,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   554,   246,
     247,   555,   248,   556,   249,   250,   557,   252,   253,   254,
     255,     0,   256,   257,   258,     0,     0,   259,   260,   261,
       0,     0,   262,   263,   264,   558,   265,   559,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,   291,   292,   293,   294,   295,
       0,   296,   297,   560,   299,   300,   301,     0,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,   315,   316,   561,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   333,   334,   335,   336,   337,     0,   338,   339,
     340,   341,   342,   562,   343,   344,   563,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   564,   360,   361,   565,   363,     0,   364,   365,     0,
       0,   366,   566,   367,   368,   369,   370,   371,   567,     0,
     373,   374,   568,     0,     0,   376,   377,   378,   379,   380,
     569,   381,   382,   383,   384,   385,  1230,   387,   388,   389,
       0,     0,   390,   391,   392,   393,   394,     0,     0,   395,
     396,   397,   398,   399,   400,   570,     0,   402,   571,   403,
     404,   405,   406,   407,     0,     0,   408,     0,     0,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   512,
       0,   513,     0,   514,   515,     0,     0,     0,   516,     0,
       0,     0,     0,     0,     0,     0,   517,     0,     0,   519,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,   520,     0,     0,     0,     0,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,    46,
      47,    48,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    51,     0,    52,    53,    54,    55,   521,    56,    57,
      58,    59,   522,   523,    61,   524,     0,    63,    64,    65,
      66,    67,    68,    69,   525,   526,    70,    71,   527,   528,
      74,     0,    75,    76,    77,    78,    79,     0,   529,     0,
      80,    81,    82,    83,    84,    85,   530,    86,    87,    88,
      89,     0,    90,    91,    92,    93,    94,    95,     0,   531,
      96,    97,  1229,     0,     0,     0,   532,     0,     0,     0,
      99,   100,   101,   102,   103,   104,   533,   534,   107,     0,
     108,   535,     0,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,     0,     0,   120,   121,   536,
     123,   124,     0,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,   134,   135,   136,   137,   537,   139,
     140,   141,   142,   538,   539,   144,     0,   145,   146,   147,
     540,   149,     0,   150,     0,   151,   152,   541,     0,   542,
     153,   154,   155,   156,     0,   157,   158,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   543,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   544,   180,   181,   182,   183,   184,   545,
     546,     0,   547,     0,   188,   548,   549,   189,   550,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,     0,     0,   208,
     209,   551,   210,   552,     0,   211,   212,   213,     0,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     553,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   554,   246,   247,   555,   248,   556,   249,
     250,   557,   252,   253,   254,   255,     0,   256,   257,   258,
       0,     0,   259,   260,   261,     0,     0,   262,   263,   264,
     558,   265,   559,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,     0,   296,   297,   560,   299,
     300,   301,     0,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,   316,   561,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   333,   334,   335,
     336,   337,     0,   338,   339,   340,   341,   342,   562,   343,
     344,   563,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   564,   360,   361,   565,
     363,     0,   364,   365,     0,     0,   366,   566,   367,   368,
     369,   370,   371,   567,     0,   373,   374,   568,     0,     0,
     376,   377,   378,   379,   380,   569,   381,   382,   383,   384,
     385,  1230,   387,   388,   389,     0,     0,   390,   391,   392,
     393,   394,     0,     0,   395,   396,   397,   398,   399,   400,
     570,     0,   402,   571,   403,   404,   405,   406,   407,     0,
       0,   408,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   512,     0,   513,     0,   514,   515,
       0,     0,     0,   516,     0,     0,     0,     0,     0,     0,
       0,   517,     0,     0,   519,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,    38,    39,    40,    41,    42,
      43,    44,    45,     0,    46,    47,    48,     0,     0,     0,
       0,     0,     0,     0,    49,    50,    51,     0,    52,    53,
      54,    55,   521,    56,    57,    58,    59,   522,   523,    61,
     524,     0,    63,    64,    65,    66,    67,    68,    69,   525,
     526,    70,    71,   527,   528,    74,     0,    75,    76,    77,
      78,    79,     0,   529,     0,    80,    81,    82,    83,    84,
      85,   530,    86,    87,    88,    89,     0,    90,    91,    92,
      93,    94,    95,     0,   531,    96,    97,    98,     0,     0,
       0,   532,     0,     0,     0,    99,   100,   101,   102,   103,
     104,   533,   534,   107,     0,   108,   535,     0,   109,   110,
     111,   112,   113,   114,   115,     0,   116,   117,   118,   119,
       0,     0,   120,   121,   536,   123,   124,     0,   125,   126,
     127,   128,     0,   129,   130,   131,   132,   133,     0,   134,
     135,   136,   137,   537,   139,   140,   141,   142,   538,   539,
     144,     0,   145,   146,   147,   540,   149,     0,   150,     0,
     151,   152,   541,     0,   542,   153,   154,   155,   156,     0,
     157,   158,     0,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   543,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   544,   180,
     181,   182,   183,   184,   545,   546,     0,   547,     0,   188,
     548,   549,   189,   550,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,     0,     0,   208,   209,   551,   210,   552,     0,
     211,   212,   213,     0,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   553,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,  1071,   246,
     247,   555,   248,   556,   249,   250,   557,   252,   253,   254,
     255,     0,   256,   257,   258,     0,     0,   259,   260,   261,
       0,     0,   262,   263,   264,   558,   265,   559,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,   291,   292,   293,   294,   295,
       0,   296,   297,   560,   299,   300,   301,     0,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,   315,   316,   561,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   333,   334,   335,   336,   337,     0,   338,   339,
     340,   341,   342,   562,   343,   344,   563,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   564,   360,   361,   565,   363,     0,   364,   365,     0,
       0,   366,   566,   367,   368,   369,   370,   371,   567,     0,
     373,   374,   568,     0,     0,   376,   377,   378,   379,   380,
     569,   381,   382,   383,   384,   385,   386,   387,   388,   389,
       0,     0,   390,   391,   392,   393,   394,     0,     0,   395,
     396,   397,   398,   399,   400,   570,     0,   402,   571,   403,
     404,   405,   406,   407,     0,     0,   408,     0,     0,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   512,
       0,   513,     0,   514,   515,     0,     0,     0,   516,     0,
       0,     0,     0,     0,     0,     0,   517,     0,     0,   519,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,   520,     0,     0,     0,     0,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,    46,
      47,    48,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    51,     0,    52,    53,    54,    55,   521,    56,    57,
      58,  -936,   522,   523,    61,   524,     0,    63,    64,    65,
      66,    67,    68,    69,   525,   526,    70,    71,   527,   528,
      74,     0,    75,    76,    77,    78,    79,     0,   529,     0,
      80,    81,    82,    83,    84,    85,   530,    86,    87,    88,
      89,     0,    90,    91,    92,    93,    94,    95,     0,   531,
      96,    97,  1229,     0,     0,     0,   532,     0,     0,     0,
      99,   100,   101,   102,   103,   104,   533,   534,   107,     0,
     108,   535,     0,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,     0,     0,   120,   121,   536,
     123,   124,     0,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,   134,   135,   136,   137,   537,   139,
     140,   141,   142,   538,   539,   144,     0,   145,   146,   147,
     540,   149,     0,   150,     0,   151,   152,   541,     0,   542,
     153,   154,   155,   156,     0,   157,   158,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   543,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   544,   180,   181,   182,   183,   184,   545,
     546,     0,   547,     0,   188,     0,   549,   189,   550,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,     0,     0,   208,
     209,   551,   210,  -936,     0,   211,   212,   213,     0,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     553,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,     0,   246,   247,   555,   248,   556,   249,
     250,   557,   252,   253,   254,   255,     0,   256,   257,   258,
       0,     0,   259,   260,   261,     0,     0,   262,   263,   264,
     558,   265,   559,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,     0,   296,   297,   560,   299,
     300,   301,     0,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,   316,   561,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   333,   334,   335,
     336,   337,     0,   338,   339,   340,   341,   342,   562,   343,
     344,   563,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   564,   360,   361,   565,
     363,     0,   364,   365,     0,     0,   366,   566,   367,   368,
     369,   370,   371,   567,     0,   373,   374,   568,     0,     0,
     376,   377,   378,   379,   380,   569,   381,   382,   383,   384,
     385,  1230,   387,   388,   389,     0,     0,   390,   391,   392,
     393,   394,     0,     0,   395,   396,   397,   398,   399,   400,
     570,     0,   402,   571,   403,   404,   405,   406,   407,     0,
       0,   408,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   512,     0,   513,   817,     0,   515,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   517,     0,     0,   519,     0,     0,     0,     0,     0,
       0,     0,    36,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,    38,    39,    40,    41,    42,
      43,    44,    45,     0,    46,    47,    48,     0,     0,     0,
       0,     0,     0,     0,    49,    50,    51,     0,    52,    53,
      54,    55,   521,    56,    57,    58,    59,    60,   523,    61,
      62,     0,    63,    64,    65,    66,    67,    68,    69,     0,
       0,    70,    71,    72,    73,    74,     0,    75,    76,    77,
      78,    79,     0,   529,     0,    80,    81,    82,    83,    84,
      85,   530,    86,    87,    88,    89,     0,    90,    91,    92,
      93,    94,    95,     0,   531,    96,    97,    98,     0,     0,
       0,   532,     0,     0,     0,    99,   100,   101,   102,   103,
     104,   105,   106,   107,     0,   108,     0,     0,   109,   110,
     111,   112,   113,   114,   115,     0,   116,   117,   118,   119,
       0,     0,   120,   121,   122,   123,   124,     0,   125,   126,
     127,   128,     0,   129,   130,   131,   132,   133,     0,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   818,
     144,     0,   145,   146,   147,   148,   149,     0,   150,     0,
     151,   152,   541,     0,   542,   153,   154,   155,   156,     0,
     157,   158,     0,   159,   160,   161,     0,   162,   163,   164,
     165,   166,   543,   167,   168,   169,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,     0,   179,   544,   180,
     181,   182,   183,   184,   185,   186,     0,   187,     0,   188,
     548,   549,   189,   550,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,     0,     0,   208,   209,   551,   210,   552,     0,
     211,   212,   213,     0,     0,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   553,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,     0,   246,
     247,   555,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   819,     0,   259,   260,   261,
       0,     0,   262,   263,   264,   558,   265,   559,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,   280,   281,   282,   283,   284,   285,   286,
     287,     0,   288,   289,   290,   291,   292,   293,   294,   295,
       0,   296,   297,   298,   299,   300,   301,     0,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,     0,   315,   316,   561,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,     0,   333,   334,   335,   336,   337,     0,   338,   339,
     340,   341,   342,   562,   343,   344,   345,   346,     0,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,     0,   364,   365,     0,
       0,   366,   566,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,     0,     0,   376,   377,   378,   379,   380,
     820,   381,   382,   383,   384,   385,   386,   387,   388,   389,
       0,     0,   390,   391,   392,   393,   394,     0,     0,   395,
     396,   397,   398,   399,   400,   401,     0,   402,   571,   403,
     404,   405,   406,   407,     0,     0,   408,     0,     0,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    35,
       0,     0,     0,     0,   436,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,    38,    39,    40,    41,
      42,    43,    44,    45,     0,    46,    47,    48,     0,     0,
       0,     0,     0,     0,     0,    49,    50,    51,     0,    52,
      53,    54,    55,     0,    56,    57,    58,    59,    60,     0,
      61,    62,     0,    63,    64,    65,    66,    67,    68,    69,
       0,     0,    70,    71,    72,    73,    74,     0,    75,    76,
      77,    78,    79,     0,     0,     0,    80,    81,    82,    83,
      84,    85,     0,    86,    87,    88,    89,     0,    90,    91,
      92,    93,    94,    95,     0,     0,    96,    97,    98,     0,
       0,     0,     0,     0,     0,     0,    99,   100,   101,   102,
     103,   104,   105,   106,   107,     0,   108,     0,     0,   109,
     110,   111,   112,   113,   114,   115,     0,   116,   117,   118,
     119,     0,     0,   120,   121,   122,   123,   124,     0,   125,
     126,   127,   128,     0,   129,   130,   131,   132,   133,     0,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
       0,   144,     0,   145,   146,   147,   148,   149,     0,   150,
       0,   151,   152,     0,     0,     0,   153,   154,   155,   156,
       0,   157,   158,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,     0,   179,     0,
     180,   181,   182,   183,   184,   185,   186,     0,   187,     0,
     188,     0,     0,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,     0,     0,   208,   209,     0,   210,     0,
       0,   211,   212,   213,     0,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,     0,
     246,   247,     0,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,     0,   437,   259,   260,
     261,     0,     0,   262,   263,   264,     0,   265,     0,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,   280,   281,   282,   283,   284,   285,
     286,   287,     0,   288,   289,   290,   291,   292,   293,   294,
     295,     0,   296,   297,   298,   299,   300,   301,     0,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     6,   333,   334,   335,   336,   337,     0,   338,
     339,   340,   341,   342,     0,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,     0,   364,   365,
       0,     0,   366,     0,   367,   368,   369,   370,   371,   372,
       0,   373,   374,   375,     0,     0,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,     0,     0,   390,   391,   392,   393,   394,     0,     0,
     395,   396,   397,   398,   399,   488,   401,     0,   402,     0,
     403,   404,   405,   406,   407,     0,     0,   408,     0,     9,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      35,     0,     0,    10,     0,   472,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,    38,    39,    40,
      41,    42,    43,    44,    45,     0,    46,    47,    48,     0,
       0,     0,     0,     0,     0,     0,    49,    50,    51,     0,
      52,    53,    54,    55,     0,    56,    57,    58,    59,    60,
       0,    61,    62,     0,    63,    64,    65,    66,    67,    68,
      69,     0,     0,    70,    71,    72,    73,    74,     0,    75,
      76,    77,    78,    79,     0,     0,     0,    80,    81,    82,
      83,    84,    85,     0,    86,    87,    88,    89,     0,    90,
      91,    92,    93,    94,    95,     0,     0,    96,    97,    98,
       0,     0,     0,     0,     0,     0,     0,    99,   100,   101,
     102,   103,   104,   105,   106,   107,     0,   108,     0,     0,
     109,   110,   111,   112,   113,   114,   115,     0,   116,   117,
     118,   119,     0,     0,   120,   121,   122,   123,   124,     0,
     125,   126,   127,   128,     0,   129,   130,   131,   132,   133,
       0,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,     0,   144,     0,   145,   146,   147,   148,   149,     0,
     150,     0,   151,   152,     0,     0,     0,   153,   154,   155,
     156,     0,   157,   158,     0,   159,   160,   161,     0,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,     0,     0,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,     0,     0,   208,   209,     0,   210,
       0,     0,   211,   212,   213,     0,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,     0,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
       0,   246,   247,     0,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,     0,     0,   259,
     260,   261,     0,     0,   262,   263,   264,     0,   265,     0,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,   288,   289,   290,   291,   292,   293,
     294,   295,     0,   296,   297,   298,   299,   300,   301,     0,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     6,   333,   334,   335,   336,   337,     0,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,     0,   364,
     365,     0,     0,   366,     0,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,     0,     0,   390,   391,   392,   393,   394,     0,
       0,   395,   396,   397,   398,   399,   488,   401,     0,   402,
       0,   403,   404,   405,   406,   407,     0,     0,   408,     0,
       9,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   653,     0,     0,    10,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   654,     0,     0,     0,
       0,     0,     0,     0,     0,    36,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    37,    38,    39,
      40,    41,    42,    43,    44,    45,   655,    46,    47,    48,
     656,   657,   658,   659,   660,   661,   662,    49,    50,    51,
     663,    52,    53,    54,    55,     0,    56,    57,    58,    59,
      60,     0,    61,    62,   664,    63,    64,    65,    66,    67,
      68,    69,   665,   666,    70,    71,    72,    73,    74,   667,
      75,    76,    77,    78,    79,   668,     0,   669,    80,    81,
      82,    83,    84,    85,     0,    86,    87,    88,    89,   670,
      90,    91,    92,    93,    94,    95,   671,     0,    96,    97,
      98,   672,   673,   674,     0,   675,   676,   677,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   678,   108,     0,
     679,   109,   110,   111,   112,   113,   114,   115,   680,   116,
     117,   118,   119,   681,   682,   120,   121,   122,   123,   124,
     683,   125,   126,   127,   128,   684,   129,   130,   131,   132,
     133,   685,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   686,   144,   687,   145,   146,   147,   148,   149,
     688,   150,   689,   151,   152,     0,   690,     0,   153,   154,
     155,   156,   691,   157,   158,   692,   159,   160,   161,   693,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     694,   171,   172,   173,   174,   175,   176,   177,   178,   695,
     179,     0,   180,   181,   182,   183,   184,   185,   186,   696,
     187,   697,   188,     0,     0,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   698,   699,   208,   209,     0,
     210,     0,   700,   211,   212,   213,   701,   702,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   703,   246,   247,     0,   248,   704,   249,   250,   251,
     252,   253,   254,   255,   705,   256,   257,   258,   706,   707,
     259,   260,   261,   708,   709,   262,   263,   264,     0,   265,
       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   710,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   711,   288,   289,   290,   291,   292,
     293,   294,   295,     0,   296,   297,   298,   299,   300,   301,
     712,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   713,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   714,   333,   334,   335,   336,   337,
     715,   338,   339,   340,   341,   342,     0,   343,   344,   345,
     346,   716,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   717,
     364,   365,   718,   719,   366,     0,   367,   368,   369,   370,
     371,   372,   720,   373,   374,   375,   721,   722,   376,   377,
     378,   379,   380,   723,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   724,   725,   390,   391,   392,   393,   394,
     726,   727,   395,   396,   397,   398,   399,   400,   401,   728,
     402,     0,   403,   404,   405,   406,   407,   729,   730,   408,
     731,   732,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   653,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    37,    38,
      39,    40,    41,    42,    43,    44,    45,   655,    46,    47,
      48,   656,   657,   658,   659,   660,   661,   662,    49,    50,
      51,   663,    52,    53,    54,    55,     0,    56,    57,    58,
      59,    60,     0,    61,    62,   664,    63,    64,    65,    66,
      67,    68,    69,   665,   666,    70,    71,    72,    73,    74,
     667,    75,    76,    77,    78,    79,   668,     0,   669,    80,
      81,    82,    83,    84,    85,     0,    86,    87,    88,    89,
     670,    90,    91,    92,    93,    94,    95,   671,     0,    96,
      97,    98,   672,   673,   674,     0,   675,   676,   677,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   678,   108,
       0,   679,   109,   110,   111,   112,   113,   114,   115,   680,
     116,   117,   118,   119,   681,   682,   120,   121,   122,   123,
     124,   683,   125,   126,   127,   128,   684,   129,   130,   131,
     132,   133,   685,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   686,   144,   687,   145,   146,   147,   148,
     149,   688,   150,   689,   151,   152,     0,   690,     0,   153,
     154,   155,   156,   691,   157,   158,   692,   159,   160,   161,
     693,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   694,   171,   172,   173,   174,   175,   176,   177,   178,
     695,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     696,   187,   697,   188,     0,     0,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,   698,   699,   208,   209,
       0,   210,     0,   700,   211,   212,   213,   701,   702,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   703,   246,   247,     0,   248,   704,   249,   250,
     251,   252,   253,   254,   255,   705,   256,   257,   258,   706,
     707,   259,   260,   261,   708,   709,   262,   263,   264,     0,
     265,     0,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   710,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   711,   288,   289,   290,   291,
     292,   293,   294,   295,     0,   296,   297,   298,   299,   300,
     301,   712,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   713,   315,   316,     0,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   714,   333,   334,   335,   336,
     337,   715,   338,   339,   340,   341,   342,     0,   343,   344,
     345,   346,   716,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     717,   364,   365,   718,   719,   366,     0,   367,   368,   369,
     370,   371,   372,   720,   373,   374,   375,   721,   722,   376,
     377,   378,   379,   380,   723,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   724,   725,   390,   391,   392,   393,
     394,   726,   727,   395,   396,   397,   398,   399,   400,   401,
     728,   402,     0,   403,   404,   405,   406,   407,   729,   730,
     408,   731,   732,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   514,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,    46,
      47,    48,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    51,     0,    52,    53,    54,    55,   521,    56,    57,
      58,    59,    60,   523,    61,    62,     0,    63,    64,    65,
      66,    67,    68,    69,     0,     0,    70,    71,    72,    73,
      74,     0,    75,    76,    77,    78,    79,     0,   529,     0,
      80,    81,    82,    83,    84,    85,   530,    86,    87,    88,
      89,     0,    90,    91,    92,    93,    94,    95,     0,   531,
      96,    97,    98,     0,     0,     0,   532,     0,     0,     0,
      99,   100,   101,   102,   103,   104,   105,   106,   107,     0,
     108,   840,     0,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,     0,     0,   120,   121,   122,
     123,   124,     0,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   538,     0,   144,     0,   145,   146,   147,
     148,   149,     0,   150,     0,   151,   152,   541,     0,   542,
     153,   154,   155,   156,     0,   157,   158,   841,   159,   160,
     161,     0,   162,   163,   164,   165,   166,   543,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,   179,   544,   180,   181,   182,   183,   184,   185,
     186,     0,   187,     0,   188,   548,   549,   189,   550,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,     0,     0,   208,
     209,   551,   210,   552,     0,   211,   212,   213,     0,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     553,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,     0,   246,   247,   555,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   257,   258,
       0,     0,   259,   260,   261,     0,     0,   262,   263,   264,
     558,   265,   559,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,     0,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,   316,   561,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   333,   334,   335,
     336,   337,     0,   338,   339,   340,   341,   342,   562,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   565,
     363,     0,   364,   365,     0,     0,   366,   566,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,     0,     0,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,     0,     0,   390,   391,   392,
     393,   394,     0,     0,   395,   396,   397,   398,   399,   400,
     401,     0,   402,   571,   403,   404,   405,   406,   407,     0,
     514,   408,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,    36,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,    38,    39,    40,
      41,    42,    43,    44,    45,     0,    46,    47,    48,     0,
       0,     0,     0,     0,     0,     0,    49,    50,    51,     0,
      52,    53,    54,    55,   521,    56,    57,    58,    59,    60,
     523,    61,    62,     0,    63,    64,    65,    66,    67,    68,
      69,     0,     0,    70,    71,    72,    73,    74,     0,    75,
      76,    77,    78,    79,     0,   529,     0,    80,    81,    82,
      83,    84,    85,   530,    86,    87,    88,    89,     0,    90,
      91,    92,    93,    94,    95,     0,   531,    96,    97,    98,
       0,     0,     0,   532,     0,     0,     0,    99,   100,   101,
     102,   103,   104,   105,   106,   107,     0,   108,   840,     0,
     109,   110,   111,   112,   113,   114,   115,     0,   116,   117,
     118,   119,     0,     0,   120,   121,   122,   123,   124,     0,
     125,   126,   127,   128,     0,   129,   130,   131,   132,   133,
       0,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     538,     0,   144,     0,   145,   146,   147,   148,   149,     0,
     150,     0,   151,   152,   541,     0,   542,   153,   154,   155,
     156,     0,   157,   158,     0,   159,   160,   161,     0,   162,
     163,   164,   165,   166,   543,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
     544,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,   548,   549,   189,   550,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,   207,     0,     0,   208,   209,   551,   210,
     552,     0,   211,   212,   213,     0,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   553,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
       0,   246,   247,   555,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,     0,     0,   259,
     260,   261,     0,     0,   262,   263,   264,   558,   265,   559,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,   288,   289,   290,   291,   292,   293,
     294,   295,     0,   296,   297,   298,   299,   300,   301,     0,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,     0,   315,   316,   561,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,     0,   333,   334,   335,   336,   337,     0,
     338,   339,   340,   341,   342,   562,   343,   344,   345,   346,
       0,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   565,   363,     0,   364,
     365,     0,     0,   366,   566,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,     0,     0,   390,   391,   392,   393,   394,     0,
       0,   395,   396,   397,   398,   399,   400,   401,     0,   402,
     571,   403,   404,   405,   406,   407,     0,     0,   408,     0,
       0,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,    35,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   779,  -262,     0,   780,   781,   782,   783,   784,   785,
     786,   787,   788,   789,   790,    36,     0,     0,     0,     0,
       0,     0,   520,     0,   791,     0,     0,    37,    38,    39,
      40,    41,    42,    43,    44,    45,     0,    46,    47,    48,
       0,     0,   792,     0,     0,   494,     0,    49,    50,    51,
       0,    52,    53,    54,    55,     0,    56,    57,    58,  1018,
      60,     0,    61,    62,     0,    63,    64,    65,    66,    67,
      68,    69,     0,     0,    70,    71,    72,    73,    74,     0,
      75,    76,    77,    78,    79,     0,     0,     0,    80,    81,
      82,    83,    84,    85,     0,    86,    87,    88,    89,     0,
      90,    91,    92,    93,    94,    95,     0,     0,    96,    97,
      98,     0,     0,     0,     0,     0,     0,     0,    99,   100,
     101,   102,   103,   104,   105,   106,   107,     0,   108,     0,
       0,   109,   110,   111,   112,   113,   114,   115,     0,   116,
     117,   118,   119,     0,     0,   120,   121,   122,   123,   124,
       0,   125,   126,   127,   128,     0,   129,   130,   131,   132,
     133,     0,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,     0,   144,     0,   145,   146,   147,   148,   149,
       0,   150,     0,   151,   152,     0,     0,     0,   153,   154,
     155,   156,     0,   157,   158,     0,   159,   160,   161,     0,
     162,   163,   164,   165,   166,     0,   167,   168,   169,   170,
     795,   171,   172,   173,   174,   175,   176,   177,   178,     0,
     179,     0,   180,   181,   182,   183,   184,   185,   186,     0,
     187,     0,   188,   796,     0,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,     0,     0,   208,   209,     0,
     210,   797,     0,   211,   212,   213,     0,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,     0,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   798,   246,   247,     0,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,     0,     0,
     259,   260,   261,   799,     0,   262,   263,   264,     0,   265,
       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,   280,   281,   282,   283,
     284,   285,   286,   287,     0,   288,   289,   290,   291,   292,
     293,   294,   295,     0,   296,   297,   298,   299,   300,   301,
       0,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,     0,   315,   316,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,     0,   333,   334,   335,   336,   337,
       0,   338,   339,   340,   341,   342,     0,   343,   344,   345,
     346,     0,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,     0,
     364,   365,     0,     0,   366,     0,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,     0,     0,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,     0,     0,   390,   391,   392,   393,   394,
       0,     0,   395,   396,   397,   398,   399,   400,   401,     0,
     402,     0,   403,   404,   405,   406,   407,     0,     0,   408,
       0,     0,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   779,  -263,     0,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,    36,     0,     0,     0,
       0,     0,     0,   520,     0,   791,     0,     0,    37,    38,
      39,    40,    41,    42,    43,    44,    45,     0,    46,    47,
      48,     0,     0,   792,     0,     0,   494,     0,    49,    50,
      51,     0,    52,    53,    54,    55,     0,    56,    57,    58,
    1018,    60,     0,    61,    62,     0,    63,    64,    65,    66,
      67,    68,    69,     0,     0,    70,    71,    72,    73,    74,
       0,    75,    76,    77,    78,    79,     0,     0,     0,    80,
      81,    82,    83,    84,    85,     0,    86,    87,    88,    89,
       0,    90,    91,    92,    93,    94,    95,     0,     0,    96,
      97,    98,     0,     0,     0,     0,     0,     0,     0,    99,
     100,   101,   102,   103,   104,   105,   106,   107,     0,   108,
       0,     0,   109,   110,   111,   112,   113,   114,   115,     0,
     116,   117,   118,   119,     0,     0,   120,   121,   122,   123,
     124,     0,   125,   126,   127,   128,     0,   129,   130,   131,
     132,   133,     0,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,     0,   144,     0,   145,   146,   147,   148,
     149,     0,   150,     0,   151,   152,     0,     0,     0,   153,
     154,   155,   156,     0,   157,   158,     0,   159,   160,   161,
       0,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,   795,   171,   172,   173,   174,   175,   176,   177,   178,
       0,   179,     0,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,   796,     0,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,     0,     0,   208,   209,
       0,   210,   797,     0,   211,   212,   213,     0,     0,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   798,   246,   247,     0,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,     0,
       0,   259,   260,   261,   799,     0,   262,   263,   264,     0,
     265,     0,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,     0,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,   288,   289,   290,   291,
     292,   293,   294,   295,     0,   296,   297,   298,   299,   300,
     301,     0,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,     0,   333,   334,   335,   336,
     337,     0,   338,   339,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
       0,   364,   365,     0,     0,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,     0,     0,   390,   391,   392,   393,
     394,     0,     0,   395,   396,   397,   398,   399,   400,   401,
       0,   402,     0,   403,   404,   405,   406,   407,     0,     0,
     408,     0,     0,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,    35,     0,     0,     0,     0,     0,   477,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,    46,
      47,    48,     0,     0,     0,     0,     0,   494,     0,    49,
      50,    51,     0,    52,    53,    54,    55,     0,    56,    57,
      58,    59,    60,     0,    61,    62,     0,    63,    64,    65,
      66,    67,    68,    69,     0,     0,    70,    71,    72,    73,
      74,     0,    75,    76,    77,    78,    79,     0,     0,     0,
      80,    81,    82,    83,    84,    85,     0,    86,    87,    88,
      89,     0,    90,    91,    92,    93,    94,    95,     0,     0,
      96,    97,    98,     0,     0,     0,     0,     0,     0,     0,
      99,   100,   101,   102,   103,   104,   105,   106,   107,     0,
     108,     0,     0,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,     0,     0,   120,   121,   122,
     123,   124,     0,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,   -37,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,     0,   144,     0,   145,   146,   147,
     148,   149,     0,   150,     0,   151,   152,     0,     0,     0,
     153,   154,   155,   156,     0,   157,   158,     0,   159,   160,
     161,     0,   162,   163,   164,   165,   166,     0,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,   179,     0,   180,   181,   182,   183,   184,   185,
     186,   -37,   187,     0,   188,     0,     0,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,     0,     0,   208,
     209,     0,   210,     0,   -37,   211,   212,   213,     0,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,     0,   246,   247,     0,   248,     0,   249,
     250,   251,   252,   253,   254,   255,   -37,   256,   257,   258,
       0,     0,   259,   260,   261,     0,   -37,   262,   263,   264,
       0,   265,     0,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     300,   301,     0,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   333,   334,   335,
     336,   337,     0,   338,   339,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,     0,   364,   365,     0,     0,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,     0,     0,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   -37,     0,   390,   391,   392,
     393,   394,     0,     0,   395,   396,   397,   398,   399,   400,
     401,     0,   402,     0,   403,   404,   405,   406,   407,     0,
       0,   408,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,    35,     0,     0,     0,     0,   436,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      37,    38,    39,    40,    41,    42,    43,    44,    45,     0,
      46,    47,    48,     0,     0,     0,     0,     0,     0,     0,
      49,    50,    51,     0,    52,    53,    54,    55,     0,    56,
      57,    58,    59,    60,     0,    61,    62,     0,    63,    64,
      65,    66,    67,    68,    69,     0,     0,    70,    71,    72,
      73,    74,     0,    75,    76,    77,    78,    79,     0,     0,
       0,    80,    81,    82,    83,    84,    85,     0,    86,    87,
      88,    89,     0,    90,    91,    92,    93,    94,    95,     0,
       0,    96,    97,    98,     0,     0,     0,     0,     0,     0,
       0,    99,   100,   101,   102,   103,   104,   105,   106,   107,
       0,   108,     0,     0,   109,   110,   111,   112,   113,   114,
     115,     0,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,     0,   129,
     130,   131,   132,   133,     0,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,     0,   144,     0,   145,   146,
     147,   148,   149,     0,   150,     0,   151,   152,     0,     0,
       0,   153,   154,   155,   156,     0,   157,   158,     0,   159,
     160,   161,     0,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,     0,     0,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,     0,     0,
     208,   209,     0,   210,     0,     0,   211,   212,   213,     0,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,     0,   246,   247,     0,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,     0,   437,   259,   260,   261,     0,     0,   262,   263,
     264,     0,   265,     0,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,     0,   279,   280,
     281,   282,   283,   284,   285,   286,   287,     0,   288,   289,
     290,   291,   292,   293,   294,   295,     0,   296,   297,   298,
     299,   300,   301,     0,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,     0,   333,   334,
     335,   336,   337,     0,   338,   339,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,     0,   364,   365,     0,     0,   366,     0,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,     0,     0,   390,   391,
     392,   393,   394,     0,     0,   395,   396,   397,   398,   399,
     400,   401,     0,   402,     0,   403,   404,   405,   406,   407,
       0,     0,   408,     0,     0,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    35,     0,     0,     0,     0,
       0,   742,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,    38,    39,    40,    41,    42,    43,    44,    45,
       0,    46,    47,    48,     0,     0,     0,     0,     0,   494,
       0,    49,    50,    51,     0,    52,    53,    54,    55,     0,
      56,    57,    58,    59,    60,     0,    61,    62,     0,    63,
      64,    65,    66,    67,    68,    69,     0,     0,    70,    71,
      72,    73,    74,     0,    75,    76,    77,    78,    79,     0,
       0,     0,    80,    81,    82,    83,    84,    85,     0,    86,
      87,    88,    89,     0,    90,    91,    92,    93,    94,    95,
       0,     0,    96,    97,    98,     0,     0,     0,     0,     0,
       0,     0,    99,   100,   101,   102,   103,   104,   105,   106,
     107,     0,   108,     0,     0,   109,   110,   111,   112,   113,
     114,   115,     0,   116,   117,   118,   119,     0,     0,   120,
     121,   122,   123,   124,     0,   125,   126,   127,   128,     0,
     129,   130,   131,   132,   133,     0,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,     0,   144,     0,   145,
     146,   147,   148,   149,     0,   150,     0,   151,   152,     0,
       0,     0,   153,   154,   155,   156,     0,   157,   158,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,     0,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,     0,   179,     0,   180,   181,   182,   183,
     184,   185,   186,     0,   187,     0,   188,     0,     0,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,     0,
       0,   208,   209,     0,   210,     0,     0,   211,   212,   213,
       0,     0,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,   246,   247,     0,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     257,   258,     0,     0,   259,   260,   261,     0,     0,   262,
     263,   264,     0,   265,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
     280,   281,   282,   283,   284,   285,   286,   287,     0,   288,
     289,   290,   291,   292,   293,   294,   295,     0,   296,   297,
     298,   299,   300,   301,     0,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,   333,
     334,   335,   336,   337,     0,   338,   339,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,     0,   364,   365,     0,     0,   366,     0,
     367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
       0,     0,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,     0,     0,   390,
     391,   392,   393,   394,     0,     0,   395,   396,   397,   398,
     399,   400,   401,     0,   402,     0,   403,   404,   405,   406,
     407,     0,     0,   408,     0,     0,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,    35,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1066,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,    38,    39,    40,    41,    42,    43,    44,
      45,     0,    46,    47,    48,     0,     0,     0,     0,     0,
     494,     0,    49,    50,    51,     0,    52,    53,    54,    55,
       0,    56,    57,    58,    59,    60,     0,    61,    62,     0,
      63,    64,    65,    66,    67,    68,    69,     0,     0,    70,
      71,    72,    73,    74,     0,    75,    76,    77,    78,    79,
       0,     0,     0,    80,    81,    82,    83,    84,    85,     0,
      86,    87,    88,    89,     0,    90,    91,    92,    93,    94,
      95,     0,     0,    96,    97,    98,     0,     0,     0,     0,
       0,     0,     0,    99,   100,   101,   102,   103,   104,   105,
     106,   107,     0,   108,     0,     0,   109,   110,   111,   112,
     113,   114,   115,     0,   116,   117,   118,   119,     0,     0,
     120,   121,   122,   123,   124,     0,   125,   126,   127,   128,
       0,   129,   130,   131,   132,   133,     0,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,     0,   144,     0,
     145,   146,   147,   148,   149,     0,   150,     0,   151,   152,
       0,     0,     0,   153,   154,   155,   156,     0,   157,   158,
       0,   159,   160,   161,     0,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,     0,   179,     0,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,     0,     0,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
       0,     0,   208,   209,     0,   210,     0,     0,   211,   212,
     213,     0,     0,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,     0,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,     0,   246,   247,     0,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,     0,     0,   259,   260,   261,     0,     0,
     262,   263,   264,     0,   265,     0,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
     288,   289,   290,   291,   292,   293,   294,   295,     0,   296,
     297,   298,   299,   300,   301,     0,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,     0,
     333,   334,   335,   336,   337,     0,   338,   339,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,     0,   364,   365,     0,     0,   366,
       0,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,     0,     0,
     390,   391,   392,   393,   394,     0,     0,   395,   396,   397,
     398,   399,   400,   401,     0,   402,     0,   403,   404,   405,
     406,   407,     0,     0,   408,     0,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,    35,     0,     0,
       0,     0,   492,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,    38,    39,    40,    41,    42,    43,
      44,    45,     0,    46,    47,    48,     0,     0,     0,     0,
       0,     0,     0,    49,    50,    51,     0,    52,    53,    54,
      55,     0,    56,    57,    58,    59,    60,     0,    61,    62,
       0,    63,    64,    65,    66,    67,    68,    69,     0,     0,
      70,    71,    72,    73,    74,     0,    75,    76,    77,    78,
      79,     0,     0,     0,    80,    81,    82,    83,    84,    85,
       0,    86,    87,    88,    89,     0,    90,    91,    92,    93,
      94,    95,     0,     0,    96,    97,    98,     0,     0,     0,
       0,     0,     0,     0,    99,   100,   101,   102,   103,   104,
     105,   106,   107,     0,   108,     0,     0,   109,   110,   111,
     112,   113,   114,   115,     0,   116,   117,   118,   119,     0,
       0,   120,   121,   122,   123,   124,     0,   125,   126,   127,
     128,     0,   129,   130,   131,   132,   133,     0,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,     0,   144,
       0,   145,   146,   147,   148,   149,     0,   150,     0,   151,
     152,     0,     0,     0,   153,   154,   155,   156,     0,   157,
     158,     0,   159,   160,   161,     0,   162,   163,   164,   165,
     166,     0,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,     0,   179,     0,   180,   181,
     182,   183,   184,   185,   186,     0,   187,     0,   188,     0,
       0,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,     0,     0,   208,   209,     0,   210,     0,     0,   211,
     212,   213,     0,     0,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,     0,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,     0,   246,   247,
       0,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,   257,   258,     0,     0,   259,   260,   261,     0,
       0,   262,   263,   264,     0,   265,     0,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,   280,   281,   282,   283,   284,   285,   286,   287,
       0,   288,   289,   290,   291,   292,   293,   294,   295,     0,
     296,   297,   298,   299,   300,   301,     0,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
       0,   315,   316,     0,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
       0,   333,   334,   335,   336,   337,     0,   338,   339,   340,
     341,   342,     0,   343,   344,   345,   346,     0,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,     0,   364,   365,     0,     0,
     366,     0,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,     0,     0,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,     0,
       0,   390,   391,   392,   393,   394,     0,     0,   395,   396,
     397,   398,   399,   400,   401,     0,   402,     0,   403,   404,
     405,   406,   407,     0,    35,   408,     0,     0,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,    36,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      37,    38,    39,    40,    41,    42,    43,    44,    45,     0,
      46,    47,    48,     0,     0,     0,     0,     0,   494,     0,
      49,    50,    51,     0,    52,    53,    54,    55,     0,    56,
      57,    58,    59,    60,     0,    61,    62,     0,    63,    64,
      65,    66,    67,    68,    69,     0,     0,    70,    71,    72,
      73,    74,     0,    75,    76,    77,    78,    79,     0,     0,
       0,    80,    81,    82,    83,    84,    85,     0,    86,    87,
      88,    89,     0,    90,    91,    92,    93,    94,    95,     0,
       0,    96,    97,    98,     0,     0,     0,     0,     0,     0,
       0,    99,   100,   101,   102,   103,   104,   105,   106,   107,
       0,   108,     0,     0,   109,   110,   111,   112,   113,   114,
     115,     0,   116,   117,   118,   119,     0,     0,   120,   121,
     122,   123,   124,     0,   125,   126,   127,   128,     0,   129,
     130,   131,   132,   133,     0,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,     0,   144,     0,   145,   146,
     147,   148,   149,     0,   150,     0,   151,   152,     0,     0,
       0,   153,   154,   155,   156,     0,   157,   158,     0,   159,
     160,   161,     0,   162,   163,   164,   165,   166,     0,   167,
     168,   169,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,     0,   179,     0,   180,   181,   182,   183,   184,
     185,   186,     0,   187,     0,   188,     0,     0,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,     0,     0,
     208,   209,     0,   210,     0,     0,   211,   212,   213,     0,
       0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,     0,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,     0,   246,   247,     0,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,     0,     0,   259,   260,   261,     0,     0,   262,   263,
     264,     0,   265,     0,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,     0,   279,   280,
     281,   282,   283,   284,   285,   286,   287,     0,   288,   289,
     290,   291,   292,   293,   294,   295,     0,   296,   297,   298,
     299,   300,   301,     0,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,
       0,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,     0,   333,   334,
     335,   336,   337,     0,   338,   339,   340,   341,   342,     0,
     343,   344,   345,   346,     0,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,     0,   364,   365,     0,     0,   366,     0,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,     0,
       0,   376,   377,   378,   379,   380,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,     0,     0,   390,   391,
     392,   393,   394,     0,     0,   395,   396,   397,   398,   399,
     400,   401,     0,   402,     0,   403,   404,   405,   406,   407,
       0,     0,   408,     0,     0,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    35,     0,     0,     0,     0,
     978,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,    38,    39,    40,    41,    42,    43,    44,    45,
       0,    46,    47,    48,     0,     0,     0,     0,     0,     0,
       0,    49,    50,    51,     0,    52,    53,    54,    55,     0,
      56,    57,    58,    59,    60,     0,    61,    62,     0,    63,
      64,    65,    66,    67,    68,    69,     0,     0,    70,    71,
      72,    73,    74,     0,    75,    76,    77,    78,    79,     0,
       0,     0,    80,    81,    82,    83,    84,    85,     0,    86,
      87,    88,    89,     0,    90,    91,    92,    93,    94,    95,
       0,     0,    96,    97,    98,     0,     0,     0,     0,     0,
       0,     0,    99,   100,   101,   102,   103,   104,   105,   106,
     107,     0,   108,     0,     0,   109,   110,   111,   112,   113,
     114,   115,     0,   116,   117,   118,   119,     0,     0,   120,
     121,   122,   123,   124,     0,   125,   126,   127,   128,     0,
     129,   130,   131,   132,   133,     0,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,     0,   144,     0,   145,
     146,   147,   148,   149,     0,   150,     0,   151,   152,     0,
       0,     0,   153,   154,   155,   156,     0,   157,   158,     0,
     159,   160,   161,     0,   162,   163,   164,   165,   166,     0,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,     0,   179,     0,   180,   181,   182,   183,
     184,   185,   186,     0,   187,     0,   188,     0,     0,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,     0,
       0,   208,   209,     0,   210,     0,     0,   211,   212,   213,
       0,     0,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,     0,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,     0,   246,   247,     0,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
     257,   258,     0,     0,   259,   260,   261,     0,     0,   262,
     263,   264,     0,   265,     0,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
     280,   281,   282,   283,   284,   285,   286,   287,     0,   288,
     289,   290,   291,   292,   293,   294,   295,     0,   296,   297,
     298,   299,   300,   301,     0,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,     0,   315,
     316,     0,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,     0,   333,
     334,   335,   336,   337,     0,   338,   339,   340,   341,   342,
       0,   343,   344,   345,   346,     0,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,     0,   364,   365,     0,     0,   366,     0,
     367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
       0,     0,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,     0,     0,   390,
     391,   392,   393,   394,     0,     0,   395,   396,   397,   398,
     399,   400,   401,     0,   402,     0,   403,   404,   405,   406,
     407,     0,    35,   408,     0,     0,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,    36,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    37,    38,
      39,    40,    41,    42,    43,    44,    45,     0,    46,    47,
      48,     0,     0,     0,     0,     0,     0,     0,    49,    50,
      51,     0,    52,    53,    54,    55,     0,    56,    57,    58,
      59,    60,     0,    61,    62,     0,    63,    64,    65,    66,
      67,    68,    69,     0,     0,    70,    71,    72,    73,    74,
       0,    75,    76,    77,    78,    79,     0,     0,     0,    80,
      81,    82,    83,    84,    85,     0,    86,    87,    88,    89,
       0,    90,    91,    92,    93,    94,    95,     0,     0,    96,
      97,    98,     0,     0,     0,     0,     0,     0,     0,    99,
     100,   101,   102,   103,   104,   105,   106,   107,     0,   108,
       0,     0,   109,   110,   111,   112,   113,   114,   115,     0,
     116,   117,   118,   119,     0,     0,   120,   121,   122,   123,
     124,     0,   125,   126,   127,   128,     0,   129,   130,   131,
     132,   133,     0,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,     0,   144,     0,   145,   146,   147,   148,
     149,     0,   150,     0,   151,   152,     0,     0,     0,   153,
     154,   155,   156,     0,   157,   158,     0,   159,   160,   161,
       0,   162,   163,   164,   165,   166,     0,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
       0,   179,     0,   180,   181,   182,   183,   184,   185,   186,
       0,   187,     0,   188,     0,     0,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,   207,     0,     0,   208,   209,
       0,   210,     0,     0,   211,   212,   213,     0,     0,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,     0,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,     0,   246,   247,     0,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,     0,
       0,   259,   260,   261,     0,     0,   262,   263,   264,     0,
     265,     0,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,     0,   279,   280,   281,   282,
     283,   284,   285,   286,   287,  1038,   288,   289,   290,   291,
     292,   293,   294,   295,     0,   296,   297,   298,   299,   300,
     301,     0,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,     0,   315,   316,     0,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,     0,   333,   334,   335,   336,
     337,     0,   338,   339,   340,   341,   342,     0,   343,   344,
     345,   346,     0,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
       0,   364,   365,     0,     0,   366,     0,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,     0,     0,   376,
     377,   378,   379,   380,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,     0,     0,   390,   391,   392,   393,
     394,     0,     0,   395,   396,   397,   398,   399,   400,   401,
       0,   402,     0,   403,   404,   405,   406,   407,     0,    35,
     408,     0,     0,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    37,    38,    39,    40,    41,
      42,    43,    44,    45,     0,    46,    47,    48,     0,     0,
       0,     0,     0,     0,     0,    49,    50,    51,     0,    52,
      53,    54,    55,     0,    56,    57,    58,    59,    60,     0,
      61,    62,     0,    63,    64,    65,    66,    67,    68,    69,
       0,     0,    70,    71,    72,    73,    74,     0,    75,    76,
      77,    78,    79,     0,     0,     0,    80,    81,    82,    83,
      84,    85,     0,    86,    87,    88,    89,     0,    90,    91,
      92,    93,    94,    95,     0,     0,    96,    97,    98,     0,
       0,     0,     0,     0,     0,     0,    99,   100,   101,   102,
     103,   104,   105,   106,   107,     0,   108,     0,     0,   109,
     110,   111,   112,   113,   114,   115,     0,   116,   117,   118,
     119,     0,     0,   120,   121,   122,   123,   124,     0,   125,
     126,   127,   128,     0,   129,   130,   131,   132,   133,     0,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
       0,   144,     0,   145,   146,   147,   148,   149,     0,   150,
       0,   151,   152,     0,     0,     0,   153,   154,   155,   156,
       0,   157,   158,     0,   159,   160,   161,     0,   162,   163,
     164,   165,   166,     0,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,     0,   179,     0,
     180,   181,   182,   183,   184,   185,   186,     0,   187,     0,
     188,     0,     0,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,     0,     0,   208,   209,     0,   210,     0,
       0,   211,   212,   213,     0,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,     0,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,     0,
     246,   247,     0,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,     0,     0,   259,   260,
     261,     0,     0,   262,   263,   264,     0,   265,     0,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,   280,   281,   282,   283,   284,   285,
     286,   287,     0,   288,   289,   290,   291,   292,   293,   294,
     295,     0,   296,   297,   298,   299,   300,   301,     0,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,     0,   315,   316,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,     0,   333,   334,   335,   336,   337,     0,   338,
     339,   340,   341,   342,     0,   343,   344,   345,   346,     0,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,     0,   364,   365,
       0,     0,   366,     0,   367,   368,   369,   370,   371,   372,
       0,   373,   374,   375,     0,     0,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,     0,     0,   390,   391,   392,   393,   394,     0,     0,
     395,   396,   397,   398,   399,   400,   401,     0,   402,     0,
     403,   404,   405,   406,   407,     0,    35,   408,     0,     0,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    37,    38,    39,    40,    41,    42,    43,    44,
      45,     0,    46,    47,    48,     0,     0,     0,     0,     0,
       0,     0,    49,    50,    51,     0,    52,    53,    54,    55,
       0,    56,    57,    58,    59,    60,     0,    61,    62,     0,
      63,    64,    65,    66,    67,    68,    69,     0,     0,    70,
      71,    72,    73,    74,     0,    75,    76,    77,    78,    79,
       0,     0,     0,    80,    81,    82,    83,    84,    85,     0,
      86,    87,    88,    89,     0,    90,    91,    92,    93,    94,
      95,     0,     0,    96,    97,    98,     0,     0,     0,     0,
       0,     0,     0,    99,   100,   101,   102,   103,   104,   105,
     106,   107,     0,   108,     0,     0,   109,   110,   111,   112,
     113,   114,   115,     0,   116,   117,   118,   119,     0,     0,
     120,   121,   122,   123,   124,     0,   125,   126,   127,   128,
       0,   129,   130,   131,   132,   133,     0,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,     0,   144,     0,
     145,   146,   147,   148,   149,     0,   150,     0,   151,   152,
       0,     0,     0,   153,   154,   155,   156,     0,   157,   158,
       0,   159,   160,   161,     0,   162,   163,   164,   165,   166,
       0,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,     0,   179,     0,   180,   181,   182,
     183,   184,   185,   186,     0,   187,     0,   188,     0,     0,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
       0,     0,   208,   209,     0,   210,     0,     0,   211,   212,
     450,     0,     0,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,     0,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,     0,   246,   247,     0,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,     0,     0,   259,   260,   261,     0,     0,
     262,   263,   264,     0,   265,     0,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
     288,   289,   290,   291,   292,   293,   294,   295,     0,   296,
     297,   298,   299,   300,   301,     0,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,     0,
     315,   316,     0,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,     0,
     333,   334,   335,   336,   451,     0,   338,   339,   340,   341,
     342,     0,   343,   344,   345,   346,     0,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,     0,   364,   365,     0,     0,   366,
       0,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,     0,     0,   376,   377,   378,   379,   380,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,     0,     0,
     390,   391,   392,   393,   394,     0,     0,   395,   396,   397,
     398,   399,   400,   401,     0,   402,     0,   403,   404,   405,
     406,   407,     0,    35,   408,     0,     0,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,    36,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    37,
      38,    39,    40,    41,    42,    43,    44,    45,     0,    46,
      47,    48,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    51,     0,    52,    53,    54,    55,     0,    56,    57,
      58,    59,    60,     0,    61,    62,     0,    63,    64,    65,
      66,    67,    68,    69,     0,     0,    70,    71,    72,    73,
      74,     0,    75,    76,    77,    78,    79,     0,     0,     0,
      80,    81,    82,    83,    84,    85,     0,    86,    87,    88,
      89,     0,    90,    91,    92,    93,    94,    95,     0,     0,
      96,    97,    98,     0,     0,     0,     0,     0,     0,     0,
      99,   100,   101,   102,   103,   104,   105,   106,   107,     0,
     108,     0,     0,   109,   110,   111,   112,   113,   114,   115,
       0,   116,   117,   118,   119,     0,     0,   120,   121,   122,
     123,   124,     0,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,     0,   144,     0,   145,   146,   147,
     148,   149,     0,   150,     0,   151,   152,     0,     0,     0,
     153,   154,   155,   156,     0,   157,   158,     0,   159,     0,
     161,     0,   162,   163,   164,   165,   166,     0,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,   179,     0,   180,   181,   182,   183,   184,   185,
     186,     0,   187,     0,   188,     0,     0,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,     0,     0,   208,
     209,     0,   210,     0,     0,   211,   212,   213,     0,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
       0,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,     0,   246,   247,     0,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   257,   258,
       0,     0,   259,   260,   261,     0,     0,   262,   263,   264,
       0,   265,     0,   266,   267,   268,   269,   270,   271,   272,
     273,     0,   275,   276,   277,   278,     0,   279,   280,   281,
     282,   283,   284,   285,   286,   287,     0,   288,   289,   290,
     291,   292,   293,   294,   295,     0,     0,   297,   298,   299,
     300,   301,     0,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,     0,   315,   316,     0,
     317,   318,   319,   320,   321,   322,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,     0,   333,   334,   335,
     336,   337,     0,   338,   339,   340,   341,   342,     0,   343,
     344,   345,   346,     0,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,     0,   364,   365,     0,     0,   366,     0,   367,   368,
     369,   370,   371,   372,     0,   373,   374,   375,     0,     0,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,     0,     0,   390,   391,   392,
     393,   394,     0,     0,   395,   396,   397,   398,   399,   400,
     401,     0,   402,     0,   403,   404,   405,   406,   407,     0,
      35,   408,     0,     0,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,    36,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,    38,    39,    40,
      41,    42,    43,    44,    45,     0,    46,    47,    48,     0,
       0,     0,     0,     0,   494,     0,    49,    50,    51,     0,
      52,     0,    54,    55,     0,    56,    57,    58,     0,    60,
       0,    61,    62,     0,    63,    64,    65,    66,    67,    68,
      69,     0,     0,    70,    71,    72,    73,    74,     0,    75,
      76,    77,    78,    79,     0,     0,     0,    80,    81,    82,
      83,    84,    85,     0,    86,    87,    88,    89,     0,    90,
      91,    92,    93,    94,    95,     0,     0,    96,     0,    98,
       0,     0,     0,     0,     0,     0,     0,    99,   100,   101,
     102,   103,   104,   105,   106,   107,     0,   108,     0,     0,
     109,   110,   111,   112,   113,   114,   115,     0,   116,   117,
     118,   119,     0,     0,   120,   121,   122,   123,   124,     0,
     125,   126,   127,   128,     0,   129,   130,   131,     0,   133,
       0,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,     0,   144,     0,   145,   146,   147,   148,     0,     0,
     150,     0,   151,   152,     0,     0,     0,   153,   154,   155,
     156,     0,   157,   158,     0,   159,     0,   161,     0,   162,
     163,   164,   165,   166,     0,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,     0,   179,
       0,   180,   181,   182,   183,   184,   185,   186,     0,   187,
       0,   188,     0,     0,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,   202,     0,
     204,   205,   206,   207,     0,     0,   208,   209,     0,   210,
       0,     0,   211,   212,   213,     0,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,     0,   234,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
       0,   246,   247,     0,   248,     0,   249,   250,   251,     0,
     253,   254,   255,     0,   256,   257,   258,     0,     0,     0,
     260,   261,     0,     0,   262,   263,   264,     0,   265,     0,
     266,   267,   268,   269,   270,   271,   272,   273,     0,   275,
     276,     0,   278,     0,   279,   280,   281,   282,     0,   284,
     285,   286,   287,     0,   288,   289,   290,   291,   292,   293,
     294,   295,     0,     0,   297,   298,   299,   300,   301,     0,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,     0,   315,   316,     0,   317,   318,     0,
     320,   321,   322,     0,   324,   325,     0,   327,   328,   329,
     330,   331,   332,     0,   333,   334,   335,   336,   337,     0,
       0,   339,   340,   341,   342,     0,   343,   344,   345,   346,
       0,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,     0,   364,
     365,     0,     0,   366,     0,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,     0,     0,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,     0,   387,
     388,   389,     0,     0,   390,   391,   392,   393,   394,     0,
       0,   395,   396,   397,   398,     0,   400,   401,     0,   402,
       0,   403,   404,   405,   406,   407,     0,     0,   408,     0,
       0,   409,     0,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   778,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   779,     0,     0,   780,   781,   782,   783,   784,   785,
     786,   787,   788,   789,   790,     0,     0,     0,     0,     0,
       0,   897,   520,     0,   791,   779,     0,     0,   780,   781,
     782,   783,   784,   785,   786,   787,   788,   789,   790,     0,
       0,     0,   792,     0,     0,   793,   520,     0,   791,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   794,
       0,     0,   879,     0,   779,     0,   792,   780,   781,   782,
     783,   784,   785,   786,   787,   788,   789,   790,     0,     0,
       0,     0,     0,   794,     0,   520,     0,   791,     0,   779,
       0,     0,   780,   781,   782,   783,   784,   785,   786,   787,
     788,   789,   790,     0,     0,   792,     0,     0,     0,     0,
     520,     0,   791,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   794,     0,     0,     0,     0,     0,   779,  -114,
     792,   780,   781,   782,   783,   784,   785,   786,   787,   788,
     789,   790,     0,     0,     0,     0,     0,   794,     0,   520,
       0,   791,     0,   779,     0,     0,   780,   781,   782,   783,
     784,   785,   786,   787,   788,   789,   790,     0,     0,   792,
       0,     0,  1223,     0,   520,     0,   791,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   794,     0,     0,     0,
       0,     0,     0,     0,   792,   779,     0,  1058,   780,   781,
     782,   783,   784,   785,   786,   787,   788,   789,   790,     0,
     795,   794,     0,     0,     0,     0,   520,     0,   791,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   796,   795,     0,   792,   779,     0,     0,
     780,   781,   782,   783,   784,   785,   786,   787,   788,   789,
     790,     0,     0,   794,     0,     0,     0,   796,   520,     0,
     791,   797,     0,     0,     0,     0,     0,     0,  1063,     0,
       0,     0,     0,   795,  1064,     0,     0,     0,   792,     0,
       0,     0,     0,     0,     0,   797,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   794,   796,     0,   795,     0,
       0,   798,     0,     0,     0,     0,     0,   779,     0,     0,
     780,   781,   782,   783,   784,   785,   786,   787,   788,   789,
     790,   796,     0,   799,   797,   798,     0,     0,   520,     0,
     791,     0,     0,     0,     0,     0,     0,   795,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   799,   792,   797,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     796,     0,   795,     0,   798,   794,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1177,     0,     0,     0,     0,   796,   799,     0,   797,   798,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   795,     0,     0,     0,     0,     0,
       0,   799,     0,   797,     0,     0,  1178,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   779,   796,   798,   780,
     781,   782,   783,   784,   785,   786,   787,   788,   789,   790,
       0,     0,     0,     0,     0,     0,   795,   520,     0,   791,
     799,     0,     0,   798,     0,   797,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   792,     0,   796,
       0,     0,     0,     0,     0,   799,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   798,     0,   797,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   795,   799,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   798,     0,   796,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   799,
       0,     0,     0,     0,     0,     0,     0,   797,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   798,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   799,
       0,     0,     0,     0,     0,   795,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   796,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   797,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   798,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   799
  };

  const short
  parser::yycheck_[] =
  {
       2,     0,     4,   465,   467,     7,   469,     9,    10,     0,
       1,    21,   537,     9,    10,   441,   442,   511,     2,   483,
       4,   628,    12,     7,   745,     9,    10,   482,    16,    18,
      12,   474,    25,     8,     0,    13,    24,    12,    12,   557,
      25,   622,   504,    12,   651,     0,   436,   138,     2,   123,
      32,    18,     0,     1,   614,   615,     4,    51,   614,   615,
     166,    12,   138,   177,   622,   491,    18,    38,   791,    12,
     777,    52,   791,   123,   177,   623,    17,    25,    59,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
     590,   614,   615,   791,   203,   622,    75,    38,   124,    40,
     791,   791,   809,   195,    18,   213,   809,   815,   498,   470,
      52,  1028,   502,   193,   987,   962,   854,    58,   996,  1076,
     278,    62,     0,   812,   150,   594,   595,    52,   237,   203,
    1163,   245,   317,  1198,    75,    13,    28,   322,   120,   608,
     122,    19,   245,   252,   278,   614,   615,  1228,   806,   175,
      42,   247,     8,   203,    32,   893,    12,  1222,    19,   614,
     615,   624,   625,   237,   885,    13,   275,    12,   631,     8,
     164,    13,   330,    12,     0,   278,    18,  1258,   252,  1136,
    1137,  1138,  1139,   177,    32,   370,    42,   237,    66,  1222,
     270,    21,    22,  1066,   852,   853,   330,     0,    32,   177,
     853,   275,   252,    42,  1082,   296,   864,    28,   299,   203,
      13,   864,   202,   154,  1087,    13,    19,   159,    18,   317,
     202,    42,    30,   299,   322,   275,   340,   330,   202,  1076,
     304,     8,    40,     0,   159,    12,   626,   340,    13,    20,
      21,    22,    23,   237,   450,   451,    13,   226,    13,   774,
    1167,   245,    19,    18,   304,   464,    13,   466,   252,   241,
     334,    20,    21,    22,    23,    32,    13,   245,  1215,  1216,
      13,    18,   380,   365,   982,    18,  1149,    58,   985,   986,
     987,   275,   985,   986,   278,   226,  1024,   648,   649,  1136,
    1137,  1138,  1139,    14,   403,    16,   322,   211,   277,    58,
     278,    17,   410,    13,    20,    21,    22,    23,   249,     8,
      26,   202,    28,    12,    30,    14,  1039,    16,    13,   459,
    1039,    13,    38,    18,    40,    13,    18,    17,  1049,   403,
      18,    21,    22,  1234,  1235,  1058,   277,    13,   793,  1058,
      30,  1039,    18,     8,   808,   845,   340,    12,  1039,  1039,
      40,   851,   330,   403,    18,    22,   963,   747,    13,  1066,
    1058,   751,   340,    18,   754,   336,     8,  1058,  1058,    13,
      12,  1060,    18,   340,    18,   489,   317,    12,    82,     8,
    1087,  1070,     3,    12,     5,   379,   489,    17,   340,    12,
      20,    21,    22,    23,     3,   517,     5,   519,   339,    12,
      30,     8,   252,   252,   344,   344,   344,   513,    38,   403,
      40,     8,     8,    12,     8,   345,     8,    12,   844,    12,
       8,     8,     8,   497,  1005,   943,   420,     8,     8,    12,
     420,     8,   858,   427,   436,   437,   438,   997,   420,   441,
     442,   997,  1149,   445,   535,   427,   420,  1005,   450,   451,
    1171,   420,   436,   437,   438,   465,   437,   441,   442,   535,
    1008,   445,    18,     8,    12,   464,   450,   451,   202,   420,
      61,   330,   252,   464,   997,    12,   866,   420,  1005,   278,
     482,    13,    12,   437,   472,   487,   252,   489,   436,   491,
     492,   445,   494,   513,     3,   489,   498,    66,   464,    12,
     502,   202,   892,   487,    18,   489,   514,   491,   492,   464,
     494,   489,   511,   503,   498,    82,   464,    12,   502,    18,
     514,   503,    18,    24,   472,   516,    18,   517,   997,   503,
     519,   506,    18,   487,   503,   517,   245,    18,   492,  1002,
    1004,   151,   997,   517,    12,  1009,   989,    13,   517,   202,
     498,   541,   503,    13,   502,    18,   497,    13,  1052,   541,
     503,    40,  1031,   511,    12,    12,   322,   541,   516,   506,
      12,   211,   541,    13,   517,    13,    12,    82,    32,   540,
    1187,     8,     8,     8,   265,    13,    18,   171,   340,    13,
    1197,   355,   182,   215,   448,   449,    12,    12,   541,  1093,
      13,    24,    13,   457,    82,    13,    13,    13,    13,    12,
    1135,   613,   614,   615,    18,   346,   618,   619,    38,    18,
      18,   623,   618,    13,   626,    18,    13,   481,   630,   613,
      13,    13,   265,  1096,   618,   619,  1098,   409,   622,   623,
      58,  1084,   626,  1086,   322,   464,   630,   640,   641,   997,
     643,   615,    10,   618,   814,   640,   641,  1163,   643,  1085,
    1163,  1222,   516,  1145,   742,   436,  1106,   969,  1025,  1095,
    1017,   525,   649,   970,  1100,   647,   899,   805,   626,   629,
     448,   793,  1117,  1039,  1058,  1053,  1098,    -1,    -1,    -1,
      -1,    -1,   640,   641,    -1,   643,    -1,    -1,    -1,    -1,
     554,  1144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    -1,    40,   588,    -1,    -1,    -1,    -1,    -1,
     742,    -1,    -1,   745,    -1,   747,    -1,    -1,    -1,   751,
    1193,    58,   754,   755,    -1,    -1,    -1,    -1,   742,    -1,
      -1,   745,    -1,   747,    -1,    -1,    -1,   751,    75,    -1,
     754,   755,    -1,   627,   628,   629,    -1,    -1,   632,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   642,    -1,
     644,   793,    -1,    -1,    -1,    -1,    -1,   651,    -1,   747,
      -1,   803,    -1,   751,    -1,    -1,   754,   755,    -1,    -1,
      -1,    -1,   814,    -1,    -1,    -1,    -1,    -1,    -1,   803,
      -1,    -1,    76,    -1,    -1,    79,    -1,    -1,    -1,    -1,
     814,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,
      -1,    -1,   844,    -1,    -1,    -1,    -1,   795,    -1,    -1,
      -1,    -1,    -1,   852,   853,    -1,   858,    -1,    -1,    -1,
     844,    -1,    -1,    -1,   866,   864,   814,   852,   853,    -1,
      -1,    -1,    -1,    -1,   858,    -1,    -1,    -1,    -1,   864,
     882,    -1,   866,   885,    -1,    -1,   140,   141,    -1,    -1,
     892,   145,    -1,    -1,    -1,    -1,    -1,    -1,   882,    -1,
      -1,   885,    -1,    -1,   852,   853,    -1,    -1,   892,   163,
      -1,    -1,    -1,   767,    -1,    -1,   864,    -1,   866,   226,
      -1,    -1,    -1,   777,    -1,   779,   780,   781,   782,   783,
     784,   785,   786,   787,   788,   789,   790,    -1,   792,    -1,
     194,    -1,   249,   797,   892,   799,    -1,   801,    -1,    -1,
      -1,   805,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
     277,    -1,    -1,    -1,    -1,    -1,   978,    38,    -1,    40,
      -1,   835,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   243,
     244,    -1,   246,    -1,   978,   997,    -1,    -1,  1000,    -1,
      -1,    -1,    -1,  1013,  1000,    -1,  1008,    -1,    -1,    -1,
     317,    -1,    -1,    -1,    75,   963,  1000,    -1,    -1,    -1,
    1022,  1005,   970,    -1,  1008,    -1,    -1,    -1,   976,    -1,
      -1,    -1,   339,    -1,   888,    -1,    -1,    -1,  1022,    -1,
      -1,    -1,    -1,    -1,   898,    -1,   575,  1049,    -1,    -1,
      -1,  1053,    -1,  1052,    -1,    17,    -1,    -1,    20,    21,
      22,    23,    -1,    -1,    26,  1049,    28,    -1,    30,  1053,
      -1,   325,    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,
      -1,    -1,    -1,  1085,    -1,    -1,    -1,   616,  1098,    -1,
      -1,    -1,    -1,  1095,  1093,    -1,    -1,    -1,  1100,    -1,
      -1,  1085,    -1,    -1,  1052,    -1,    -1,    -1,    -1,   963,
      -1,  1095,    -1,    75,    -1,  1117,  1100,   971,    -1,    -1,
      -1,    -1,    -1,   652,    -1,    -1,    -1,    -1,   382,    -1,
      -1,    -1,    -1,  1117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1093,    -1,    17,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,   468,    -1,  1017,  1155,   226,  1020,  1021,    38,  1171,
      40,  1025,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   435,    -1,    -1,    -1,    -1,    -1,  1171,    58,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   450,    -1,    -1,    -1,
      -1,  1055,    -1,    -1,    -1,    75,    -1,  1155,  1062,  1063,
    1064,    -1,    -1,   467,  1068,  1069,   277,   471,    -1,    -1,
      -1,  1223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   760,    -1,    -1,    -1,    -1,   765,    -1,    -1,  1223,
    1094,    -1,    -1,    -1,    -1,    -1,   775,    -1,    17,    -1,
     504,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,   226,    -1,    -1,    -1,  1122,    38,
      -1,    40,    -1,    -1,    -1,    -1,    -1,    -1,   807,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1140,    -1,    -1,    58,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1151,    -1,    -1,
      -1,  1155,    -1,    -1,    -1,    -1,    75,    -1,    -1,  1163,
      -1,    -1,  1166,    -1,    -1,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1177,  1178,    -1,    -1,    -1,   857,   858,
      -1,    -1,  1186,  1187,    -1,    -1,   865,    -1,    -1,    -1,
      -1,    -1,   871,  1197,  1198,   874,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,
    1214,  1215,  1216,    -1,    -1,    -1,    -1,    -1,  1222,    -1,
      -1,    -1,   901,    -1,  1228,    -1,    -1,    -1,    -1,   249,
      -1,    -1,    -1,   912,    -1,    -1,    -1,    -1,    -1,    -1,
     919,   920,   921,   922,   923,   924,   925,   926,   927,   928,
     929,   930,    -1,    -1,  1258,    -1,    -1,   277,    17,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    -1,   195,    -1,    -1,    38,
     959,    40,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   968,
      -1,    -1,    -1,   972,    -1,    -1,    -1,   317,   977,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,   988,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,   998,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     249,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1048,
      -1,    -1,    -1,    -1,    -1,  1054,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   317,  1078,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     339,  1100,  1101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1123,    -1,   365,    -1,    -1,  1128,
    1129,  1130,    -1,  1132,  1133,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1161,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     249,    -1,    -1,    -1,    -1,    -1,  1175,    -1,    -1,     3,
      -1,     5,    -1,     7,     8,    -1,  1185,    -1,    12,    13,
      -1,    -1,    -1,    -1,    -1,  1194,    20,    -1,   277,    23,
      -1,    -1,    -1,    -1,    -1,  1204,  1205,    31,    -1,    -1,
      -1,  1210,  1211,  1212,    38,    -1,    -1,    -1,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,  1231,    -1,    -1,    -1,    -1,    -1,   317,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,    -1,
     134,   135,   136,   137,   138,   139,   140,   141,   142,    -1,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,   195,    -1,   197,    -1,   199,   200,   201,   202,   203,
     204,   205,   206,   207,    -1,   209,   210,    -1,   212,   213,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,    -1,   246,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,    -1,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
      -1,    -1,   336,   337,   338,    -1,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,    -1,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,    -1,   498,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,   512,    -1,
      -1,   515,    -1,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,     3,    -1,     5,   541,     7,     8,
      -1,    -1,    -1,    12,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    -1,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,    -1,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,    -1,   134,   135,   136,   137,   138,
     139,   140,   141,   142,    -1,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,    -1,   155,   156,   157,   158,
      -1,    -1,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,   173,   174,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,   195,    -1,   197,    -1,
     199,   200,   201,   202,   203,   204,   205,   206,   207,    -1,
     209,   210,    -1,   212,   213,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,    -1,   246,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,    -1,    -1,   273,   274,   275,   276,   277,    -1,
     279,   280,   281,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,    -1,   331,   332,   333,    -1,    -1,   336,   337,   338,
      -1,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,    -1,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,    -1,   498,
     499,   500,   501,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,   512,    -1,    -1,   515,    -1,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,     3,
      -1,     5,   541,     7,     8,    -1,    -1,    -1,    12,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,    -1,
     134,   135,   136,   137,   138,   139,   140,   141,   142,    -1,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,   195,    -1,   197,    -1,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,   210,    -1,   212,   213,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,    -1,   246,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,    -1,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
      -1,    -1,   336,   337,   338,    -1,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,    -1,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,    -1,   498,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,   512,    -1,
      -1,   515,    -1,   517,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,     3,    -1,     5,   541,     7,     8,
      -1,    -1,    -1,    12,    13,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    -1,    22,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,    -1,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,    -1,   134,   135,   136,   137,   138,
     139,   140,   141,   142,    -1,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,    -1,   155,   156,   157,   158,
     159,    -1,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,   173,   174,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,   195,    -1,   197,    -1,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,   210,    -1,   212,   213,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,    -1,   246,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,    -1,    -1,   273,   274,   275,   276,   277,    -1,
     279,   280,   281,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,    -1,   331,   332,   333,    -1,    -1,   336,   337,   338,
      -1,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,    -1,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,    -1,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,   512,    -1,    -1,   515,    -1,    -1,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,     3,
      -1,     5,    -1,     7,     8,    -1,    -1,    -1,    12,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    22,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,    -1,
     134,   135,   136,   137,   138,   139,   140,   141,   142,    -1,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,   195,    -1,   197,    -1,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,   210,    -1,   212,   213,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,    -1,   246,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,    -1,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
      -1,    -1,   336,   337,   338,    -1,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,    -1,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,    -1,   498,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,   512,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,     3,    -1,     5,    -1,     7,     8,
      -1,    -1,    -1,    12,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    -1,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,    -1,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,    -1,   134,   135,   136,   137,   138,
     139,   140,   141,   142,    -1,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,    -1,   155,   156,   157,   158,
      -1,    -1,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,   173,   174,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,   195,    -1,   197,    -1,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,   210,    -1,   212,   213,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,    -1,   246,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,    -1,    -1,   273,   274,   275,   276,   277,    -1,
     279,   280,   281,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,    -1,   331,   332,   333,    -1,    -1,   336,   337,   338,
      -1,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,    -1,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,    -1,   498,
     499,   500,   501,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,   512,    -1,    -1,   515,    -1,    -1,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,     3,
      -1,     5,    -1,     7,     8,    -1,    -1,    -1,    12,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,    -1,
     134,   135,   136,   137,   138,   139,   140,   141,   142,    -1,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,   195,    -1,   197,    -1,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,   210,    -1,   212,   213,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,    -1,   246,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,    -1,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
      -1,    -1,   336,   337,   338,    -1,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,    -1,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,    -1,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,   512,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,     3,    -1,     5,    -1,     7,     8,
      -1,    -1,    -1,    12,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    -1,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,    -1,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,    -1,   134,   135,   136,   137,   138,
     139,   140,   141,   142,    -1,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,    -1,   155,   156,   157,   158,
      -1,    -1,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,   173,   174,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,   195,    -1,   197,    -1,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,   210,    -1,   212,   213,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,    -1,   246,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,    -1,    -1,   273,   274,   275,   276,   277,    -1,
     279,   280,   281,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,    -1,   331,   332,   333,    -1,    -1,   336,   337,   338,
      -1,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,    -1,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,    -1,   498,
     499,   500,   501,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,   512,    -1,    -1,   515,    -1,    -1,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,     3,
      -1,     5,    -1,     7,     8,    -1,    -1,    -1,    12,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,    -1,
     134,   135,   136,   137,   138,   139,   140,   141,   142,    -1,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,   195,    -1,   197,    -1,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,   210,    -1,   212,   213,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,    -1,   246,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,    -1,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
      -1,    -1,   336,   337,   338,    -1,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,    -1,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,    -1,   498,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,   512,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,     3,    -1,     5,    -1,     7,     8,
      -1,    -1,    -1,    12,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    -1,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,    -1,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,    -1,   134,   135,   136,   137,   138,
     139,   140,   141,   142,    -1,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,    -1,   155,   156,   157,   158,
      -1,    -1,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,   173,   174,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,   195,    -1,   197,    -1,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,   210,    -1,   212,   213,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,    -1,   246,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,    -1,    -1,   273,   274,   275,   276,   277,    -1,
     279,   280,   281,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,    -1,   331,   332,   333,    -1,    -1,   336,   337,   338,
      -1,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,    -1,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,    -1,   498,
     499,   500,   501,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,   512,    -1,    -1,   515,    -1,    -1,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,     3,
      -1,     5,    -1,     7,     8,    -1,    -1,    -1,    12,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,    -1,
     134,   135,   136,   137,   138,   139,   140,   141,   142,    -1,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,   195,    -1,   197,    -1,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,   210,    -1,   212,   213,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,    -1,   246,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,    -1,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
      -1,    -1,   336,   337,   338,    -1,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,    -1,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,    -1,   498,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,   512,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,     3,    -1,     5,    -1,     7,     8,
      -1,    -1,    -1,    12,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    -1,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,    -1,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,    -1,   134,   135,   136,   137,   138,
     139,   140,   141,   142,    -1,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,    -1,   155,   156,   157,   158,
      -1,    -1,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,   173,   174,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,   195,    -1,   197,    -1,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,   210,    -1,   212,   213,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,    -1,   246,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,    -1,    -1,   273,   274,   275,   276,   277,    -1,
     279,   280,   281,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,    -1,   331,   332,   333,    -1,    -1,   336,   337,   338,
      -1,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,    -1,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,    -1,   498,
     499,   500,   501,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,   512,    -1,    -1,   515,    -1,    -1,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,     3,
      -1,     5,    -1,     7,     8,    -1,    -1,    -1,    12,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,    -1,
     134,   135,   136,   137,   138,   139,   140,   141,   142,    -1,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,   195,    -1,   197,    -1,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,   210,    -1,   212,   213,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,    -1,   246,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,    -1,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
      -1,    -1,   336,   337,   338,    -1,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,    -1,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,    -1,   498,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,   512,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,     3,    -1,     5,    -1,     7,     8,
      -1,    -1,    -1,    12,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    -1,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,    -1,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,    -1,   134,   135,   136,   137,   138,
     139,   140,   141,   142,    -1,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,    -1,   155,   156,   157,   158,
      -1,    -1,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,   173,   174,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,   195,    -1,   197,    -1,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,   210,    -1,   212,   213,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,    -1,   246,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,    -1,    -1,   273,   274,   275,   276,   277,    -1,
     279,   280,   281,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,    -1,   331,   332,   333,    -1,    -1,   336,   337,   338,
      -1,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,    -1,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,    -1,   498,
     499,   500,   501,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,   512,    -1,    -1,   515,    -1,    -1,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,     3,
      -1,     5,    -1,     7,     8,    -1,    -1,    -1,    12,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,    23,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,    -1,
     134,   135,   136,   137,   138,   139,   140,   141,   142,    -1,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
     194,   195,    -1,   197,    -1,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,   210,    -1,   212,   213,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,    -1,   246,    -1,   248,    -1,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,    -1,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
      -1,    -1,   336,   337,   338,    -1,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,    -1,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,    -1,   498,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,   512,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,     3,    -1,     5,     6,    -1,     8,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    -1,    -1,    23,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,    -1,   102,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,    -1,    -1,
      -1,   130,    -1,    -1,    -1,   134,   135,   136,   137,   138,
     139,   140,   141,   142,    -1,   144,    -1,    -1,   147,   148,
     149,   150,   151,   152,   153,    -1,   155,   156,   157,   158,
      -1,    -1,   161,   162,   163,   164,   165,    -1,   167,   168,
     169,   170,    -1,   172,   173,   174,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,    -1,   191,   192,   193,   194,   195,    -1,   197,    -1,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,   210,    -1,   212,   213,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,   228,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,    -1,   246,    -1,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,    -1,    -1,   273,   274,   275,   276,   277,    -1,
     279,   280,   281,    -1,    -1,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,    -1,   336,   337,   338,
      -1,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,    -1,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,    -1,   456,   457,    -1,
      -1,   460,   461,   462,   463,   464,   465,   466,   467,    -1,
     469,   470,   471,    -1,    -1,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,   491,   492,   493,   494,   495,    -1,    -1,   498,
     499,   500,   501,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,   512,    -1,    -1,   515,    -1,    -1,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,     7,
      -1,    -1,    -1,    -1,    12,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    63,    64,    65,    -1,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      -1,    -1,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   134,   135,   136,   137,
     138,   139,   140,   141,   142,    -1,   144,    -1,    -1,   147,
     148,   149,   150,   151,   152,   153,    -1,   155,   156,   157,
     158,    -1,    -1,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,   173,   174,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,    -1,   191,   192,   193,   194,   195,    -1,   197,
      -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,   207,
      -1,   209,   210,    -1,   212,   213,   214,    -1,   216,   217,
     218,   219,   220,    -1,   222,   223,   224,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,   236,    -1,
     238,   239,   240,   241,   242,   243,   244,    -1,   246,    -1,
     248,    -1,    -1,   251,    -1,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,    -1,    -1,   273,   274,    -1,   276,    -1,
      -1,   279,   280,   281,    -1,    -1,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,   319,    -1,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,    -1,   335,   336,   337,
     338,    -1,    -1,   341,   342,   343,    -1,   345,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,    -1,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,   435,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
      -1,    -1,   460,    -1,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,    -1,    -1,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,   491,   492,   493,   494,   495,    -1,    -1,
     498,   499,   500,   501,   502,   503,   504,    -1,   506,    -1,
     508,   509,   510,   511,   512,    -1,    -1,   515,    -1,   517,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   537,
       7,    -1,    -1,   541,    -1,    12,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    63,    64,    65,    -1,
      67,    68,    69,    70,    -1,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    -1,    -1,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,   136,
     137,   138,   139,   140,   141,   142,    -1,   144,    -1,    -1,
     147,   148,   149,   150,   151,   152,   153,    -1,   155,   156,
     157,   158,    -1,    -1,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,   173,   174,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,    -1,   191,   192,   193,   194,   195,    -1,
     197,    -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,
     207,    -1,   209,   210,    -1,   212,   213,   214,    -1,   216,
     217,   218,   219,   220,    -1,   222,   223,   224,   225,    -1,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,   236,
      -1,   238,   239,   240,   241,   242,   243,   244,    -1,   246,
      -1,   248,    -1,    -1,   251,    -1,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,    -1,    -1,   273,   274,    -1,   276,
      -1,    -1,   279,   280,   281,    -1,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,   318,   319,    -1,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,    -1,   331,   332,   333,    -1,    -1,   336,
     337,   338,    -1,    -1,   341,   342,   343,    -1,   345,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,    -1,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,   430,   431,    -1,   433,   434,   435,   436,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,    -1,    -1,   460,    -1,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,    -1,    -1,   474,   475,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
      -1,   498,   499,   500,   501,   502,   503,   504,    -1,   506,
      -1,   508,   509,   510,   511,   512,    -1,    -1,   515,    -1,
     517,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,     7,    -1,    -1,   541,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
     126,   127,   128,   129,    -1,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,    -1,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,   200,    -1,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,    -1,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,    -1,    -1,   251,    -1,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,    -1,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,    -1,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,    -1,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   537,     7,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,    -1,   103,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,    -1,   124,
     125,   126,   127,   128,   129,    -1,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
      -1,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,    -1,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,    -1,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,    -1,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,    -1,    -1,   251,    -1,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,    -1,
     345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,    -1,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,    -1,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,     7,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    -1,    -1,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,    -1,   102,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,    -1,    -1,    -1,   130,    -1,    -1,    -1,
     134,   135,   136,   137,   138,   139,   140,   141,   142,    -1,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,    -1,   191,   192,   193,
     194,   195,    -1,   197,    -1,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,   210,   211,   212,   213,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,   236,   237,   238,   239,   240,   241,   242,   243,
     244,    -1,   246,    -1,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,    -1,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
      -1,    -1,   336,   337,   338,    -1,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,    -1,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,    -1,
     474,   475,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,    -1,   498,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,   512,    -1,
       7,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    -1,    -1,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,    -1,   102,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
      -1,    -1,    -1,   130,    -1,    -1,    -1,   134,   135,   136,
     137,   138,   139,   140,   141,   142,    -1,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,    -1,   155,   156,
     157,   158,    -1,    -1,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,   173,   174,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,    -1,   191,   192,   193,   194,   195,    -1,
     197,    -1,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,    -1,   209,   210,    -1,   212,   213,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,    -1,   246,
      -1,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,    -1,    -1,   273,   274,   275,   276,
     277,    -1,   279,   280,   281,    -1,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,   329,    -1,   331,   332,   333,    -1,    -1,   336,
     337,   338,    -1,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,    -1,   361,   362,   363,   364,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,    -1,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,    -1,    -1,   460,   461,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,    -1,    -1,   474,   475,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,   486,
     487,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
      -1,   498,   499,   500,   501,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,   512,    -1,    -1,   515,    -1,
      -1,   518,   519,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,     7,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    17,    18,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    38,    -1,    40,    -1,    -1,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      -1,    -1,    58,    -1,    -1,    61,    -1,    63,    64,    65,
      -1,    67,    68,    69,    70,    -1,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,    -1,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,    -1,   124,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
     136,   137,   138,   139,   140,   141,   142,    -1,   144,    -1,
      -1,   147,   148,   149,   150,   151,   152,   153,    -1,   155,
     156,   157,   158,    -1,    -1,   161,   162,   163,   164,   165,
      -1,   167,   168,   169,   170,    -1,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,   189,    -1,   191,   192,   193,   194,   195,
      -1,   197,    -1,   199,   200,    -1,    -1,    -1,   204,   205,
     206,   207,    -1,   209,   210,    -1,   212,   213,   214,    -1,
     216,   217,   218,   219,   220,    -1,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,    -1,
     236,    -1,   238,   239,   240,   241,   242,   243,   244,    -1,
     246,    -1,   248,   249,    -1,   251,    -1,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,    -1,    -1,   273,   274,    -1,
     276,   277,    -1,   279,   280,   281,    -1,    -1,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,    -1,   323,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,    -1,    -1,
     336,   337,   338,   339,    -1,   341,   342,   343,    -1,   345,
      -1,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,    -1,   361,   362,   363,   364,   365,
     366,   367,   368,   369,    -1,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,   380,   381,   382,   383,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,    -1,   401,   402,    -1,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
      -1,   427,   428,   429,   430,   431,    -1,   433,   434,   435,
     436,    -1,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,    -1,
     456,   457,    -1,    -1,   460,    -1,   462,   463,   464,   465,
     466,   467,    -1,   469,   470,   471,    -1,    -1,   474,   475,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
     486,   487,   488,    -1,    -1,   491,   492,   493,   494,   495,
      -1,    -1,   498,   499,   500,   501,   502,   503,   504,    -1,
     506,    -1,   508,   509,   510,   511,   512,    -1,    -1,   515,
      -1,    -1,   518,   519,   520,   521,   522,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     536,   537,     7,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    17,    18,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    38,    -1,    40,    -1,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    -1,    -1,    58,    -1,    -1,    61,    -1,    63,    64,
      65,    -1,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    -1,    -1,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,   136,   137,   138,   139,   140,   141,   142,    -1,   144,
      -1,    -1,   147,   148,   149,   150,   151,   152,   153,    -1,
     155,   156,   157,   158,    -1,    -1,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,   173,   174,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,    -1,   191,   192,   193,   194,
     195,    -1,   197,    -1,   199,   200,    -1,    -1,    -1,   204,
     205,   206,   207,    -1,   209,   210,    -1,   212,   213,   214,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,   236,    -1,   238,   239,   240,   241,   242,   243,   244,
      -1,   246,    -1,   248,   249,    -1,   251,    -1,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,    -1,    -1,   273,   274,
      -1,   276,   277,    -1,   279,   280,   281,    -1,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,    -1,   331,   332,   333,    -1,
      -1,   336,   337,   338,   339,    -1,   341,   342,   343,    -1,
     345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,    -1,   361,   362,   363,   364,
     365,   366,   367,   368,   369,    -1,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
     435,   436,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,    -1,    -1,   460,    -1,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,    -1,    -1,   474,
     475,   476,   477,   478,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,    -1,    -1,   491,   492,   493,   494,
     495,    -1,    -1,   498,   499,   500,   501,   502,   503,   504,
      -1,   506,    -1,   508,   509,   510,   511,   512,    -1,    -1,
     515,    -1,    -1,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,     7,    -1,    -1,    -1,    -1,    -1,    13,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    -1,    -1,    -1,    -1,    -1,    61,    -1,    63,
      64,    65,    -1,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    -1,    -1,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,   135,   136,   137,   138,   139,   140,   141,   142,    -1,
     144,    -1,    -1,   147,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,    -1,   191,   192,   193,
     194,   195,    -1,   197,    -1,   199,   200,    -1,    -1,    -1,
     204,   205,   206,   207,    -1,   209,   210,    -1,   212,   213,
     214,    -1,   216,   217,   218,   219,   220,    -1,   222,   223,
     224,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,   236,    -1,   238,   239,   240,   241,   242,   243,
     244,   245,   246,    -1,   248,    -1,    -1,   251,    -1,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,   319,    -1,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,    -1,   336,   337,   338,    -1,   340,   341,   342,   343,
      -1,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,    -1,    -1,   460,    -1,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,    -1,
     474,   475,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,    -1,   491,   492,   493,
     494,   495,    -1,    -1,   498,   499,   500,   501,   502,   503,
     504,    -1,   506,    -1,   508,   509,   510,   511,   512,    -1,
      -1,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,     7,    -1,    -1,    -1,    -1,    12,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      63,    64,    65,    -1,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    -1,    -1,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,   136,   137,   138,   139,   140,   141,   142,
      -1,   144,    -1,    -1,   147,   148,   149,   150,   151,   152,
     153,    -1,   155,   156,   157,   158,    -1,    -1,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
     173,   174,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,    -1,   191,   192,
     193,   194,   195,    -1,   197,    -1,   199,   200,    -1,    -1,
      -1,   204,   205,   206,   207,    -1,   209,   210,    -1,   212,
     213,   214,    -1,   216,   217,   218,   219,   220,    -1,   222,
     223,   224,   225,    -1,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,   236,    -1,   238,   239,   240,   241,   242,
     243,   244,    -1,   246,    -1,   248,    -1,    -1,   251,    -1,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,    -1,    -1,
     273,   274,    -1,   276,    -1,    -1,   279,   280,   281,    -1,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,   319,    -1,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,    -1,   331,   332,
     333,    -1,   335,   336,   337,   338,    -1,    -1,   341,   342,
     343,    -1,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,    -1,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,   435,   436,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,    -1,    -1,   460,    -1,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,    -1,
      -1,   474,   475,   476,   477,   478,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,    -1,   498,   499,   500,   501,   502,
     503,   504,    -1,   506,    -1,   508,   509,   510,   511,   512,
      -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,     7,    -1,    -1,    -1,    -1,
      -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    63,    64,    65,    -1,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    -1,    -1,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,   136,   137,   138,   139,   140,   141,
     142,    -1,   144,    -1,    -1,   147,   148,   149,   150,   151,
     152,   153,    -1,   155,   156,   157,   158,    -1,    -1,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,   173,   174,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,    -1,   191,
     192,   193,   194,   195,    -1,   197,    -1,   199,   200,    -1,
      -1,    -1,   204,   205,   206,   207,    -1,   209,   210,    -1,
     212,   213,   214,    -1,   216,   217,   218,   219,   220,    -1,
     222,   223,   224,   225,    -1,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,   251,
      -1,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,    -1,
      -1,   273,   274,    -1,   276,    -1,    -1,   279,   280,   281,
      -1,    -1,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,    -1,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,    -1,    -1,   336,   337,   338,    -1,    -1,   341,
     342,   343,    -1,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,    -1,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,    -1,    -1,   460,    -1,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,    -1,   474,   475,   476,   477,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,    -1,    -1,   491,
     492,   493,   494,   495,    -1,    -1,   498,   499,   500,   501,
     502,   503,   504,    -1,   506,    -1,   508,   509,   510,   511,
     512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,     7,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    18,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    -1,    -1,    -1,    -1,    -1,
      61,    -1,    63,    64,    65,    -1,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    -1,    -1,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,   136,   137,   138,   139,   140,
     141,   142,    -1,   144,    -1,    -1,   147,   148,   149,   150,
     151,   152,   153,    -1,   155,   156,   157,   158,    -1,    -1,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,    -1,
     191,   192,   193,   194,   195,    -1,   197,    -1,   199,   200,
      -1,    -1,    -1,   204,   205,   206,   207,    -1,   209,   210,
      -1,   212,   213,   214,    -1,   216,   217,   218,   219,   220,
      -1,   222,   223,   224,   225,    -1,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,
     251,    -1,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
      -1,    -1,   273,   274,    -1,   276,    -1,    -1,   279,   280,
     281,    -1,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,   318,   319,    -1,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,    -1,
     331,   332,   333,    -1,    -1,   336,   337,   338,    -1,    -1,
     341,   342,   343,    -1,   345,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,    -1,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,   435,   436,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,    -1,   460,
      -1,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,    -1,   474,   475,   476,   477,   478,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,    -1,   498,   499,   500,
     501,   502,   503,   504,    -1,   506,    -1,   508,   509,   510,
     511,   512,    -1,    -1,   515,    -1,    -1,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,     7,    -1,    -1,
      -1,    -1,    12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    63,    64,    65,    -1,    67,    68,    69,
      70,    -1,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    -1,    -1,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
      -1,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,    -1,   124,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   134,   135,   136,   137,   138,   139,
     140,   141,   142,    -1,   144,    -1,    -1,   147,   148,   149,
     150,   151,   152,   153,    -1,   155,   156,   157,   158,    -1,
      -1,   161,   162,   163,   164,   165,    -1,   167,   168,   169,
     170,    -1,   172,   173,   174,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,   189,
      -1,   191,   192,   193,   194,   195,    -1,   197,    -1,   199,
     200,    -1,    -1,    -1,   204,   205,   206,   207,    -1,   209,
     210,    -1,   212,   213,   214,    -1,   216,   217,   218,   219,
     220,    -1,   222,   223,   224,   225,    -1,   227,   228,   229,
     230,   231,   232,   233,   234,    -1,   236,    -1,   238,   239,
     240,   241,   242,   243,   244,    -1,   246,    -1,   248,    -1,
      -1,   251,    -1,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,    -1,    -1,   273,   274,    -1,   276,    -1,    -1,   279,
     280,   281,    -1,    -1,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,    -1,   318,   319,
      -1,   321,    -1,   323,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,    -1,    -1,   336,   337,   338,    -1,
      -1,   341,   342,   343,    -1,   345,    -1,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
      -1,   361,   362,   363,   364,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,   374,   375,   376,   377,   378,    -1,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
      -1,   401,   402,    -1,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
      -1,   421,   422,   423,   424,   425,    -1,   427,   428,   429,
     430,   431,    -1,   433,   434,   435,   436,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,    -1,   456,   457,    -1,    -1,
     460,    -1,   462,   463,   464,   465,   466,   467,    -1,   469,
     470,   471,    -1,    -1,   474,   475,   476,   477,   478,    -1,
     480,   481,   482,   483,   484,   485,   486,   487,   488,    -1,
      -1,   491,   492,   493,   494,   495,    -1,    -1,   498,   499,
     500,   501,   502,   503,   504,    -1,   506,    -1,   508,   509,
     510,   511,   512,    -1,     7,   515,    -1,    -1,   518,   519,
     520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
     530,   531,   532,   533,   534,   535,   536,   537,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    -1,    -1,    -1,    -1,    -1,    61,    -1,
      63,    64,    65,    -1,    67,    68,    69,    70,    -1,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    -1,    -1,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,    -1,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
      -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   134,   135,   136,   137,   138,   139,   140,   141,   142,
      -1,   144,    -1,    -1,   147,   148,   149,   150,   151,   152,
     153,    -1,   155,   156,   157,   158,    -1,    -1,   161,   162,
     163,   164,   165,    -1,   167,   168,   169,   170,    -1,   172,
     173,   174,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,   189,    -1,   191,   192,
     193,   194,   195,    -1,   197,    -1,   199,   200,    -1,    -1,
      -1,   204,   205,   206,   207,    -1,   209,   210,    -1,   212,
     213,   214,    -1,   216,   217,   218,   219,   220,    -1,   222,
     223,   224,   225,    -1,   227,   228,   229,   230,   231,   232,
     233,   234,    -1,   236,    -1,   238,   239,   240,   241,   242,
     243,   244,    -1,   246,    -1,   248,    -1,    -1,   251,    -1,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,    -1,    -1,
     273,   274,    -1,   276,    -1,    -1,   279,   280,   281,    -1,
      -1,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,    -1,   318,   319,    -1,   321,    -1,
     323,   324,   325,   326,   327,   328,   329,    -1,   331,   332,
     333,    -1,    -1,   336,   337,   338,    -1,    -1,   341,   342,
     343,    -1,   345,    -1,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,    -1,   361,   362,
     363,   364,   365,   366,   367,   368,   369,    -1,   371,   372,
     373,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,    -1,   421,   422,
     423,   424,   425,    -1,   427,   428,   429,   430,   431,    -1,
     433,   434,   435,   436,    -1,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,    -1,   456,   457,    -1,    -1,   460,    -1,   462,
     463,   464,   465,   466,   467,    -1,   469,   470,   471,    -1,
      -1,   474,   475,   476,   477,   478,    -1,   480,   481,   482,
     483,   484,   485,   486,   487,   488,    -1,    -1,   491,   492,
     493,   494,   495,    -1,    -1,   498,   499,   500,   501,   502,
     503,   504,    -1,   506,    -1,   508,   509,   510,   511,   512,
      -1,    -1,   515,    -1,    -1,   518,   519,   520,   521,   522,
     523,   524,   525,   526,   527,   528,   529,   530,   531,   532,
     533,   534,   535,   536,   537,     7,    -1,    -1,    -1,    -1,
      12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    63,    64,    65,    -1,    67,    68,    69,    70,    -1,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    -1,    -1,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,    -1,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,   136,   137,   138,   139,   140,   141,
     142,    -1,   144,    -1,    -1,   147,   148,   149,   150,   151,
     152,   153,    -1,   155,   156,   157,   158,    -1,    -1,   161,
     162,   163,   164,   165,    -1,   167,   168,   169,   170,    -1,
     172,   173,   174,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   189,    -1,   191,
     192,   193,   194,   195,    -1,   197,    -1,   199,   200,    -1,
      -1,    -1,   204,   205,   206,   207,    -1,   209,   210,    -1,
     212,   213,   214,    -1,   216,   217,   218,   219,   220,    -1,
     222,   223,   224,   225,    -1,   227,   228,   229,   230,   231,
     232,   233,   234,    -1,   236,    -1,   238,   239,   240,   241,
     242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,   251,
      -1,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,    -1,
      -1,   273,   274,    -1,   276,    -1,    -1,   279,   280,   281,
      -1,    -1,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,    -1,   318,   319,    -1,   321,
      -1,   323,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,    -1,    -1,   336,   337,   338,    -1,    -1,   341,
     342,   343,    -1,   345,    -1,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
     362,   363,   364,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,    -1,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,    -1,   421,
     422,   423,   424,   425,    -1,   427,   428,   429,   430,   431,
      -1,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,    -1,   456,   457,    -1,    -1,   460,    -1,
     462,   463,   464,   465,   466,   467,    -1,   469,   470,   471,
      -1,    -1,   474,   475,   476,   477,   478,    -1,   480,   481,
     482,   483,   484,   485,   486,   487,   488,    -1,    -1,   491,
     492,   493,   494,   495,    -1,    -1,   498,   499,   500,   501,
     502,   503,   504,    -1,   506,    -1,   508,   509,   510,   511,
     512,    -1,     7,   515,    -1,    -1,   518,   519,   520,   521,
     522,   523,   524,   525,   526,   527,   528,   529,   530,   531,
     532,   533,   534,   535,   536,   537,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    64,
      65,    -1,    67,    68,    69,    70,    -1,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    -1,    -1,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,    -1,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,    -1,   124,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,
     135,   136,   137,   138,   139,   140,   141,   142,    -1,   144,
      -1,    -1,   147,   148,   149,   150,   151,   152,   153,    -1,
     155,   156,   157,   158,    -1,    -1,   161,   162,   163,   164,
     165,    -1,   167,   168,   169,   170,    -1,   172,   173,   174,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,   189,    -1,   191,   192,   193,   194,
     195,    -1,   197,    -1,   199,   200,    -1,    -1,    -1,   204,
     205,   206,   207,    -1,   209,   210,    -1,   212,   213,   214,
      -1,   216,   217,   218,   219,   220,    -1,   222,   223,   224,
     225,    -1,   227,   228,   229,   230,   231,   232,   233,   234,
      -1,   236,    -1,   238,   239,   240,   241,   242,   243,   244,
      -1,   246,    -1,   248,    -1,    -1,   251,    -1,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,    -1,    -1,   273,   274,
      -1,   276,    -1,    -1,   279,   280,   281,    -1,    -1,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,    -1,   318,   319,    -1,   321,    -1,   323,   324,
     325,   326,   327,   328,   329,    -1,   331,   332,   333,    -1,
      -1,   336,   337,   338,    -1,    -1,   341,   342,   343,    -1,
     345,    -1,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,    -1,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,    -1,   421,   422,   423,   424,
     425,    -1,   427,   428,   429,   430,   431,    -1,   433,   434,
     435,   436,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
      -1,   456,   457,    -1,    -1,   460,    -1,   462,   463,   464,
     465,   466,   467,    -1,   469,   470,   471,    -1,    -1,   474,
     475,   476,   477,   478,    -1,   480,   481,   482,   483,   484,
     485,   486,   487,   488,    -1,    -1,   491,   492,   493,   494,
     495,    -1,    -1,   498,   499,   500,   501,   502,   503,   504,
      -1,   506,    -1,   508,   509,   510,   511,   512,    -1,     7,
     515,    -1,    -1,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    63,    64,    65,    -1,    67,
      68,    69,    70,    -1,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      -1,    -1,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,    -1,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,    -1,   124,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   134,   135,   136,   137,
     138,   139,   140,   141,   142,    -1,   144,    -1,    -1,   147,
     148,   149,   150,   151,   152,   153,    -1,   155,   156,   157,
     158,    -1,    -1,   161,   162,   163,   164,   165,    -1,   167,
     168,   169,   170,    -1,   172,   173,   174,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,   189,    -1,   191,   192,   193,   194,   195,    -1,   197,
      -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,   207,
      -1,   209,   210,    -1,   212,   213,   214,    -1,   216,   217,
     218,   219,   220,    -1,   222,   223,   224,   225,    -1,   227,
     228,   229,   230,   231,   232,   233,   234,    -1,   236,    -1,
     238,   239,   240,   241,   242,   243,   244,    -1,   246,    -1,
     248,    -1,    -1,   251,    -1,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,    -1,    -1,   273,   274,    -1,   276,    -1,
      -1,   279,   280,   281,    -1,    -1,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
     318,   319,    -1,   321,    -1,   323,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,    -1,    -1,   336,   337,
     338,    -1,    -1,   341,   342,   343,    -1,   345,    -1,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,    -1,   361,   362,   363,   364,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,    -1,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,    -1,   421,   422,   423,   424,   425,    -1,   427,
     428,   429,   430,   431,    -1,   433,   434,   435,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,    -1,   456,   457,
      -1,    -1,   460,    -1,   462,   463,   464,   465,   466,   467,
      -1,   469,   470,   471,    -1,    -1,   474,   475,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,   491,   492,   493,   494,   495,    -1,    -1,
     498,   499,   500,   501,   502,   503,   504,    -1,   506,    -1,
     508,   509,   510,   511,   512,    -1,     7,   515,    -1,    -1,
     518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
     528,   529,   530,   531,   532,   533,   534,   535,   536,   537,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    63,    64,    65,    -1,    67,    68,    69,    70,
      -1,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    -1,    -1,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,    -1,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   135,   136,   137,   138,   139,   140,
     141,   142,    -1,   144,    -1,    -1,   147,   148,   149,   150,
     151,   152,   153,    -1,   155,   156,   157,   158,    -1,    -1,
     161,   162,   163,   164,   165,    -1,   167,   168,   169,   170,
      -1,   172,   173,   174,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,   189,    -1,
     191,   192,   193,   194,   195,    -1,   197,    -1,   199,   200,
      -1,    -1,    -1,   204,   205,   206,   207,    -1,   209,   210,
      -1,   212,   213,   214,    -1,   216,   217,   218,   219,   220,
      -1,   222,   223,   224,   225,    -1,   227,   228,   229,   230,
     231,   232,   233,   234,    -1,   236,    -1,   238,   239,   240,
     241,   242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,
     251,    -1,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
      -1,    -1,   273,   274,    -1,   276,    -1,    -1,   279,   280,
     281,    -1,    -1,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,    -1,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,    -1,   318,   319,    -1,
     321,    -1,   323,   324,   325,   326,   327,   328,   329,    -1,
     331,   332,   333,    -1,    -1,   336,   337,   338,    -1,    -1,
     341,   342,   343,    -1,   345,    -1,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,    -1,
     361,   362,   363,   364,   365,   366,   367,   368,   369,    -1,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,    -1,
     421,   422,   423,   424,   425,    -1,   427,   428,   429,   430,
     431,    -1,   433,   434,   435,   436,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,    -1,   456,   457,    -1,    -1,   460,
      -1,   462,   463,   464,   465,   466,   467,    -1,   469,   470,
     471,    -1,    -1,   474,   475,   476,   477,   478,    -1,   480,
     481,   482,   483,   484,   485,   486,   487,   488,    -1,    -1,
     491,   492,   493,   494,   495,    -1,    -1,   498,   499,   500,
     501,   502,   503,   504,    -1,   506,    -1,   508,   509,   510,
     511,   512,    -1,     7,   515,    -1,    -1,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      64,    65,    -1,    67,    68,    69,    70,    -1,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    -1,    -1,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,    -1,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,    -1,
     124,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     134,   135,   136,   137,   138,   139,   140,   141,   142,    -1,
     144,    -1,    -1,   147,   148,   149,   150,   151,   152,   153,
      -1,   155,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,    -1,   167,   168,   169,   170,    -1,   172,   173,
     174,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,    -1,   191,   192,   193,
     194,   195,    -1,   197,    -1,   199,   200,    -1,    -1,    -1,
     204,   205,   206,   207,    -1,   209,   210,    -1,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,    -1,   222,   223,
     224,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
     234,    -1,   236,    -1,   238,   239,   240,   241,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,   251,    -1,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,    -1,   273,
     274,    -1,   276,    -1,    -1,   279,   280,   281,    -1,    -1,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,    -1,   318,   319,    -1,   321,    -1,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
      -1,    -1,   336,   337,   338,    -1,    -1,   341,   342,   343,
      -1,   345,    -1,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,   356,   357,   358,   359,    -1,   361,   362,   363,
     364,   365,   366,   367,   368,   369,    -1,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,    -1,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,    -1,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
     424,   425,    -1,   427,   428,   429,   430,   431,    -1,   433,
     434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,    -1,   456,   457,    -1,    -1,   460,    -1,   462,   463,
     464,   465,   466,   467,    -1,   469,   470,   471,    -1,    -1,
     474,   475,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,   486,   487,   488,    -1,    -1,   491,   492,   493,
     494,   495,    -1,    -1,   498,   499,   500,   501,   502,   503,
     504,    -1,   506,    -1,   508,   509,   510,   511,   512,    -1,
       7,   515,    -1,    -1,   518,   519,   520,   521,   522,   523,
     524,   525,   526,   527,   528,   529,   530,   531,   532,   533,
     534,   535,   536,   537,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    -1,
      -1,    -1,    -1,    -1,    61,    -1,    63,    64,    65,    -1,
      67,    -1,    69,    70,    -1,    72,    73,    74,    -1,    76,
      -1,    78,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    -1,    -1,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,    -1,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,    -1,   124,    -1,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,   136,
     137,   138,   139,   140,   141,   142,    -1,   144,    -1,    -1,
     147,   148,   149,   150,   151,   152,   153,    -1,   155,   156,
     157,   158,    -1,    -1,   161,   162,   163,   164,   165,    -1,
     167,   168,   169,   170,    -1,   172,   173,   174,    -1,   176,
      -1,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,   189,    -1,   191,   192,   193,   194,    -1,    -1,
     197,    -1,   199,   200,    -1,    -1,    -1,   204,   205,   206,
     207,    -1,   209,   210,    -1,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,    -1,   222,   223,   224,   225,    -1,
     227,   228,   229,   230,   231,   232,   233,   234,    -1,   236,
      -1,   238,   239,   240,   241,   242,   243,   244,    -1,   246,
      -1,   248,    -1,    -1,   251,    -1,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,    -1,    -1,   273,   274,    -1,   276,
      -1,    -1,   279,   280,   281,    -1,    -1,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,    -1,   305,    -1,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
      -1,   318,   319,    -1,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,    -1,   331,   332,   333,    -1,    -1,    -1,
     337,   338,    -1,    -1,   341,   342,   343,    -1,   345,    -1,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,   359,    -1,   361,   362,   363,   364,    -1,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,    -1,   411,   412,    -1,   414,   415,   416,
     417,   418,   419,    -1,   421,   422,   423,   424,   425,    -1,
      -1,   428,   429,   430,   431,    -1,   433,   434,   435,   436,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,    -1,   456,
     457,    -1,    -1,   460,    -1,   462,   463,   464,   465,   466,
     467,    -1,   469,   470,   471,    -1,    -1,   474,   475,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,    -1,   486,
     487,   488,    -1,    -1,   491,   492,   493,   494,   495,    -1,
      -1,   498,   499,   500,   501,    -1,   503,   504,    -1,   506,
      -1,   508,   509,   510,   511,   512,    -1,    -1,   515,    -1,
      -1,   518,    -1,   520,   521,   522,   523,   524,   525,   526,
     527,   528,   529,   530,   531,   532,   533,   534,   535,   536,
     537,     7,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    13,    38,    -1,    40,    17,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
      -1,    -1,    58,    -1,    -1,    61,    38,    -1,    40,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,
      -1,    -1,    15,    -1,    17,    -1,    58,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      -1,    -1,    -1,    75,    -1,    38,    -1,    40,    -1,    17,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    -1,    -1,    58,    -1,    -1,    -1,    -1,
      38,    -1,    40,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    17,    18,
      58,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    -1,    -1,    75,    -1,    38,
      -1,    40,    -1,    17,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    -1,    -1,    58,
      -1,    -1,    61,    -1,    38,    -1,    40,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    58,    17,    -1,    61,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
     226,    75,    -1,    -1,    -1,    -1,    38,    -1,    40,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   249,   226,    -1,    58,    17,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    -1,    -1,    75,    -1,    -1,    -1,   249,    38,    -1,
      40,   277,    -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,   226,   202,    -1,    -1,    -1,    58,    -1,
      -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    75,   249,    -1,   226,    -1,
      -1,   317,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,   249,    -1,   339,   277,   317,    -1,    -1,    38,    -1,
      40,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,    58,   277,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     249,    -1,   226,    -1,   317,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     202,    -1,    -1,    -1,    -1,   249,   339,    -1,   277,   317,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,    -1,    -1,
      -1,   339,    -1,   277,    -1,    -1,   196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    17,   249,   317,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      -1,    -1,    -1,    -1,    -1,    -1,   226,    38,    -1,    40,
     339,    -1,    -1,   317,    -1,   277,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,   249,
      -1,    -1,    -1,    -1,    -1,   339,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   317,    -1,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   226,   339,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   317,    -1,   249,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   317,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339,
      -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   249,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   277,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   317,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   339
  };

  const short
  parser::yystos_[] =
  {
       0,    12,   120,   122,   202,   241,   420,   427,   503,   517,
     541,   549,   550,   551,   552,   553,   554,   556,   557,   558,
     559,   562,   564,   571,   581,   582,   590,   624,   686,   717,
     554,   556,   557,   558,   559,     7,    31,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    53,    54,    55,    63,
      64,    65,    67,    68,    69,    70,    72,    73,    74,    75,
      76,    78,    79,    81,    82,    83,    84,    85,    86,    87,
      90,    91,    92,    93,    94,    96,    97,    98,    99,   100,
     104,   105,   106,   107,   108,   109,   111,   112,   113,   114,
     116,   117,   118,   119,   120,   121,   124,   125,   126,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   144,   147,
     148,   149,   150,   151,   152,   153,   155,   156,   157,   158,
     161,   162,   163,   164,   165,   167,   168,   169,   170,   172,
     173,   174,   175,   176,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,   189,   191,   192,   193,   194,   195,
     197,   199,   200,   204,   205,   206,   207,   209,   210,   212,
     213,   214,   216,   217,   218,   219,   220,   222,   223,   224,
     225,   227,   228,   229,   230,   231,   232,   233,   234,   236,
     238,   239,   240,   241,   242,   243,   244,   246,   248,   251,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   273,   274,
     276,   279,   280,   281,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   318,   319,   321,   323,
     324,   325,   326,   327,   328,   329,   331,   332,   333,   336,
     337,   338,   341,   342,   343,   345,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   371,   372,
     373,   374,   375,   376,   377,   378,   380,   381,   382,   383,
     384,   385,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   401,   402,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   421,   422,   423,   424,   425,   427,   428,
     429,   430,   431,   433,   434,   435,   436,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   456,   457,   460,   462,   463,   464,
     465,   466,   467,   469,   470,   471,   474,   475,   476,   477,
     478,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     491,   492,   493,   494,   495,   498,   499,   500,   501,   502,
     503,   504,   506,   508,   509,   510,   511,   512,   515,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   671,
     677,   678,   679,   464,   466,   687,    12,   335,   556,   591,
     592,   603,   610,   611,   679,   247,    52,   159,   583,   613,
     281,   425,   572,   573,   574,   575,   671,    12,   584,   587,
     671,   682,   584,     0,    19,    32,   177,   245,   340,   489,
     614,   615,    12,   556,   562,   581,    18,    13,    13,    13,
      13,    14,    16,   655,   656,   202,   565,   459,   503,   556,
     592,   603,    12,   679,    61,   604,   606,   671,    18,   123,
     203,   237,   252,   275,   304,   403,   608,   606,   606,    22,
     679,   718,     3,     5,     7,     8,    12,    20,    22,    23,
      38,    71,    76,    77,    79,    88,    89,    92,    93,   102,
     110,   123,   130,   140,   141,   145,   163,   182,   187,   188,
     194,   201,   203,   221,   237,   243,   244,   246,   249,   250,
     252,   275,   277,   304,   317,   320,   322,   325,   344,   346,
     382,   403,   432,   435,   450,   453,   461,   467,   471,   479,
     504,   507,   555,   556,   557,   626,   627,   628,   630,   633,
     639,   640,   641,   642,   648,   649,   658,   659,   667,   670,
     671,   672,   673,   677,   684,   706,   709,   711,   712,   713,
     714,   716,   722,   723,   724,   725,   726,   727,   728,   657,
     658,   572,   572,    16,    24,   472,   626,   645,    18,    12,
     680,   551,    51,   164,   177,   245,   252,   278,   379,   420,
     427,   489,   514,   608,   615,   620,   625,   731,    52,   159,
     593,   593,    82,   593,   330,   618,   619,   620,   621,   614,
     615,    12,   626,     7,    22,    52,    56,    57,    58,    59,
      60,    61,    62,    66,    80,    88,    89,    95,   101,   103,
     115,   122,   127,   128,   129,   131,   132,   133,   143,   146,
     154,   159,   160,   166,   171,   177,   188,   190,   196,   198,
     202,   208,   211,   215,   226,   235,   245,   247,   271,   272,
     278,   282,   283,   317,   322,   330,   334,   335,   339,   340,
     360,   370,   386,   400,   420,   426,   437,   455,   458,   459,
     468,   472,   473,   479,   489,   490,   496,   497,   505,   513,
     514,   516,   517,   674,   676,   677,   678,   683,   656,     8,
     566,   679,    13,   679,   671,    12,   592,   252,   344,   592,
     344,   252,   608,   344,   252,    12,   553,   719,   556,   557,
     626,     5,   723,     5,   723,   626,   637,    12,   506,   715,
      12,   703,   555,    12,   182,   626,   703,    12,     7,    17,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    40,    58,    61,    75,   226,   249,   277,   317,   339,
     631,   667,   675,   345,   653,    18,   585,   626,   655,    12,
     726,   726,    12,   726,   202,   589,   671,     6,   188,   334,
     479,   576,   577,   578,   579,   580,   673,   677,   678,   707,
     724,   725,   726,   576,    13,    18,   587,   681,   682,    61,
     145,   211,   594,   640,   641,   671,   684,   732,   733,   638,
     639,   671,   593,   593,   592,    52,   622,   626,   626,   645,
     646,   657,   671,   734,   593,   626,   252,   562,   562,   616,
     617,   626,   562,   623,   626,   621,   620,   619,   645,    15,
     567,   568,    12,   604,    13,    12,   681,   592,   334,   497,
     609,   592,   252,   592,   671,   720,   721,    13,   513,   634,
     635,   626,     3,   704,   705,   138,   296,   299,   535,   650,
     651,   555,   626,   643,   644,   647,   652,   672,   685,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,    76,    79,    92,    93,   140,   141,   145,   163,   194,
     243,   244,   246,   325,   382,   435,   450,   467,   471,   504,
     701,   702,   708,   709,   710,   712,   713,   716,   728,   626,
     674,    66,   612,    12,   556,   632,   317,   322,   626,    75,
     226,   277,   626,    52,    59,   437,   669,   626,    12,   654,
     671,   659,   590,    13,    22,    52,   159,   505,   626,   644,
     705,   138,   299,   535,   729,   591,   625,    18,   626,    13,
      18,   588,    82,   606,   655,    18,   211,   595,    18,   655,
     558,   560,   561,   562,   590,   561,   609,    18,    75,   606,
      18,    24,    18,   561,   592,    18,    62,   154,   497,   607,
      13,   151,   570,   124,   150,   175,   322,   569,   370,   671,
     688,   689,   690,   691,   692,   697,   681,    13,   626,    12,
     592,   609,    13,    18,   626,   166,   635,   636,    61,    13,
      18,    13,   202,   196,   202,    13,    18,    13,    28,    42,
      12,   317,   629,   630,   645,   322,   612,   632,   626,   556,
     660,   671,   625,    13,   644,   644,   647,    18,   614,    13,
     594,   577,   682,    12,   593,   641,    82,   639,    32,   623,
     626,   626,   671,   609,   617,   336,   668,   670,   540,   605,
     726,     8,     8,     8,   265,   701,    13,    18,    13,   681,
     553,   721,   468,   626,   171,   702,   730,   705,   626,   626,
     626,   647,   626,   626,   705,   182,    20,    21,    22,    23,
      58,    13,   629,   355,   661,   594,   614,   606,   614,   505,
      13,   215,   602,   553,   563,    12,   406,   596,   598,   599,
     601,   626,   606,   593,   731,   606,    24,    12,   605,   193,
     270,    12,   700,   690,    13,   626,    13,   202,   196,    13,
     555,   629,   629,   629,   629,   626,    58,    82,   614,   602,
      13,    13,    13,   647,   626,    13,    13,    12,    18,   596,
     597,   598,   600,   601,   626,   626,   666,   670,   681,   699,
     626,   626,   626,   645,   213,   380,   410,   662,   586,   614,
     645,   599,    18,    61,    13,   519,   698,   693,    75,   126,
     485,   626,   663,   664,   663,   663,    13,    13,    13,   600,
     671,   346,    13,   694,   664,   409,   195,   365,   195,   365,
     665,   665,   665,   317,   322,   370,   695,   696,    58,   322,
     265,   664
  };

  const short
  parser::yyr1_[] =
  {
       0,   548,   549,   550,   550,   551,   551,   552,   552,   552,
     552,   552,   552,   553,   553,   554,   554,   555,   555,   556,
     556,   557,   557,   558,   558,   558,   558,   558,   559,   559,
     559,   560,   560,   560,   561,   561,   562,   562,   563,   564,
     565,   566,   567,   568,   568,   569,   569,   569,   569,   570,
     570,   571,   571,   571,   572,   573,   573,   574,   575,   575,
     576,   576,   577,   577,   578,   578,   578,   578,   579,   579,
     580,   580,   580,   580,   581,   581,   581,   581,   581,   581,
     582,   582,   583,   584,   584,   585,   586,   587,   588,   588,
     589,   589,   590,   591,   591,   592,   592,   592,   592,   592,
     593,   593,   593,   594,   594,   594,   595,   595,   595,   596,
     596,   597,   597,   598,   599,   599,   600,   600,   600,   601,
     602,   602,   603,   603,   603,   603,   603,   603,   604,   604,
     604,   604,   605,   605,   605,   606,   606,   607,   607,   607,
     608,   608,   608,   608,   608,   608,   608,   609,   609,   610,
     610,   611,   611,   611,   612,   612,   613,   613,   614,   614,
     615,   616,   616,   617,   617,   618,   618,   618,   618,   619,
     619,   620,   620,   621,   622,   622,   623,   624,   624,   625,
     625,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   627,
     628,   629,   629,   629,   629,   629,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   631,   631,   631,   631,
     631,   631,   631,   631,   632,   632,   633,   634,   634,   635,
     636,   636,   637,   637,   638,   638,   639,   639,   640,   640,
     640,   640,   640,   640,   640,   641,   641,   642,   643,   643,
     644,   644,   645,   645,   646,   646,   647,   647,   647,   648,
     648,   648,   649,   650,   651,   651,   651,   651,   652,   652,
     652,   652,   653,   653,   653,   654,   655,   655,   656,   656,
     656,   657,   657,   658,   658,   659,   659,   659,   659,   660,
     660,   661,   661,   662,   662,   662,   662,   662,   663,   663,
     664,   664,   664,   664,   664,   665,   665,   666,   667,   668,
     668,   669,   669,   669,   670,   671,   671,   671,   672,   672,
     672,   672,   673,   673,   673,   673,   673,   673,   673,   673,
     673,   673,   673,   673,   673,   673,   673,   673,   673,   673,
     673,   673,   673,   673,   673,   674,   674,   674,   674,   675,
     676,   676,   676,   676,   676,   676,   676,   676,   676,   676,
     676,   676,   676,   676,   676,   676,   676,   676,   676,   676,
     676,   676,   676,   676,   676,   676,   676,   676,   676,   676,
     676,   676,   676,   676,   676,   676,   676,   676,   676,   676,
     676,   676,   676,   676,   676,   676,   676,   676,   676,   676,
     676,   676,   676,   676,   676,   676,   676,   676,   676,   676,
     676,   676,   676,   676,   676,   676,   676,   676,   676,   676,
     676,   676,   676,   676,   676,   676,   676,   676,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   677,   677,
     677,   677,   677,   677,   677,   677,   677,   677,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   678,   678,   678,   678,   678,   678,   678,   678,   678,
     678,   679,   679,   680,   680,   681,   681,   682,   683,   684,
     684,   685,   686,   687,   687,   687,   688,   688,   689,   689,
     690,   690,   691,   692,   693,   694,   694,   695,   696,   696,
     696,   697,   698,   698,   699,   700,   701,   702,   702,   702,
     702,   703,   703,   704,   704,   705,   706,   706,   706,   707,
     707,   708,   708,   709,   709,   709,   709,   709,   709,   709,
     709,   709,   709,   709,   710,   710,   711,   711,   712,   713,
     714,   714,   714,   714,   714,   715,   715,   716,   716,   717,
     718,   719,   719,   720,   720,   721,   722,   722,   722,   722,
     722,   722,   722,   722,   723,   724,   724,   724,   725,   725,
     725,   726,   727,   727,   728,   728,   729,   729,   729,   729,
     730,   731,   731,   731,   731,   731,   731,   731,   731,   731,
     731,   731,   731,   731,   732,   732,   733,   733,   734,   734
  };

  const signed char
  parser::yyr2_[] =
  {
       0,     2,     1,     1,     3,     1,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       3,     3,     3,     1,     2,     3,     3,     4,     0,     1,
       3,     0,     1,     3,     1,     1,     1,     1,     1,     6,
       1,     1,     1,     2,     0,     2,     2,     1,     2,     2,
       0,     2,     3,     3,     1,     3,     3,     1,     1,     3,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     7,     9,     4,     4,     4,     1,
       2,     2,     1,     1,     3,     0,     0,     7,     0,     0,
       2,     0,     2,     1,     3,     2,     1,     4,     2,     2,
       1,     1,     0,     4,     4,     0,     4,     4,     0,     1,
       3,     1,     3,     4,     1,     1,     1,     3,     1,     2,
       2,     0,     3,     4,     5,     4,     5,     4,     5,     2,
       4,     1,     2,     2,     0,     1,     0,     1,     1,     0,
       1,     2,     2,     1,     1,     2,     1,     4,     2,     1,
       1,     2,     2,     4,     1,     0,     1,     0,     1,     0,
       3,     1,     3,     4,     3,     2,     2,     1,     1,     1,
       0,     2,     4,     2,     1,     1,     1,     4,     5,     2,
       0,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     1,     1,     2,     3,     4,
       3,     4,     6,     7,     3,     4,     3,     2,     4,     3,
       3,     1,     3,     3,     3,     3,     1,     1,     3,     1,
       1,     1,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     2,     1,     3,     5,     1,     2,     4,
       2,     0,     1,     0,     1,     3,     1,     2,     3,     5,
       6,     8,     6,     6,     4,     1,     1,     2,     1,     0,
       1,     3,     1,     3,     2,     4,     1,     3,     3,     4,
       4,     4,     6,     3,     1,     1,     1,     1,     5,     5,
       3,     3,     2,     2,     0,     6,     1,     2,     2,     2,
       3,     1,     0,     1,     3,     3,     2,     1,     1,     1,
       0,     3,     0,     0,     3,     3,     3,     0,     1,     4,
       2,     2,     2,     2,     2,     0,     0,     1,     1,     1,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     3,     0,     1,     3,     1,     1,     1,
       2,     1,     7,     1,     1,     0,     1,     0,     1,     3,
       1,     1,     1,     6,     0,     2,     0,     1,     2,     1,
       2,     6,     2,     0,     0,     0,     1,     1,     1,     1,
       1,     3,     0,     1,     3,     1,     1,     1,     1,     1,
       1,     1,     4,     1,     1,     1,     1,     1,     1,     1,
       2,     1,     2,     1,     1,     1,     1,     1,     4,     1,
       2,     1,     1,     1,     1,     1,     0,     1,     1,     4,
       1,     1,     4,     1,     3,     1,     1,     1,     1,     1,
       2,     3,     2,     1,     1,     2,     2,     1,     1,     2,
       2,     1,     1,     1,     0,     1,     1,     1,     1,     0,
       1,     1,     2,     1,     1,     4,     3,     2,     2,     3,
       3,     3,     2,     2,     2,     1,     2,     4,     3,     5
  };




#if YYDEBUG
  const short
  parser::yyrline_[] =
  {
       0,   397,   397,   403,   410,   423,   424,   427,   428,   429,
     430,   431,   432,   436,   437,   440,   441,   445,   446,   450,
     451,   454,   455,   462,   463,   468,   479,   494,   515,   516,
     522,   533,   534,   539,   545,   546,   549,   550,   556,   563,
     574,   578,   585,   591,   596,   602,   607,   612,   616,   623,
     625,   629,   633,   634,   637,   643,   647,   654,   661,   665,
     671,   677,   684,   688,   694,   700,   706,   712,   718,   724,
     730,   731,   732,   733,   765,   778,   793,   800,   807,   813,
     820,   825,   831,   834,   838,   855,   859,   864,   876,   877,
     887,   888,   893,   899,   900,   913,   924,   925,   926,   927,
     941,   945,   946,   973,   981,   988,   991,   998,  1005,  1010,
    1016,  1023,  1029,  1036,  1042,  1043,  1048,  1049,  1050,  1055,
    1059,  1060,  1102,  1103,  1104,  1113,  1122,  1123,  1127,  1131,
    1135,  1139,  1147,  1148,  1149,  1155,  1159,  1171,  1175,  1179,
    1190,  1191,  1195,  1199,  1203,  1207,  1211,  1230,  1240,  1244,
    1245,  1249,  1250,  1251,  1254,  1255,  1258,  1259,  1262,  1263,
    1266,  1274,  1280,  1287,  1288,  1299,  1304,  1309,  1310,  1314,
    1315,  1319,  1320,  1324,  1331,  1332,  1336,  1345,  1354,  1395,
    1396,  1400,  1404,  1408,  1412,  1416,  1420,  1424,  1428,  1429,
    1433,  1437,  1441,  1445,  1449,  1453,  1457,  1461,  1465,  1469,
    1473,  1489,  1506,  1512,  1518,  1522,  1526,  1530,  1534,  1543,
    1549,  1556,  1557,  1561,  1565,  1569,  1579,  1580,  1582,  1583,
    1587,  1588,  1589,  1590,  1596,  1601,  1614,  1618,  1622,  1626,
    1630,  1634,  1638,  1642,  1649,  1655,  1661,  1668,  1675,  1683,
    1691,  1695,  1699,  1703,  1707,  1713,  1721,  1722,  1740,  1751,
    1765,  1766,  1767,  1768,  1782,  1802,  1809,  1815,  1824,  1828,
    1835,  1841,  1848,  1854,  1861,  1868,  1877,  1878,  1879,  1887,
    1894,  1900,  1909,  1916,  1925,  1931,  1937,  1943,  1952,  1961,
    1965,  1969,  1976,  1980,  1981,  1985,  2000,  2001,  2004,  2005,
    2006,  2016,  2022,  2025,  2026,  2029,  2030,  2031,  2032,  2047,
    2048,  2052,  2053,  2060,  2061,  2066,  2071,  2076,  2083,  2087,
    2097,  2101,  2105,  2109,  2113,  2119,  2120,  2124,  2132,  2137,
    2138,  2153,  2157,  2161,  2168,  2201,  2202,  2203,  2208,  2209,
    2210,  2211,  2214,  2215,  2216,  2217,  2218,  2219,  2220,  2221,
    2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2230,  2231,
    2232,  2233,  2234,  2235,  2236,  2244,  2245,  2246,  2248,  2254,
    2270,  2271,  2272,  2273,  2274,  2275,  2276,  2277,  2278,  2279,
    2280,  2281,  2282,  2283,  2284,  2285,  2286,  2287,  2288,  2289,
    2290,  2291,  2292,  2293,  2294,  2295,  2296,  2297,  2298,  2299,
    2300,  2301,  2302,  2303,  2304,  2305,  2306,  2307,  2308,  2309,
    2310,  2311,  2312,  2313,  2314,  2315,  2316,  2317,  2318,  2319,
    2320,  2321,  2322,  2323,  2324,  2325,  2326,  2327,  2328,  2329,
    2330,  2331,  2332,  2333,  2334,  2335,  2336,  2337,  2338,  2339,
    2340,  2341,  2342,  2343,  2344,  2345,  2346,  2347,  2350,  2351,
    2352,  2353,  2354,  2355,  2356,  2357,  2358,  2359,  2360,  2361,
    2362,  2363,  2364,  2365,  2366,  2367,  2368,  2369,  2370,  2371,
    2372,  2373,  2374,  2375,  2376,  2377,  2378,  2379,  2380,  2381,
    2382,  2383,  2384,  2385,  2386,  2387,  2388,  2389,  2390,  2391,
    2392,  2393,  2394,  2395,  2396,  2397,  2398,  2399,  2400,  2401,
    2402,  2403,  2404,  2405,  2406,  2407,  2408,  2409,  2410,  2411,
    2412,  2413,  2414,  2415,  2416,  2417,  2418,  2419,  2420,  2421,
    2422,  2423,  2424,  2425,  2426,  2427,  2428,  2429,  2430,  2431,
    2432,  2433,  2434,  2435,  2436,  2437,  2438,  2439,  2440,  2441,
    2442,  2443,  2444,  2445,  2446,  2447,  2448,  2449,  2450,  2451,
    2452,  2453,  2454,  2455,  2456,  2457,  2458,  2459,  2460,  2461,
    2462,  2463,  2464,  2465,  2466,  2467,  2468,  2469,  2470,  2471,
    2472,  2473,  2474,  2475,  2476,  2477,  2478,  2479,  2480,  2481,
    2482,  2483,  2484,  2485,  2486,  2487,  2488,  2489,  2490,  2491,
    2492,  2493,  2494,  2495,  2496,  2497,  2498,  2499,  2500,  2501,
    2502,  2503,  2504,  2505,  2506,  2507,  2508,  2509,  2510,  2511,
    2512,  2513,  2514,  2515,  2516,  2517,  2518,  2519,  2520,  2521,
    2522,  2523,  2524,  2525,  2526,  2527,  2528,  2529,  2530,  2531,
    2532,  2533,  2534,  2535,  2536,  2537,  2538,  2539,  2540,  2541,
    2542,  2543,  2544,  2545,  2546,  2547,  2548,  2549,  2550,  2551,
    2552,  2553,  2554,  2555,  2556,  2557,  2558,  2559,  2560,  2561,
    2562,  2563,  2564,  2565,  2566,  2567,  2568,  2569,  2570,  2571,
    2572,  2573,  2574,  2575,  2576,  2577,  2578,  2579,  2580,  2581,
    2582,  2583,  2584,  2585,  2586,  2587,  2588,  2589,  2590,  2591,
    2592,  2593,  2594,  2595,  2596,  2597,  2598,  2599,  2600,  2601,
    2602,  2603,  2604,  2605,  2606,  2607,  2608,  2609,  2610,  2611,
    2612,  2613,  2614,  2615,  2616,  2617,  2618,  2619,  2620,  2621,
    2622,  2623,  2624,  2625,  2626,  2627,  2628,  2629,  2630,  2631,
    2632,  2633,  2634,  2635,  2636,  2637,  2638,  2639,  2640,  2641,
    2642,  2643,  2644,  2645,  2646,  2647,  2648,  2649,  2650,  2651,
    2652,  2653,  2654,  2655,  2656,  2657,  2658,  2659,  2660,  2661,
    2662,  2663,  2664,  2665,  2666,  2667,  2668,  2669,  2670,  2671,
    2672,  2673,  2674,  2675,  2676,  2677,  2678,  2679,  2692,  2693,
    2694,  2695,  2696,  2697,  2698,  2699,  2700,  2701,  2702,  2703,
    2704,  2705,  2706,  2707,  2708,  2709,  2710,  2711,  2712,  2713,
    2714,  2715,  2716,  2717,  2718,  2719,  2720,  2721,  2722,  2723,
    2724,  2725,  2726,  2727,  2728,  2729,  2730,  2731,  2732,  2733,
    2734,  2735,  2736,  2737,  2738,  2739,  2740,  2741,  2742,  2743,
    2744,  2745,  2746,  2747,  2748,  2749,  2750,  2751,  2752,  2753,
    2754,  2792,  2793,  2796,  2800,  2807,  2808,  2810,  2811,  2822,
    2823,  2826,  2840,  2857,  2858,  2859,  2863,  2867,  2874,  2880,
    2889,  2890,  2895,  2902,  2912,  2915,  2920,  2924,  2946,  2950,
    2954,  2961,  2968,  2973,  2979,  2989,  2994,  3001,  3003,  3007,
    3011,  3018,  3022,  3029,  3035,  3042,  3062,  3063,  3064,  3068,
    3069,  3072,  3076,  3084,  3088,  3092,  3097,  3102,  3103,  3108,
    3115,  3122,  3123,  3129,  3136,  3140,  3146,  3157,  3163,  3171,
    3178,  3186,  3190,  3194,  3198,  3204,  3208,  3215,  3220,  3236,
    3252,  3262,  3266,  3276,  3282,  3290,  3302,  3303,  3304,  3305,
    3306,  3316,  3326,  3331,  3339,  3342,  3347,  3353,  3359,  3360,
    3361,  3363,  3366,  3372,  3379,  3380,  3388,  3392,  3396,  3400,
    3404,  3412,  3417,  3421,  3425,  3429,  3437,  3444,  3448,  3454,
    3460,  3466,  3472,  3478,  3489,  3498,  3509,  3517,  3525,  3531
  };

  void
  parser::yy_stack_print_ () const
  {
    *yycdebug_ << "Stack now";
    for (stack_type::const_iterator
           i = yystack_.begin (),
           i_end = yystack_.end ();
         i != i_end; ++i)
      *yycdebug_ << ' ' << int (i->state);
    *yycdebug_ << '\n';
  }

  void
  parser::yy_reduce_print_ (int yyrule) const
  {
    int yylno = yyrline_[yyrule];
    int yynrhs = yyr2_[yyrule];
    // Print the symbols being reduced, and their result.
    *yycdebug_ << "Reducing stack by rule " << yyrule - 1
               << " (line " << yylno << "):\n";
    // The symbols being reduced.
    for (int yyi = 0; yyi < yynrhs; yyi++)
      YY_SYMBOL_PRINT ("   $" << yyi + 1 << " =",
                       yystack_[(yynrhs) - (yyi + 1)]);
  }
#endif // YYDEBUG


#line 5 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"
} //  lingodb 
#line 21080 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/parser.cpp"

#line 3537 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/parser.y"

void
lingodb::parser::error (const location_type& l, const std::string& m)
{
  throw lingodb::SyntaxError(m, l);
}
