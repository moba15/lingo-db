#line 2 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/lexer.cpp"

#line 4 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 127
#define YY_END_OF_BUFFER 128
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[425] =
    {   0,
        0,    0,  128,  127,  120,   22,  126,  127,  126,   13,
      127,    1,    2,   11,    8,    6,    9,    5,   10,  123,
      127,    7,   17,   12,   19,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,    3,
        4,  126,  120,    0,  126,   15,    0,  122,    0,    0,
      125,  120,  124,  124,  123,   21,   16,   14,   18,  121,
      121,  121,  121,   26,  121,  121,  121,   34,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,   67,

       76,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,   89,   90,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,   20,  120,  120,  120,  120,  120,  124,
      121,   24,   25,   28,   27,  121,  121,  121,  121,  121,
      121,  121,   42,  121,  121,   44,  121,  121,  121,  121,
      121,  121,   51,  121,  121,  121,  121,  121,  121,  121,
       61,  121,  121,  121,  121,  121,  121,   70,  121,   78,
      121,  121,  121,  121,  121,  121,   85,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,   99,  121,

      102,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  120,  120,  121,  121,
      121,   33,   35,   36,   37,   41,  121,  121,   43,  121,
      121,   46,  121,   48,   50,  121,  121,  121,  121,  121,
      121,  121,  121,   62,   63,  121,  121,  121,  121,   71,
       31,  121,   75,   77,   79,   80,  121,  121,  121,  121,
       86,  121,  121,  121,  121,   93,  121,  121,  121,  121,
      121,  100,  121,  103,  121,  121,  121,  107,  108,  121,
      109,  121,  121,  121,  121,  121,  116,  121,  118,  119,
      120,  121,  121,  121,  121,  121,  121,  121,  121,  121,

      121,  121,  121,  121,  121,  121,   57,   58,  121,   65,
      121,   68,  121,  121,  121,   81,  121,   83,  121,  121,
      121,   91,   92,  121,  121,  121,   97,  121,  121,  121,
      121,  106,  121,  121,  112,  121,  121,  121,  117,  121,
      121,   30,  121,  121,   39,  121,  121,  121,  121,   56,
       52,   53,   54,  121,   59,   60,  121,   66,   69,  121,
      121,  121,   82,  121,  121,   88,  121,  121,  121,   98,
      101,  104,  121,  121,  121,  113,  121,  121,  121,   29,
       32,  121,   40,   45,  121,  121,   55,  121,   72,  121,
      121,   84,   87,  121,  121,   96,  121,  121,  121,  114,

      115,  121,  121,  121,   47,  121,  121,   74,  121,  121,
      121,  121,  121,   23,   38,   49,   64,   73,   94,   95,
      105,  110,  111,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    7,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
       18,   19,   18,   18,   18,   20,   18,   21,   22,   23,
       24,   25,    7,    7,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   42,
       51,    1,   52,    7,   53,    7,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   42,   70,   71,   72,   73,   74,   75,   76,
       77,   42,    1,   78,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[79] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1
    } ;

static const flex_int16_t yy_base[429] =
    {   0,
        0,    0,  143, 1187,   77, 1187,   78,  133,   92,  106,
      181, 1187, 1187,  129,  150, 1187,  206,   69,  227,  106,
       85, 1187,  241,  255,  278,  101,  258,  331,  270,  132,
      308,   65,   56,  120,   44,   90,  211,  175,  271,  341,
      288,    0,  193,  349,  386,   93,  123,  117,  152, 1187,
     1187,  418,  272,   83,  445,  459,   90,   88,  534,  609,
     1187,  686,  182,  206,  347, 1187,  482,  496,  558,    0,
      160,  210,  293,  243,  150,  249,  242,    0,  250,  292,
      286,  311,  312,  339,  360,  390,  353,  328,  392,  416,
      421,  500,  414,  425,  524,  446,  451,  458,  407,  548,

        0,  468,  435,  491,  489,  485,  497,  446,  472,  531,
      517,    0,  548,  534,  550,  541,  565,  568,  592,  565,
      565,  555,  580,  611,  592,  612,  605,  599,  619,  612,
      617,  606,  622,  700,  334,  586,  648,  777,  854,  513,
      613,    0,    0,    0,    0,  610,  627,  627,  674,  616,
      619,  674,    0,  636,  672,    0,  680,  682,  692,  650,
      680,  696,    0,  701,  699,  674,  704,  687,  707,  698,
        0,  699,  701,  694,  707,  713,  722,  753,  720,    0,
      705,  730,  734,  724,  731,  740,    0,  754,  765,  754,
      769,  774,  763,  762,  780,  771,  777,  775,  770,  785,

        0,  786,  783,  776,  781,  777,  785,  796,  799,  795,
      802,  802,  832,  825,  820,  829,  658,  931,  835,  843,
      835,  846,    0,    0,  854,    0,  838,  854,    0,  847,
      848,    0,  853,    0,    0,  848,  849,  849,  852,  870,
      867,  855,  858,    0,    0,  862,  867,  877,  879,    0,
        0,  897,    0,    0,    0,    0,  878,  892,  897,  898,
        0,  899,  915,  908,  909,    0,  919,  929,  934,  917,
      917,    0,  937,    0,  927,  925,  941,    0,    0,  930,
        0,  929,  933,  946,  944,  946,    0,  952,    0,    0,
      981,  952,  956,  946,  966,  967,  968,  964,  980,  973,

      972,  983,  970,  972,  988,  991,    0,  108,  973,    0,
      990,    0,  979,  995,  983,    0,  998,    0, 1006,  999,
      991,    0,    0,  992, 1009,  997,    0, 1003, 1001, 1017,
     1009,    0, 1010, 1019,    0, 1018, 1033, 1026,    0, 1042,
     1030,    0, 1031, 1029,    0, 1030, 1034, 1031, 1050,    0,
        0,    0,    0, 1035,    0,    0, 1047,    0,    0, 1040,
     1054, 1059,    0, 1051, 1062,    0, 1057, 1058, 1044,    0,
        0,    0, 1061, 1074, 1075,    0, 1065, 1073, 1066,    0,
        0, 1084,    0,    0, 1085, 1072,    0, 1083,    0, 1096,
     1088,    0,    0, 1086, 1088,    0, 1090, 1092, 1101,    0,

        0, 1104, 1093, 1094,    0, 1107, 1096,    0, 1106, 1114,
     1115, 1107, 1120,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1187, 1177, 1180,   77, 1183
    } ;

static const flex_int16_t yy_def[429] =
    {   0,
      424,    1,  424,  424,  424,  424,  424,  425,  424,  424,
      426,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  424,
      424,  424,  424,  424,  424,  424,  425,  424,  426,  426,
      424,  428,  424,  424,  424,  424,  424,  424,  424,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  424,  428,  428,  428,  428,  428,  424,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  428,  428,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      428,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,

      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  427,  427,  427,
      427,  427,  427,    0,  424,  424,  424,  424
    } ;

static const flex_int16_t yy_nxt[1266] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   42,   49,
       50,   51,    4,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   43,
       44,   45,   46,   47,   48,   42,   49,   52,   53,   70,
       53,   99,   55,  102,   55,   55,   63,   63,   63,   55,
       55,   54,   55,   57,   55,   58,   55,  135,   55,   55,

       55,   56,   55,   55,   55,   66,   55,   98,   55,   99,
       55,  102,   55,   55,   55,   55,   55,   55,   55,  103,
       55,   64,   55,   65,   65,   65,  355,  356,   55,   55,
       55,  129,   71,   55,   98,   55,   55,   72,   58,   73,
       55,   55,  424,   55,   74,   55,  424,  103,  130,  131,
      132,   55,   55,   55,   55,   55,   55,   55,  100,  129,
       71,   55,   55,  101,   55,   72,   55,   73,   89,   55,
       90,   74,   55,   55,   55,   91,  130,  131,  132,  424,
       92,  133,  424,   55,   60,   60,  100,   60,   60,   61,
      101,  141,   60,   60,  146,   60,   89,   60,   90,   63,

       63,   63,   91,   60,   60,   60,   55,   92,  106,  133,
       55,  424,   55,   55,  107,  424,  424,   55,   55,  141,
       62,  146,   55,  140,  140,  140,  118,   55,   55,   55,
       55,   55,  119,   55,   55,  424,  106,  424,   55,   55,
      104,   55,  107,   55,  105,   55,  142,   55,   55,   55,
       55,   55,   55,   55,  118,   55,  424,   55,   60,   55,
      119,   55,   55,   55,   67,   68,   55,   55,  104,   55,
      145,   55,  105,   53,  142,   53,  424,   55,   55,   55,
      147,  148,   55,   55,   55,   55,   54,   75,  424,   55,
       55,   76,   55,  149,   55,   85,  108,   77,  145,   86,

       55,   69,   55,   87,   55,  424,  424,   78,  147,  148,
      109,  424,   88,  116,  424,   75,  110,  150,   55,   76,
      149,  143,  424,   85,  108,   77,  151,   86,  424,  424,
      117,   87,   55,   93,   78,  137,  424,  137,  109,   88,
      152,  116,  144,  110,   94,  150,  424,   95,  217,  143,
       96,  424,  424,   97,  151,   55,   79,  117,  153,  424,
      424,   93,   64,   80,   65,   65,   65,  161,  152,  144,
       81,  111,   94,   82,   83,   95,   84,   96,  120,  112,
       97,  154,  424,  113,   79,  153,  114,  115,  121,  424,
      424,   80,  424,  122,  123,  161,  160,  424,   81,  111,

       82,   83,  424,   84,  155,  424,  120,  112,  154,  156,
      113,  124,  424,  114,  115,  125,  121,  157,  126,  127,
      122,  123,   55,  160,   55,   55,  158,  424,  128,   55,
       55,  155,   55,  159,   55,  162,  156,  424,  424,  124,
       55,   55,  134,  125,  163,  157,  126,  127,  164,   55,
      168,   55,   55,  175,  158,  128,   55,   55,  424,   55,
      159,   55,  162,   55,  169,   55,   55,   55,   55,   55,
       55,   55,  163,   55,  424,   55,  164,  424,  168,  424,
      175,   55,   55,   55,  180,  172,   55,  173,   55,   55,
      186,  424,  169,   55,   55,   55,   55,  174,   55,  424,

       55,  179,   55,   55,   55,   55,   55,   55,   55,  424,
       55,  180,   55,  172,  424,  173,  187,  186,   55,   55,
       55,  181,   55,  184,  182,  174,  183,  165,  424,  179,
      140,  140,  140,  166,  424,  185,   55,   60,   60,  424,
       60,   60,   61,  187,  167,   60,   60,  190,   60,  181,
       60,  184,  182,  424,  183,  165,   60,   60,   60,   55,
      170,  166,   55,  185,   55,   55,  171,  188,  189,   55,
       55,  167,   55,   55,   55,  190,  191,  424,  192,  193,
       55,   55,   55,  194,  424,  424,  176,  137,  170,  137,
      424,  177,  178,  171,  195,  188,  189,  203,  196,  197,

      217,  200,  202,  424,  191,  192,  204,  193,  424,  201,
      194,   60,   60,   60,  176,   60,   60,   61,  177,  178,
       60,   60,  195,   60,  203,   60,  196,  197,  198,  200,
      202,   60,   60,   60,  204,   55,  201,  205,  424,  199,
      206,  207,  208,  424,  209,  210,  214,  216,  212,  137,
      215,  137,  211,  424,  213,  219,  198,  220,  225,  137,
      221,  137,  217,  222,  424,  205,  199,  206,  226,  207,
      208,  209,  291,  210,  214,  216,  212,  215,  228,  424,
      211,  213,  219,  424,  220,  225,   60,  137,  221,  137,
      138,  222,  138,  138,  233,  226,  424,  138,  138,  227,

      139,  229,  138,  223,   55,  228,   55,   55,  138,  138,
      138,   55,   55,  230,   55,  231,   55,  238,  224,  232,
      234,  233,   55,   55,   55,  235,  236,  227,  237,  229,
      241,  223,  242,  239,  243,  424,  244,  245,  424,  246,
      247,  230,  248,  231,  238,  224,  240,  232,  234,  255,
      424,  249,  424,  235,  236,  424,  237,  241,  254,  256,
      242,  239,  243,  138,  244,  245,  246,  257,  247,  258,
      248,  250,  251,  240,  424,  259,  255,   55,  137,  249,
      137,  138,  252,  138,  138,  260,  254,  256,  138,  138,
      261,  139,  253,  138,  262,  257,  258,  263,  264,  138,

      138,  138,  259,  265,  424,  266,  267,  268,  269,  270,
      252,  271,  260,  272,  273,  274,  275,  277,  261,  276,
      253,  278,  262,  279,  263,  280,  264,  424,  281,  424,
      424,  265,  266,  267,  282,  268,  269,  270,  424,  271,
      272,  283,  273,  274,  275,  277,  276,  284,  278,  424,
      424,  279,  289,  280,  138,  137,  281,  137,  138,  285,
      138,  138,  282,  287,  292,  138,  138,  288,  218,  283,
      138,  290,  293,  294,  284,  295,  138,  138,  138,  296,
      289,  286,  297,  298,  299,  300,  301,  285,  302,  303,
      305,  287,  292,  304,  288,  306,  307,  309,  290,  308,

      293,  294,  310,  295,  424,  311,  424,  296,  286,  297,
      424,  298,  299,  300,  301,  424,  302,  303,  305,  312,
      304,  313,  316,  306,  307,  309,  308,  424,  314,  318,
      310,  138,  137,  311,  137,  138,  317,  138,  138,  315,
      319,  320,  138,  138,  321,  218,  312,  138,  313,  316,
      322,  323,  324,  138,  138,  138,  314,  318,  325,  326,
      424,  327,  328,  317,  329,  330,  315,  319,  320,  331,
      332,  335,  321,  333,  334,  336,  337,  322,  323,  338,
      324,  339,  137,  340,  137,  341,  325,  326,  327,  328,
      342,  343,  329,  330,  344,  291,  331,  345,  332,  335,

      333,  334,  346,  336,  337,  347,  348,  338,  138,  339,
      349,  340,  350,  341,  351,  352,  353,  342,  354,  343,
      357,  358,  344,  359,  360,  345,  361,  363,  424,  362,
      346,  364,  365,  347,  348,  366,  367,  368,  349,  369,
      350,  351,  352,  370,  353,  371,  354,  357,  372,  358,
      359,  373,  360,  361,  374,  363,  362,  375,  377,  364,
      365,  376,  366,  367,  378,  368,  369,  379,  380,  381,
      384,  370,  371,  382,  383,  385,  372,  386,  373,  387,
      388,  374,  389,  390,  391,  375,  377,  392,  376,  393,
      394,  395,  378,  396,  397,  379,  380,  381,  384,  398,

      382,  383,  385,  399,  401,  386,  387,  400,  388,  389,
      402,  390,  391,  403,  404,  392,  405,  393,  394,  395,
      396,  406,  397,  407,  408,  409,  410,  398,  411,  412,
      413,  399,  401,  414,  400,  415,  416,  402,  417,  424,
      418,  403,  404,  405,  419,  420,  421,  422,  423,  406,
      424,  407,  408,  409,  410,  424,  411,  412,  413,  424,
      424,  414,  415,  416,  424,  424,  417,  418,  424,  424,
      424,  424,  419,  420,  421,  422,  423,   57,   57,   57,
       59,   59,   59,  136,  424,  136,    3,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,

      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424
    } ;

static const flex_int16_t yy_chk[1266] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,  427,
        5,   33,    7,   35,    7,    7,   18,   18,   18,    7,
        7,    5,    7,   58,    7,   57,    9,   54,    9,    9,

        7,    7,    7,    9,    9,   21,    9,   32,    9,   33,
       10,   35,   10,   10,    9,    9,    9,   10,   10,   36,
       10,   20,   10,   20,   20,   20,  308,  308,   10,   10,
       10,   46,   26,   14,   32,   14,   14,   26,    8,   26,
       14,   14,    3,   14,   26,   14,    0,   36,   47,   48,
       48,   14,   14,   14,   15,    7,   15,   15,   34,   46,
       26,   15,   15,   34,   15,   26,   15,   26,   30,    9,
       30,   26,   15,   15,   15,   30,   47,   48,   48,    0,
       30,   49,    0,   10,   11,   11,   34,   11,   11,   11,
       34,   71,   11,   11,   75,   11,   30,   11,   30,   63,

       63,   63,   30,   11,   11,   11,   14,   30,   38,   49,
       17,    0,   17,   17,   38,    0,    0,   17,   17,   71,
       17,   75,   17,   64,   64,   64,   43,   15,   17,   17,
       17,   19,   43,   19,   19,    0,   38,    0,   19,   19,
       37,   19,   38,   19,   37,   23,   72,   23,   23,   19,
       19,   19,   23,   23,   43,   23,    0,   23,   11,   24,
       43,   24,   24,   23,   23,   23,   24,   24,   37,   24,
       74,   24,   37,   53,   72,   53,    0,   24,   24,   24,
       76,   77,   25,   17,   25,   25,   53,   27,    0,   25,
       25,   27,   25,   79,   25,   29,   39,   27,   74,   29,

       25,   25,   25,   29,   19,    0,    0,   27,   76,   77,
       39,    0,   29,   41,    0,   27,   39,   80,   23,   27,
       79,   73,    0,   29,   39,   27,   81,   29,    0,    0,
       41,   29,   24,   31,   27,  135,    0,  135,   39,   29,
       82,   41,   73,   39,   31,   80,    0,   31,  135,   73,
       31,    0,    0,   31,   81,   25,   28,   41,   83,    0,
        0,   31,   65,   28,   65,   65,   65,   88,   82,   73,
       28,   40,   31,   28,   28,   31,   28,   31,   44,   40,
       31,   84,    0,   40,   28,   83,   40,   40,   44,    0,
        0,   28,    0,   44,   44,   88,   87,    0,   28,   40,

       28,   28,    0,   28,   85,    0,   44,   40,   84,   85,
       40,   45,    0,   40,   40,   45,   44,   86,   45,   45,
       44,   44,   52,   87,   52,   52,   86,    0,   45,   52,
       52,   85,   52,   86,   52,   89,   85,    0,    0,   45,
       52,   52,   52,   45,   90,   86,   45,   45,   91,   55,
       93,   55,   55,   99,   86,   45,   55,   55,    0,   55,
       86,   55,   89,   56,   94,   56,   56,   55,   55,   55,
       56,   56,   90,   56,    0,   56,   91,    0,   93,    0,
       99,   56,   56,   56,  103,   96,   67,   97,   67,   67,
      108,    0,   94,   67,   67,   52,   67,   98,   67,    0,

       68,  102,   68,   68,   67,   67,   67,   68,   68,    0,
       68,  103,   68,   96,    0,   97,  109,  108,   68,   68,
       68,  104,   55,  106,  105,   98,  105,   92,    0,  102,
      140,  140,  140,   92,    0,  107,   56,   59,   59,    0,
       59,   59,   59,  109,   92,   59,   59,  111,   59,  104,
       59,  106,  105,    0,  105,   92,   59,   59,   59,   67,
       95,   92,   69,  107,   69,   69,   95,  110,  110,   69,
       69,   92,   69,   68,   69,  111,  113,    0,  114,  115,
       69,   69,   69,  116,    0,    0,  100,  136,   95,  136,
        0,  100,  100,   95,  117,  110,  110,  122,  117,  118,

      136,  120,  121,    0,  113,  114,  123,  115,    0,  120,
      116,   59,   60,   60,  100,   60,   60,   60,  100,  100,
       60,   60,  117,   60,  122,   60,  117,  118,  119,  120,
      121,   60,   60,   60,  123,   69,  120,  124,    0,  119,
      125,  126,  127,    0,  128,  129,  131,  133,  130,  137,
      132,  137,  129,    0,  130,  141,  119,  146,  150,  217,
      147,  217,  137,  148,    0,  124,  119,  125,  151,  126,
      127,  128,  217,  129,  131,  133,  130,  132,  154,    0,
      129,  130,  141,    0,  146,  150,   60,   62,  147,   62,
       62,  148,   62,   62,  160,  151,    0,   62,   62,  152,

       62,  155,   62,  149,  134,  154,  134,  134,   62,   62,
       62,  134,  134,  157,  134,  158,  134,  166,  149,  159,
      161,  160,  134,  134,  134,  162,  164,  152,  165,  155,
      168,  149,  169,  167,  170,    0,  172,  173,    0,  174,
      175,  157,  176,  158,  166,  149,  167,  159,  161,  181,
        0,  177,    0,  162,  164,    0,  165,  168,  179,  182,
      169,  167,  170,   62,  172,  173,  174,  183,  175,  184,
      176,  178,  178,  167,    0,  185,  181,  134,  138,  177,
      138,  138,  178,  138,  138,  186,  179,  182,  138,  138,
      188,  138,  178,  138,  189,  183,  184,  190,  191,  138,

      138,  138,  185,  192,    0,  193,  194,  195,  196,  197,
      178,  198,  186,  199,  200,  202,  203,  205,  188,  204,
      178,  206,  189,  207,  190,  208,  191,    0,  209,    0,
        0,  192,  193,  194,  210,  195,  196,  197,    0,  198,
      199,  211,  200,  202,  203,  205,  204,  212,  206,    0,
        0,  207,  215,  208,  138,  139,  209,  139,  139,  213,
      139,  139,  210,  214,  219,  139,  139,  214,  139,  211,
      139,  216,  220,  221,  212,  222,  139,  139,  139,  225,
      215,  213,  227,  228,  230,  231,  233,  213,  236,  237,
      239,  214,  219,  238,  214,  240,  241,  243,  216,  242,

      220,  221,  246,  222,    0,  247,    0,  225,  213,  227,
        0,  228,  230,  231,  233,    0,  236,  237,  239,  248,
      238,  249,  257,  240,  241,  243,  242,    0,  252,  259,
      246,  139,  218,  247,  218,  218,  258,  218,  218,  252,
      260,  262,  218,  218,  263,  218,  248,  218,  249,  257,
      264,  265,  267,  218,  218,  218,  252,  259,  268,  269,
        0,  270,  271,  258,  273,  275,  252,  260,  262,  276,
      277,  283,  263,  280,  282,  284,  285,  264,  265,  286,
      267,  288,  291,  292,  291,  293,  268,  269,  270,  271,
      294,  295,  273,  275,  296,  291,  276,  297,  277,  283,

      280,  282,  298,  284,  285,  299,  300,  286,  218,  288,
      301,  292,  302,  293,  303,  304,  305,  294,  306,  295,
      309,  311,  296,  313,  314,  297,  315,  317,    0,  315,
      298,  319,  320,  299,  300,  321,  324,  325,  301,  326,
      302,  303,  304,  328,  305,  329,  306,  309,  330,  311,
      313,  331,  314,  315,  333,  317,  315,  334,  337,  319,
      320,  336,  321,  324,  338,  325,  326,  340,  341,  343,
      347,  328,  329,  344,  346,  348,  330,  349,  331,  354,
      357,  333,  360,  361,  362,  334,  337,  364,  336,  365,
      367,  368,  338,  369,  373,  340,  341,  343,  347,  374,

      344,  346,  348,  375,  378,  349,  354,  377,  357,  360,
      379,  361,  362,  382,  385,  364,  386,  365,  367,  368,
      369,  388,  373,  390,  391,  394,  395,  374,  397,  398,
      399,  375,  378,  402,  377,  403,  404,  379,  406,    0,
      407,  382,  385,  386,  409,  410,  411,  412,  413,  388,
        0,  390,  391,  394,  395,    0,  397,  398,  399,    0,
        0,  402,  403,  404,    0,    0,  406,  407,    0,    0,
        0,    0,  409,  410,  411,  412,  413,  425,  425,  425,
      426,  426,  426,  428,    0,  428,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,

      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[127] =
    {   0,
      140,  141,  142,  143,  144,  145,  146,  147,  148,  149,
      150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
      160,  161,  163,  164,  165,  166,  167,  168,  170,  171,
      172,  173,  174,  175,  177,  178,  179,  180,  181,  182,
      183,  184,  186,  187,  188,  189,  190,  191,  192,  194,
      195,  196,  197,  198,  199,  200,  202,  203,  204,  205,
      206,  207,  208,  209,  211,  213,  215,  216,  217,  218,
      219,  220,  221,  222,  223,  224,  226,  228,  230,  231,
      232,  234,  235,  237,  238,  239,  240,  242,  243,  244,
      245,  246,  247,  249,  250,  251,  253,  254,  255,  256,

      258,  259,  260,  261,  262,  264,  265,  266,  267,  268,
      270,  271,  273,  274,  275,  277,  278,  279,  281,  286,
      289,  295,  301,  304,  307,  313
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
#line 2 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
# include <cerrno>
# include <climits>
# include <cstdlib>
# include <cstring> // strerror
# include <string>
# include "lingodb/compiler/frontend/driver.h"
# include "parser.hpp"
# include <algorithm>
#include <lingodb/compiler/frontend/generated/location.hh>

#line 974 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/lexer.cpp"
#line 15 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
#if defined __clang__
# define CLANG_VERSION (__clang_major__ * 100 + __clang_minor__)
#endif

// Clang and ICC like to pretend they are GCC.
#if defined __GNUC__ && !defined __clang__ && !defined __ICC
# define GCC_VERSION (__GNUC__ * 100 + __GNUC_MINOR__)
#endif

// Pacify warnings in yy_init_buffer (observed with Flex 2.6.4)
// and GCC 6.4.0, 7.3.0 with -O3.
#if defined GCC_VERSION && 600 <= GCC_VERSION
# pragma GCC diagnostic ignored "-Wnull-dereference"
#endif

// This example uses Flex's C back end, yet compiles it as C++.
// So expect warnings about C style casts and NULL.
#if defined CLANG_VERSION && 500 <= CLANG_VERSION
# pragma clang diagnostic ignored "-Wold-style-cast"
# pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"
#elif defined GCC_VERSION && 407 <= GCC_VERSION
# pragma GCC diagnostic ignored "-Wold-style-cast"
# pragma GCC diagnostic ignored "-Wzero-as-null-pointer-constant"
#endif

#define FLEX_VERSION (YY_FLEX_MAJOR_VERSION * 100 + YY_FLEX_MINOR_VERSION)

// Old versions of Flex (2.5.35) generate an incomplete documentation comment.
//
//  In file included from src/scan-code-c.c:3:
//  src/scan-code.c:2198:21: error: empty paragraph passed to '@param' command
//        [-Werror,-Wdocumentation]
//   * @param line_number
//     ~~~~~~~~~~~~~~~~~^
//  1 error generated.
#if FLEX_VERSION < 206 && defined CLANG_VERSION
# pragma clang diagnostic ignored "-Wdocumentation"
#endif

// Old versions of Flex (2.5.35) use 'register'.  Warnings introduced in
// GCC 7 and Clang 6.
#if FLEX_VERSION < 206
# if defined CLANG_VERSION && 600 <= CLANG_VERSION
#  pragma clang diagnostic ignored "-Wdeprecated-register"
# elif defined GCC_VERSION && 700 <= GCC_VERSION
#  pragma GCC diagnostic ignored "-Wregister"
# endif
#endif

#if FLEX_VERSION < 206
# if defined CLANG_VERSION
#  pragma clang diagnostic ignored "-Wconversion"
#  pragma clang diagnostic ignored "-Wdocumentation"
#  pragma clang diagnostic ignored "-Wshorten-64-to-32"
#  pragma clang diagnostic ignored "-Wsign-conversion"
# elif defined GCC_VERSION
#  pragma GCC diagnostic ignored "-Wconversion"
#  pragma GCC diagnostic ignored "-Wsign-conversion"
# endif
#endif

// Flex 2.6.4, GCC 9
// warning: useless cast to type 'int' [-Wuseless-cast]
// 1361 |   YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
//      |                                                 ^
#if defined GCC_VERSION && 900 <= GCC_VERSION
# pragma GCC diagnostic ignored "-Wuseless-cast"
#endif

#define MAKE_KEYWORD(token_name) \
    return lingodb::parser::make_##token_name(std::string(yytext),loc);


#line 1049 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/lexer.cpp"
#define YY_NO_INPUT 1
#line 93 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
  // A number symbol corresponding to the value in S.

  
#line 1055 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/lexer.cpp"
#line 127 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
  // Code run each time a pattern is matched.
  # define YY_USER_ACTION  loc.columns (yyleng);
#line 1059 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/lexer.cpp"
#line 1060 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/lexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 132 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"


#line 135 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
  // A handy shortcut to the location held by the driver.
  lingodb::location& loc = drv.location;
  // Code run each time yylex is called.
  loc.step ();

#line 1347 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 425 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 424 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 127 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 127 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 128 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 140 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ return lingodb::parser::make_LP(loc); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 141 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ return lingodb::parser::make_RP(loc); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 142 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ return lingodb::parser::make_LB(loc); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 143 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ return lingodb::parser::make_RB(loc); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 144 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ return lingodb::parser::make_DOT(loc); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 145 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ return lingodb::parser::make_COMMA(loc); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 146 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ return lingodb::parser::make_SEMICOLON(loc); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 147 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(PLUS); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 148 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(MINUS); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 149 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(SLASH); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 150 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(STAR); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 151 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(EQUAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 152 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(PERCENT); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 153 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(NOT_EQUAL); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 154 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(NOT_EQUAL); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 155 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(LESS_EQUAL); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 156 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(LESS); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 157 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(GREATER_EQUAL); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 158 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(GREATER); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 159 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ return lingodb::parser::make_PIPE(loc); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 160 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(TYPECAST); }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 161 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ loc.lines();}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 163 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(AGGREGATE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 164 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(ALL); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 165 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(AND); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 166 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(AS); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 167 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(ASC); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 168 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(ANY); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 170 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(BETWEEN); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 171 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(BIGINT); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 172 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(BIGINT); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 173 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(BOOLEAN_P); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 174 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(BOOLEAN_P); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 175 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(BY); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 177 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(CASE); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 178 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(CAST); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 179 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(CHAR_P); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 180 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(CHARACTER); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 181 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(CREATE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 182 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(CURRENT_P); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 183 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(COPY); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 184 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(CSV); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 186 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(DATE_P); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 187 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(DAY_P); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 188 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(DECIMAL_P); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 189 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(DESC); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 190 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(DISTINCT); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 191 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(DROP); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 192 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(DELIMITER); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 194 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(ELSE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 195 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(END_P); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 196 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(EXCEPT); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 197 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(EXISTS); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 198 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(EXTEND); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 199 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(EXTRACT); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 200 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(ESCAPE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 202 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(FALSE_P); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 203 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(FLOAT_P); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 204 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(FLOAT_P); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 205 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(DOUBLE_P); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 206 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(FOR); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 207 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(FROM); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 208 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(FULL); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 209 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(FOLLOWING); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 211 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(GROUP_P); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 213 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(HAVING); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 215 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(IN_P); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 216 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(INNER_P); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 217 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(INSERT); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 218 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(INT_P); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 219 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(INT_P); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 220 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(INTEGER); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 221 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(INTERSECT); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 222 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(INTERVAL); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 223 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(INTO); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 224 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(IS); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 226 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(JOIN); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 228 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(KEY); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 230 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(LEFT); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 231 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(LIKE); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 232 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(LIMIT); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 234 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(MINUTE_P); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 235 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(MONTH_P); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 237 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(NATURAL); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 238 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(NOT); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 239 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(NULL_P); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 240 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(NUMERIC); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 242 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(OFFSET); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 243 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(ON); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 244 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(OR); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 245 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(ORDER); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 246 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(OUTER_P); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 247 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(OVER); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 249 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(PARTITION); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 250 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(PRECEDING); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 251 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(PRIMARY); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 253 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(RIGHT); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 254 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(ROLLUP); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 255 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(ROW); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 256 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(ROWS); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 258 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(SELECT); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 259 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(SET); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 260 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(SOME); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 261 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(STRING_P); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 262 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(SUBSTRING); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 264 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(TABLE); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 265 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(TEXT_P); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 266 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(THEN); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 267 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(TRUE_P); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 268 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(TIMESTAMP); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 270 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(UNBOUNDED); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 271 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(UNION); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 273 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(VALUES); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 274 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(VARCHAR); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 275 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(VARYING); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 277 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(WHEN); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 278 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(WHERE); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 279 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(WITH); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 281 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{ MAKE_KEYWORD(YEAR_P); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 284 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
return lingodb::parser::make_YYEOF (loc);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 286 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{
                  /*Ignore*/
                }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 289 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{
                    std::string ident(yytext);
                    std::transform(ident.begin(), ident.end(), ident.begin(),
                        [](unsigned char c){ return std::tolower(c); });
                    return lingodb::parser::make_IDENTIFIER(std::move(ident), loc);
                }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 295 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{
                      std::string text(yytext);
                      std::string trimmed(text.begin() + 1, text.end()-1);
                      return lingodb::parser::make_IDENTIFIER(std::move(trimmed), loc);

                    }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 301 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{
				    return lingodb::parser::make_ICONST(std::stoul(yytext), loc);
			    }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 304 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{
				    return lingodb::parser::make_FCONST(yytext, loc);
			    }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 307 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{
  std::string ident(yytext);
  ident.erase(0,1);
  ident.erase(ident.size()-1,1);
  return lingodb::parser::make_STRING_VALUE(std::move(ident), loc);
}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 313 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
{
  std::string ident(yytext);

  /*
   * For SQL compatibility multi char operators cannot end with '+' and '-'.
   * They should be parsed as two tokens
  */
  //Remove '+' and '-' at the end if necessary
  while(ident[ident.length() - 1] == '-' || ident[ident.length() - 1] == '+') {
    ident.erase(ident.length() - 1);
  }
  yyless(ident.length());

  if(ident == "<=") {
    return lingodb::parser::make_LESS_EQUAL("<=", loc);
  } else if(ident == "<>" || ident == "!=") {
    return lingodb::parser::make_NOT_EQUAL("<>", loc);
  } else if(ident == ">=") {
    return lingodb::parser::make_GREATER_EQUAL(">=", loc);
  }

  return lingodb::parser::make_Op(std::move(ident), loc);
}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 336 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"
ECHO;
	YY_BREAK
#line 2108 "/home/bachmaier/projects/lingo-db/include/lingodb/compiler/frontend/generated/lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 425 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 425 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 424);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 336 "/home/bachmaier/projects/lingo-db/src/compiler/frontend/lexer.l"




void
Driver::scanBegin (bool isFile)
{
  yy_flex_debug = traceScanning;
  if (file.empty () || file == "-")
    yyin = stdin;
  if(!isFile) {
     const char* sql = file.c_str();
     YY_BUFFER_STATE buffer = yy_scan_string(sql);
     yy_switch_to_buffer(buffer);
  }
  else if (!(yyin = fopen (file.c_str (), "r")))
    {
      std::cerr << "cannot open " << file << ": " << strerror (errno) << '\n';
      exit (EXIT_FAILURE);
    }
}

void
Driver::scanEnd ()
{
  if (YY_CURRENT_BUFFER) {
      yy_delete_buffer(YY_CURRENT_BUFFER);
   }
   if (yyin && yyin != stdin) {
      fclose (yyin);
   }
}
